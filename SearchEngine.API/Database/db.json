{
  "documents": {
    "0": {
      "id": 0,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\FSC 311.pptx",
      "content": "FSC 311History and Philosophy of ScienceKHALID ADEKOYA    kadekoya@unilag.edu.ngLECTURE NOTES 001. 2021/2022 SESSIONOutline -   HISTORYScience in the Ancient WorldWhat Science is and its historical evolutionPrehistory \u2013 Babylon, Egypt and GreeceThe age of AlchemyRenaissance Science \u2013 da Vinci, Copernicus, Kepler, Galileo and NewtonThe mechanical philosophy \u2013 Darwin and Evolution, Mendel and GeneticsIndustrial revolution \u2013 Faraday, Maxwell, Pasteur, Dalton etcThe new era of ScienceOUTLINE  - PHILOSOPHYWhat is Science and what it doesPhilosophic disciplines and their relation to science- metaphysics, epistemology and logicGenesis of scientific thought and knowledgeScience as a human activityRoots of reason \u2013 habit formation intelligence, knowing- myths, anthropomorphic and animistic explanationThe Greeks and origins of criticismsThe methods of Science; observation and empirical scienceCriteria for observationModels and representation of factsAbstraction and orderMeasurementsHypothesis and experimentsLaws and theoriesScience in the Ancient WorldThe\u00A0history of science in early cultures\u00A0covers\u00A0protoscience\u00A0in\u00A0ancient history\u00A0to Islamic Scienceadvice and knowledge was passed from generation to generation in an\u00A0oral tradition or oral lore (songs. speeches, folktales, ballads, chants, incantations,  prose, verses, poems etc ) The development of\u00A0writing\u00A0enabled knowledge to be stored and communicated across generations with much greater fidelityScience is founded on the idea that experience, effort, and reason are valid, while magic is founded on intuition and hope. In ancient times,\u00A0it was common for science to be merged with magic, religion, mysticism, and philosophy, since the limits of the scientific discipline were not fully understoodAncient near EastMesopotamia \u2013 Came from Sumer Now Iraq.(3500BC)\tPythagoras law, Astronomy, Medicine (Babylonian)Egypt \u2013 Medicine, Astronomy and Mathematics (Egyptian)Persia \u2013 Mathematics, Astronomy, Physics, Chemistry, Biology, \t\t\t\t(Science and Technology in Medieval Islam, Iran))Mesopotamian\u00A0clay tablet-letter from 2400 BC,\u00A0Louvre. (from King of\u00A0Lagash, found at\u00A0Girsu)Greco-Roman World\u00A0History of science in Classical AntiquityScientific thought in\u00A0Classical Antiquity\u00A0becomes tangible from the 6th century BC in\u00A0pre-Socratic philosophy\u00A0(Thales,\u00A0Pythagoras). In c. 385 BC,\u00A0Plato\u00A0founded the\u00A0Academy. With Plato\u0027s student\u00A0Aristotle\u00A0begins the \u0022scientific revolution\u0022 of the\u00A0Hellenistic period\u00A0culminating in the 3rd to 2nd centuries with scholars such as\u00A0Eratosthenes,\u00A0Euclid,\u00A0Aristarchus of Samos,\u00A0Hipparchus\u00A0and\u00A0Archimedes.The important legacy of this period included substantial advances in factual knowledge, especially in\u00A0anatomy,\u00A0zoology,\u00A0botany,\u00A0mineralogy,\u00A0geography,\u00A0mathematics\u00A0and\u00A0astronomy; an awareness of the importance of certain scientific problems, especially those related to the problem of change and its causes; and a recognition of the methodological importance of applying mathematics to natural phenomena and of undertaking empirical research.India\u00A0Science and technology in ancient India\u00A0Indian astronomy,\u00A0Indian mathematics,\u00A0Ayurveda, and\u00A0History of metallurgy in the Indian subcontinentExcavations at\u00A0Harappa,\u00A0Mohenjo-daro\u00A0and other sites of the\u00A0Indus Valley civilization\u00A0(IVC) have uncovered evidence of the use of \u0022practical mathematics\u0022.China and the Far East\u00A0History of science and technology in China\u00A0and\u00A0Four Great InventionsThe first recorded observations of\u00A0solar eclipses\u00A0and supernovae were made in China.On July 4, 1054, Chinese astronomers observed a\u00A0guest star, a\u00A0supernova, the remnant of which is now called the\u00A0Crab Nebula.\u00A0The \u0022Four Great Inventions\u0022 of China as among some of the most important technological advances are. the\u00A0compass,\u00A0gunpowder,\u00A0papermaking, and\u00A0printing,Islamic Science7th and 16th century marks the time period of the embarking of Islamic civilizationsIslamic Medicine\u00A0Islamic AstronomyWithin the people researching there was\u00A0Ibn Sina (Avicenna) out of the many things he did including writing The Canon of Medicine; he established free hospitals and developed many great treatments unknown to manThree main figures were\u00A0Abu Ma\u0027shar al-Balkhi,\u00A0al-Biruni\u00A0and\u00A0Nasir al-Din al-Tusi\u00A0these three men all wrote Treatise having to deal with astrology.Abd al-Rahman al-Sufi\u00A0was one the most influential figures in improving the geometrical models of\u00A0Ptolemy. Abd wrote Book of the Images of the Fixed Stars which described the forty-eight constellations formed by\u00A0fixed stars.Age of Alchemyalchemy conjures up images of mysticism or a fool\u2019s quest for gold.But alchemy\u2019s golden age ( ca 1300 \u2013 1700)was much more. In this era of experimental discovery and practical skill, physicians and chemists worked to heal the human body. They studied the secrets of the natural world. These men and women ushered in change, creativity, and scientific inquiry. This digital collection features selected manuscripts, rare books, paintings, and ephemera relating to alchemical topics and experimentation. Materials in this collection include depictions of alchemists\u2019 workshops and pursuits on philosophy, magic, medicine, spiritual wisdom, and the transformation of matter.Renaissance scienceRebirth of Science and culture after the ancient ScienceThere was an escalation in the study of astronomy, anatomy and medicine, geography, alchemy, mathematics and architectureOne of the major scientific discoveries of the Renaissance came from Polish mathematician and astronomer Nicolaus CopernicusBoth the microscope and the telescope were invented during the RenaissanceThe Renaissance contributed to the Scientific Revolution by\u00A0focusing on humanity instead of the divineRenaissance science (Contd.)During the Renaissance, great advances occurred in\u00A0geography, astronomy, chemistry, physics, mathematics, manufacturing, anatomy and engineering.The Renaissance and the Scientific Revolution constituted what was, perhaps, the most significant period of discovery and growth of the sciences in the whole of historyscience and technology began a cycle of mutual advancementAstronomer Nicolaus Copernicus put forth a new theory during the Renaissance.\u00A0He said that the Sun was the center of the universe and that the Earth and the planets orbited the SunRenaissance science (Contd.)Petrarch\u00A0laid the foundation to Renaissance humanism through his writings, and he came to be known as the father of the RenaissanceLeonardo da Vinci, Michelangelo, and Claudio Monteverdi may have earned their reputations as artists and musicians but they were also inventors, physicians, and acousticiansGalileo Galilei, Johannes Kepler, and Isaac Newton\u00A0may be known primarily as scientists but they were also writers, musicians, and philosophersRenaissance science (Contd.)The developments in science during the 16th and 17th centuries have traditionally been called the \u201CScientific Revolution.\u201D The era that began with\u00A0Nicolaus Copernicus\u00A0(b. 1473\u2013d. 1543) and ended with Isaac Newton (b. 1642\u2013d.The period saw significant developments in the following areas:AlchemyAstronomyMathematics (Greek mathematics)Medicine (Medical renaissance)Geography and the New World. Mechanical PhilosophyDescartes was a French-born philosopher who developed what came to be known as \u0027the mechanical philosophy\u0027, according to which\u00A0the natural world consists in nothing but matter in motion.The mechanical philosophy is\u00A0a form of\u00A0natural philosophy\u00A0which compares the universe to a large-scale mechanism\u00A0(i.e. a machine).The mechanical philosophy derived from the views of the Greek philosopher Epicurus (341\u2013271 b.c.e.), who sought the key to the good life. He considered the good life to be one that maximizes pleasure and minimizes pain.Darwin and EvolutionDarwin proposed that\u00A0species can change over time, that new species come from pre-existing species, and that all species share a common ancestor.five theories that Darwin combined: evolution as such,\u00A0common descent, gradualism, multiplication of species, and natural selection.The theory of evolution is based on the idea that\u00A0all species?\u00A0are related and gradually change over time.The theory of evolution is not a hypothesis, but the scientifically accepted explanation of the incontrovertible fact that life and its many forms has changed over the years\u0022The basic theory of evolution has been confirmed\u00A0so completely that most modern biologists consider evolution simply a fact.Mendel and GeneticsGregor Mendel, through his work on pea plants,\u00A0discovered the fundamental laws of inheritance.The Mendel\u0027s four postulates and laws of inheritance are: (1) Principles of Paired Factors (2) Principle of Dominance (3) Law of Segregation or Law of Purity of Gametes (Mendel\u0027s First Law of Inheritance) and (4) Law of Independent Assortment (Mendel\u0027s Second Law of Inheritance).Industrial RevolutionThe Industrial Revolution was\u00A0the transition from creating goods by hand to using machines. Its start and end are widely debated by scholars, but the period generally spanned from about 1760 to 1840.the process of change from an agrarian and handicraft economy to one dominated by industry and machine manufacturing.It brought about sweeping changes in economic and social organization.The most important of the changes that brought about the Industrial Revolution were the: invention of machines to do the work of hand tools,  use of steam and later of other kinds of power, and  adoption of the factory system.The 4 industrial revolution periods and significanceFirst Industrial Revolution: Coal in 1765.Second Industrial Revolution: Gas in 1870.Third Industrial Revolution: Electronics and Nuclear in 1969.Fourth Industrial Revolution: Internet and Renewable Energy in 2000The Industrial Revolution began in\u00A0Great Britain, and many of the technological and architectural innovations were of British origin.Impacts of Industrial revolution.sweeping changes in economic and social organization. wider distribution of wealth and increased international trademanagerial hierarchies also developed to oversee the division of laborInventors and Inventions of the Industrial RevolutionSpinning and weaving. ...The steam engine. ...Harnessing electricity. ...The telegraph and the telephone. ...The internal-combustion engine and the automobile.Scientists contributions (Selected)Michael Faraday FRS was an English scientist who contributed to the study of electromagnetism and electrochemistry. His main discoveries include the principles underlying electromagnetic induction, diamagnetism and electrolysisJames Clerk Maxwell FRSE FRS was a Scottish mathematician and scientist responsible for the classical theory of electromagnetic radiation, which was the first theory to describe electricity, magnetism and light as different manifestations of the same phenomenonLouis Pasteur FRS was a French chemist and microbiologist renowned for his discoveries of the principles of vaccination, microbial fermentation and pasteurization, the latter of which was named after himJohn Dalton FRS was an English chemist, physicist and meteorologist. He is best known for introducing the atomic theory into chemistry, and for his research into colour blindness, which he had. Colour blindness is known as Daltonism in several languages, being named after him.New Era of ScienceScientific knowledge\u00A0allows us to develop new technologies, solve practical problems, and make informed decisions\u00A0With a dramatically changing media environment, challenging economic and social climates, shifting relationships between citizens and policy makers and an evolving understanding of democracy,\u00A0science stands as a ready tool to help combat modern difficultiesEmerging technologies are _ Drones, Robotics, Vertical farming, Biometrics, 6G Technology, Artificial Uterus, Airless tyres, Green bullet, memory erassure, Artificial Intelligence, Molecular Electronics etc.History of Sciencecovers the development of\u00A0science from\u00A0ancient times to the\u00A0present.studies the emergence and development of systematic knowledge.It covers the three branches of Science : NATURAL, SOCIAL and FORMALNATURAL - cosmological,\u00A0geological,\u00A0physical,\u00A0chemical, and\u00A0biological\u00A0SOCIAL - the study of\u00A0human behavior\u00A0in its social and cultural aspectsFORMAL - the study of\u00A0formal systems, such as those under the branches of\u00A0logic\u00A0and\u00A0mathematics, which use an\u00A0a priori, as opposed to\u00A0empirical,\u00A0methodology.A priori\u00A0(\u0022from the earlier\u0022) and\u00A0a posteriori\u00A0(\u0022from the later\u0022)Earliest root of Science is traced to Ancient Egypt and Mesopotamia (3000 \u2013 1200 BCE)A priori Vs A posterioriA priori\u00A0(\u0022from the earlier\u0022) and\u00A0a posteriori\u00A0(\u0022from the later\u0022) are\u00A0Latin\u00A0phrases used in\u00A0philosophy\u00A0to distinguish types of\u00A0knowledge,\u00A0justification, or\u00A0argument\u00A0by their reliance on empirical evidence or experience.\u00A0A priori\u00A0knowledge is independent from current\u00A0experience\u00A0(e.g., as part of a new study). Examples include\u00A0mathematics,[i]\u00A0tautologies, and\u00A0deduction\u00A0from\u00A0pure reason.A posteriori\u00A0knowledge depends on\u00A0empirical evidence. Examples include most fields of\u00A0science\u00A0and aspects of\u00A0personal knowledge.Who first discovered science?ARISTOTLE is considered by many to be the first scientist, although the term postdates him by more than two millennia. In Greece in the fourth century BC, he pioneered the techniques of logic, observation, inquiry and demonstrationAristotle further informed that _ Thales, Anaximander and Anaximenes, 6th century Ionian philosophers, were the first to investigate natural phenomena.Whewell coined the term Science  in 1833What came first in science?\u00A0The observation of nature\u00A0came first, then followed by the practical useWho wrote the first book \u201CHistory of science\u201D is about development of science  -   F.\u00A0Cojori.It was\u00A0the Greeks\u00A0who first suggested that matter was made up of atoms, it was agreed that Science started from them. Astronomy  is the oldest of all the sciencesWhy is history called the mother of all sciences?History by its very nature, scope, form, structure, subject matter and values, stands out as an important discipline to be earnestly pursued.\u00A0History, in as much as it incorporates all human activity, is the mother of all disciplines.WHAT IS SCIENCEFAT TEXT BOOKSWHITE LABORATORY COATSMICROSCOPESCOMPLEX NUMBERS CALCULATIONSGADGETSTELESCOPESFIELD TRIPSEXPERIMENTSCOMPUTERS?\u2026\u2026\u2026\u2026 WHAT DID SCIENCE MEAN TO YOU BEFORE NOW29What is Science? Science\u00A0(from\u00A0Latin\u00A0scientia, meaning \u0022knowledge\u0022)\u00A0the pursuit and application of knowledge and understanding of the natural and social world following a systematic methodology based on evidenceis a systematic enterprise that builds and organizes\u00A0knowledge\u00A0in the form of testable\u00A0explanations\u00A0and\u00A0predictions\u00A0about the\u00A0universeBody of knowledge comprising of measurable or verifiable facts acquired through application of the scientific method, and generalized into scientific laws or principles.\u00A0the intellectual and practical activity encompassing the systematic study of the structure and behaviour of the physical and natural world through observation and experiment.a method that allows a person to possess, with the highest degree of certainty possible, reliable knowledge (justified true belief) about natureCan you attempt your own definitions-------------------------------314USING SCIENCE IN  SENTENCES---gives you the ability to discover different ways things operate, why they operate, and what the outcome would be---has made many things possible, from finding out cures to deadly diseases, to enabling human beings to walk on the moon\u2019s surface.behind yoga --- is helping many instructors to understand how their muscles are working and how this corresponds to negative and positive emotions in the brain3233GOALS OF SCIENCEExplore and understand the Natural WorldExplain events in the Natural World Use those explanations to make useful predictionsAre some things unpredictable34To Satisfy basic human needs and improve living standards\u2026\u2026\u2026..353637383940",
      "keywords": {
        "fsc": 1,
        "history": 10,
        "philosophy": 9,
        "sciencekhalid": 1,
        "adekoya": 1,
        "kadekoya": 1,
        "unilag": 1,
        "edu": 1,
        "nglecture": 1,
        "notes": 1,
        "sessionoutline": 1,
        "historyscience": 2,
        "ancient": 8,
        "worldwhat": 1,
        "science": 30,
        "its": 6,
        "historical": 1,
        "evolutionprehistory": 1,
        "\u2013": 11,
        "babylon": 1,
        "egypt": 3,
        "greecethe": 1,
        "age": 3,
        "alchemyrenaissance": 1,
        "da": 2,
        "vinci": 2,
        "copernicus": 3,
        "kepler": 2,
        "galileo": 1,
        "newtonthe": 1,
        "mechanical": 5,
        "darwin": 3,
        "evolution": 6,
        "mendel": 3,
        "geneticsindustrial": 1,
        "revolution": 14,
        "faraday": 2,
        "maxwell": 2,
        "pasteur": 2,
        "dalton": 2,
        "etcthe": 1,
        "new": 7,
        "era": 4,
        "scienceoutline": 1,
        "philosophywhat": 1,
        "doesphilosophic": 1,
        "disciplines": 2,
        "their": 4,
        "relation": 1,
        "metaphysics": 1,
        "epistemology": 1,
        "logicgenesis": 1,
        "scientific": 10,
        "thought": 2,
        "knowledgescience": 1,
        "human": 6,
        "activityroots": 1,
        "reason": 3,
        "habit": 1,
        "formation": 1,
        "intelligence": 2,
        "knowing": 1,
        "myths": 1,
        "anthropomorphic": 1,
        "animistic": 1,
        "explanationthe": 1,
        "greeks": 2,
        "origins": 1,
        "criticismsthe": 1,
        "methods": 1,
        "science;": 1,
        "observation": 4,
        "empirical": 5,
        "sciencecriteria": 1,
        "observationmodels": 1,
        "representation": 1,
        "factsabstraction": 1,
        "ordermeasurementshypothesis": 1,
        "experimentslaws": 1,
        "theoriesscience": 1,
        "worldthe": 1,
        "early": 1,
        "cultures": 1,
        "covers": 2,
        "protoscience": 1,
        "islamic": 4,
        "scienceadvice": 1,
        "knowledge": 14,
        "passed": 1,
        "generation": 2,
        "oral": 2,
        "tradition": 1,
        "lore": 1,
        "songs": 1,
        "speeches": 1,
        "folktales": 1,
        "ballads": 1,
        "chants": 1,
        "incantations": 1,
        "prose": 1,
        "verses": 1,
        "poems": 1,
        "etc": 2,
        "the": 21,
        "development": 4,
        "writing": 2,
        "enabled": 1,
        "stored": 1,
        "communicated": 1,
        "across": 1,
        "generations": 1,
        "much": 3,
        "greater": 1,
        "fidelityscience": 1,
        "founded": 3,
        "idea": 2,
        "experience": 3,
        "effort": 1,
        "valid": 1,
        "magic": 3,
        "intuition": 1,
        "hope": 1,
        "in": 5,
        "times": 2,
        "common": 3,
        "merged": 1,
        "religion": 1,
        "mysticism": 2,
        "limits": 1,
        "discipline": 2,
        "fully": 1,
        "understoodancient": 1,
        "near": 1,
        "eastmesopotamia": 1,
        "came": 6,
        "sumer": 1,
        "now": 3,
        "iraq": 1,
        "bc": 5,
        "pythagoras": 2,
        "law": 6,
        "astronomy": 7,
        "medicine": 6,
        "babylonian": 1,
        "mathematics": 11,
        "egyptian": 1,
        "persia": 1,
        "physics": 2,
        "chemistry": 3,
        "biology": 1,
        "technology": 5,
        "medieval": 1,
        "islam": 1,
        "iran": 1,
        "mesopotamian": 1,
        "clay": 1,
        "tablet": 1,
        "letter": 1,
        "louvre": 1,
        "king": 1,
        "lagash": 1,
        "found": 1,
        "girsu": 1,
        "greco": 1,
        "roman": 1,
        "world": 7,
        "classical": 3,
        "antiquityscientific": 1,
        "antiquity": 1,
        "becomes": 1,
        "tangible": 1,
        "th": 6,
        "century": 4,
        "pre": 2,
        "socratic": 1,
        "thales": 2,
        "c": 2,
        "plato": 1,
        "academy": 1,
        "with": 2,
        "plato\u0027s": 1,
        "student": 1,
        "aristotle": 2,
        "begins": 1,
        "hellenistic": 1,
        "period": 6,
        "culminating": 1,
        "rd": 1,
        "nd": 1,
        "centuries": 2,
        "scholars": 2,
        "such": 3,
        "eratosthenes": 1,
        "euclid": 1,
        "aristarchus": 1,
        "samos": 1,
        "hipparchus": 1,
        "archimedes": 1,
        "important": 4,
        "legacy": 1,
        "included": 1,
        "substantial": 1,
        "advances": 3,
        "factual": 1,
        "especially": 2,
        "anatomy": 3,
        "zoology": 1,
        "botany": 1,
        "mineralogy": 1,
        "geography": 4,
        "astronomy;": 1,
        "awareness": 1,
        "importance": 2,
        "certain": 1,
        "problems": 2,
        "related": 2,
        "problem": 1,
        "change": 5,
        "causes;": 1,
        "recognition": 1,
        "methodological": 1,
        "applying": 1,
        "natural": 11,
        "phenomena": 2,
        "undertaking": 1,
        "research": 2,
        "india": 2,
        "indian": 3,
        "ayurveda": 1,
        "metallurgy": 1,
        "subcontinentexcavations": 1,
        "harappa": 1,
        "mohenjo": 1,
        "daro": 1,
        "other": 2,
        "sites": 1,
        "indus": 1,
        "valley": 1,
        "civilization": 1,
        "ivc": 1,
        "uncovered": 1,
        "evidence": 3,
        "use": 4,
        "practical": 5,
        "china": 4,
        "far": 1,
        "east": 1,
        "four": 3,
        "great": 5,
        "inventionsthe": 1,
        "first": 10,
        "recorded": 1,
        "observations": 1,
        "solar": 1,
        "eclipses": 1,
        "supernovae": 1,
        "made": 3,
        "on": 1,
        "july": 1,
        "chinese": 1,
        "astronomers": 1,
        "observed": 1,
        "guest": 1,
        "star": 1,
        "supernova": 1,
        "remnant": 1,
        "called": 3,
        "crab": 1,
        "nebula": 1,
        "inventions": 2,
        "some": 2,
        "most": 6,
        "technological": 2,
        "compass": 1,
        "gunpowder": 1,
        "papermaking": 1,
        "printing": 1,
        "marks": 1,
        "time": 3,
        "embarking": 1,
        "civilizationsislamic": 1,
        "astronomywithin": 1,
        "people": 1,
        "researching": 1,
        "there": 1,
        "ibn": 1,
        "sina": 1,
        "avicenna": 1,
        "out": 3,
        "many": 7,
        "things": 4,
        "he": 8,
        "did": 2,
        "including": 1,
        "canon": 1,
        "medicine;": 1,
        "established": 1,
        "free": 1,
        "hospitals": 1,
        "developed": 3,
        "treatments": 1,
        "unknown": 1,
        "manthree": 1,
        "main": 2,
        "figures": 2,
        "abu": 1,
        "ma\u0027shar": 1,
        "al": 6,
        "balkhi": 1,
        "biruni": 1,
        "nasir": 1,
        "din": 1,
        "tusi": 1,
        "three": 2,
        "men": 2,
        "all": 7,
        "wrote": 3,
        "treatise": 1,
        "having": 1,
        "deal": 1,
        "astrology": 1,
        "abd": 2,
        "rahman": 1,
        "sufi": 1,
        "one": 3,
        "influential": 1,
        "improving": 1,
        "geometrical": 1,
        "models": 1,
        "ptolemy": 1,
        "book": 2,
        "images": 2,
        "fixed": 2,
        "stars": 2,
        "described": 1,
        "forty": 1,
        "eight": 1,
        "constellations": 1,
        "formed": 1,
        "alchemyalchemy": 1,
        "conjures": 1,
        "up": 2,
        "fool\u2019s": 1,
        "quest": 1,
        "gold": 1,
        "but": 1,
        "alchemy\u2019s": 1,
        "golden": 1,
        "ca": 1,
        "more": 2,
        "experimental": 1,
        "discovery": 2,
        "skill": 1,
        "physicians": 2,
        "chemists": 1,
        "worked": 1,
        "heal": 1,
        "body": 1,
        "they": 4,
        "studied": 1,
        "secrets": 1,
        "these": 1,
        "women": 1,
        "ushered": 1,
        "creativity": 1,
        "inquiry": 2,
        "this": 1,
        "digital": 1,
        "collection": 2,
        "features": 1,
        "selected": 2,
        "manuscripts": 1,
        "rare": 1,
        "books": 1,
        "paintings": 1,
        "ephemera": 1,
        "relating": 1,
        "alchemical": 1,
        "topics": 1,
        "experimentation": 1,
        "materials": 1,
        "include": 4,
        "depictions": 1,
        "alchemists\u2019": 1,
        "workshops": 1,
        "pursuits": 1,
        "spiritual": 1,
        "wisdom": 1,
        "transformation": 1,
        "matter": 4,
        "renaissance": 8,
        "sciencerebirth": 1,
        "culture": 1,
        "sciencethere": 1,
        "escalation": 1,
        "study": 6,
        "alchemy": 1,
        "architectureone": 1,
        "major": 1,
        "discoveries": 3,
        "polish": 1,
        "mathematician": 2,
        "astronomer": 1,
        "nicolaus": 3,
        "copernicusboth": 1,
        "microscope": 1,
        "telescope": 1,
        "invented": 1,
        "renaissancethe": 1,
        "contributed": 2,
        "focusing": 1,
        "humanity": 1,
        "instead": 1,
        "divinerenaissance": 1,
        "contd": 3,
        "during": 1,
        "occurred": 1,
        "manufacturing": 2,
        "engineering": 1,
        "constituted": 1,
        "perhaps": 1,
        "significant": 2,
        "growth": 1,
        "sciences": 2,
        "whole": 1,
        "began": 3,
        "cycle": 1,
        "mutual": 1,
        "advancementastronomer": 1,
        "put": 1,
        "forth": 1,
        "theory": 7,
        "said": 1,
        "sun": 1,
        "center": 1,
        "universe": 2,
        "earth": 1,
        "planets": 1,
        "orbited": 1,
        "sunrenaissance": 1,
        "petrarch": 1,
        "laid": 1,
        "foundation": 1,
        "humanism": 1,
        "his": 5,
        "writings": 1,
        "known": 5,
        "father": 1,
        "renaissanceleonardo": 1,
        "michelangelo": 1,
        "claudio": 1,
        "monteverdi": 1,
        "may": 2,
        "earned": 1,
        "reputations": 1,
        "artists": 1,
        "musicians": 2,
        "also": 3,
        "inventors": 1,
        "acousticiansgalileo": 1,
        "galilei": 1,
        "johannes": 1,
        "isaac": 2,
        "newton": 2,
        "primarily": 1,
        "scientists": 2,
        "writers": 1,
        "philosophersrenaissance": 1,
        "developments": 2,
        "traditionally": 1,
        "\u201Cscientific": 1,
        "\u201D": 1,
        "b": 3,
        "\u2013d": 2,
        "ended": 1,
        "saw": 1,
        "following": 2,
        "areas": 1,
        "alchemyastronomymathematics": 1,
        "greek": 2,
        "medical": 1,
        "philosophydescartes": 1,
        "french": 2,
        "born": 1,
        "philosopher": 2,
        "\u0027the": 1,
        "philosophy\u0027": 1,
        "according": 1,
        "consists": 1,
        "nothing": 1,
        "motion": 1,
        "form": 3,
        "compares": 1,
        "large": 1,
        "scale": 1,
        "mechanism": 1,
        "i": 1,
        "e": 3,
        "machine": 2,
        "derived": 1,
        "views": 1,
        "epicurus": 1,
        "sought": 1,
        "key": 1,
        "good": 2,
        "life": 3,
        "considered": 2,
        "maximizes": 1,
        "pleasure": 1,
        "minimizes": 1,
        "pain": 1,
        "evolutiondarwin": 1,
        "proposed": 1,
        "species": 6,
        "can": 1,
        "come": 1,
        "existing": 1,
        "share": 1,
        "ancestor": 1,
        "five": 1,
        "theories": 1,
        "combined": 1,
        "descent": 1,
        "gradualism": 1,
        "multiplication": 1,
        "selection": 1,
        "based": 2,
        "gradually": 1,
        "hypothesis": 1,
        "scientifically": 1,
        "accepted": 1,
        "explanation": 1,
        "incontrovertible": 1,
        "fact": 2,
        "forms": 1,
        "changed": 1,
        "years": 1,
        "basic": 2,
        "confirmed": 1,
        "completely": 1,
        "modern": 2,
        "biologists": 1,
        "consider": 1,
        "simply": 1,
        "geneticsgregor": 1,
        "work": 2,
        "pea": 1,
        "plants": 1,
        "discovered": 2,
        "fundamental": 1,
        "laws": 3,
        "inheritance": 4,
        "mendel\u0027s": 3,
        "postulates": 1,
        "principles": 4,
        "paired": 1,
        "factors": 1,
        "principle": 1,
        "dominance": 1,
        "segregation": 1,
        "purity": 1,
        "gametes": 1,
        "independent": 2,
        "assortment": 1,
        "second": 2,
        "industrial": 11,
        "revolutionthe": 1,
        "transition": 1,
        "creating": 1,
        "goods": 1,
        "hand": 2,
        "using": 2,
        "machines": 2,
        "start": 1,
        "end": 1,
        "widely": 1,
        "debated": 1,
        "generally": 1,
        "spanned": 1,
        "process": 1,
        "agrarian": 1,
        "handicraft": 1,
        "economy": 1,
        "dominated": 1,
        "industry": 1,
        "it": 3,
        "brought": 2,
        "sweeping": 2,
        "changes": 3,
        "economic": 3,
        "social": 7,
        "organization": 2,
        "invention": 1,
        "do": 1,
        "tools": 1,
        "steam": 2,
        "later": 3,
        "kinds": 1,
        "power": 1,
        "adoption": 1,
        "factory": 1,
        "system": 1,
        "periods": 1,
        "significancefirst": 1,
        "coal": 1,
        "gas": 1,
        "third": 1,
        "electronics": 2,
        "nuclear": 1,
        "fourth": 2,
        "internet": 1,
        "renewable": 1,
        "energy": 1,
        "britain": 1,
        "architectural": 1,
        "innovations": 1,
        "british": 1,
        "origin": 1,
        "impacts": 1,
        "wider": 1,
        "distribution": 1,
        "wealth": 1,
        "increased": 1,
        "international": 1,
        "trademanagerial": 1,
        "hierarchies": 1,
        "oversee": 1,
        "division": 1,
        "laborinventors": 1,
        "revolutionspinning": 1,
        "weaving": 1,
        "engine": 2,
        "harnessing": 1,
        "electricity": 2,
        "telegraph": 1,
        "telephone": 1,
        "internal": 1,
        "combustion": 1,
        "automobile": 1,
        "contributions": 1,
        "michael": 1,
        "frs": 4,
        "english": 2,
        "scientist": 3,
        "electromagnetism": 1,
        "electrochemistry": 1,
        "underlying": 1,
        "electromagnetic": 2,
        "induction": 1,
        "diamagnetism": 1,
        "electrolysisjames": 1,
        "clerk": 1,
        "frse": 1,
        "scottish": 1,
        "responsible": 1,
        "radiation": 1,
        "describe": 1,
        "magnetism": 1,
        "light": 1,
        "different": 2,
        "manifestations": 1,
        "same": 1,
        "phenomenonlouis": 1,
        "chemist": 2,
        "microbiologist": 1,
        "renowned": 1,
        "vaccination": 1,
        "microbial": 1,
        "fermentation": 1,
        "pasteurization": 1,
        "latter": 1,
        "named": 2,
        "himjohn": 1,
        "physicist": 1,
        "meteorologist": 1,
        "best": 1,
        "introducing": 1,
        "atomic": 1,
        "colour": 2,
        "blindness": 2,
        "daltonism": 1,
        "several": 1,
        "languages": 1,
        "him": 2,
        "sciencescientific": 1,
        "allows": 2,
        "us": 1,
        "develop": 1,
        "technologies": 2,
        "solve": 1,
        "make": 2,
        "informed": 2,
        "decisions": 1,
        "dramatically": 1,
        "changing": 1,
        "media": 1,
        "environment": 1,
        "challenging": 1,
        "climates": 1,
        "shifting": 1,
        "relationships": 1,
        "citizens": 1,
        "policy": 1,
        "makers": 1,
        "evolving": 1,
        "understanding": 2,
        "democracy": 1,
        "stands": 2,
        "ready": 1,
        "tool": 1,
        "help": 1,
        "combat": 1,
        "difficultiesemerging": 1,
        "drones": 1,
        "robotics": 1,
        "vertical": 1,
        "farming": 1,
        "biometrics": 1,
        "g": 2,
        "artificial": 2,
        "uterus": 1,
        "airless": 1,
        "tyres": 1,
        "green": 1,
        "bullet": 1,
        "memory": 1,
        "erassure": 1,
        "molecular": 1,
        "sciencecovers": 1,
        "present": 1,
        "studies": 1,
        "emergence": 1,
        "systematic": 4,
        "branches": 2,
        "formalnatural": 1,
        "cosmological": 1,
        "geological": 1,
        "physical": 2,
        "chemical": 1,
        "biological": 1,
        "behavior": 1,
        "cultural": 1,
        "aspectsformal": 1,
        "formal": 1,
        "systems": 1,
        "logic": 2,
        "priori": 5,
        "opposed": 1,
        "methodology": 2,
        "a": 5,
        "earlier": 2,
        "posteriori": 3,
        "earliest": 1,
        "root": 1,
        "traced": 1,
        "mesopotamia": 1,
        "bce": 1,
        "vs": 1,
        "posterioria": 1,
        "latin": 2,
        "phrases": 1,
        "used": 1,
        "distinguish": 1,
        "types": 1,
        "justification": 1,
        "argument": 1,
        "reliance": 1,
        "current": 1,
        "part": 1,
        "examples": 2,
        "[i]": 1,
        "tautologies": 1,
        "deduction": 1,
        "pure": 1,
        "depends": 1,
        "fields": 1,
        "aspects": 1,
        "personal": 1,
        "who": 1,
        "term": 2,
        "postdates": 1,
        "than": 1,
        "two": 1,
        "millennia": 1,
        "greece": 1,
        "pioneered": 1,
        "techniques": 1,
        "demonstrationaristotle": 1,
        "further": 1,
        "anaximander": 1,
        "anaximenes": 1,
        "ionian": 1,
        "philosophers": 1,
        "investigate": 1,
        "whewell": 1,
        "coined": 1,
        "what": 4,
        "nature": 2,
        "then": 1,
        "followed": 1,
        "usewho": 1,
        "\u201Chistory": 1,
        "science\u201D": 1,
        "f": 1,
        "cojori": 1,
        "suggested": 1,
        "atoms": 1,
        "agreed": 1,
        "started": 1,
        "them": 1,
        "oldest": 1,
        "scienceswhy": 1,
        "mother": 2,
        "very": 1,
        "scope": 1,
        "structure": 2,
        "subject": 1,
        "values": 1,
        "earnestly": 1,
        "pursued": 1,
        "incorporates": 1,
        "activity": 2,
        "is": 1,
        "sciencefat": 1,
        "text": 1,
        "bookswhite": 1,
        "laboratory": 1,
        "coatsmicroscopescomplex": 1,
        "numbers": 1,
        "calculationsgadgetstelescopesfield": 1,
        "tripsexperimentscomputers": 1,
        "\u2026\u2026\u2026\u2026": 1,
        "mean": 1,
        "to": 2,
        "you": 3,
        "before": 1,
        "scientia": 1,
        "meaning": 1,
        "pursuit": 1,
        "application": 2,
        "evidenceis": 1,
        "enterprise": 1,
        "builds": 1,
        "organizes": 1,
        "testable": 1,
        "explanations": 2,
        "predictions": 1,
        "universebody": 1,
        "comprising": 1,
        "measurable": 1,
        "verifiable": 1,
        "facts": 1,
        "acquired": 1,
        "method": 2,
        "generalized": 1,
        "intellectual": 1,
        "encompassing": 1,
        "behaviour": 1,
        "experiment": 1,
        "person": 1,
        "possess": 1,
        "highest": 1,
        "degree": 1,
        "certainty": 1,
        "possible": 2,
        "reliable": 1,
        "justified": 1,
        "true": 1,
        "belief": 1,
        "naturecan": 1,
        "attempt": 1,
        "your": 1,
        "own": 1,
        "definitions": 1,
        "sentences": 1,
        "gives": 1,
        "ability": 1,
        "discover": 1,
        "ways": 1,
        "operate": 2,
        "why": 1,
        "outcome": 1,
        "would": 1,
        "finding": 1,
        "cures": 1,
        "deadly": 1,
        "diseases": 1,
        "enabling": 1,
        "beings": 1,
        "walk": 1,
        "moon\u2019s": 1,
        "surface": 1,
        "behind": 1,
        "yoga": 1,
        "helping": 1,
        "instructors": 1,
        "understand": 2,
        "muscles": 1,
        "working": 1,
        "corresponds": 1,
        "negative": 1,
        "positive": 1,
        "emotions": 1,
        "brain": 1,
        "goals": 1,
        "of": 1,
        "scienceexplore": 1,
        "worldexplain": 1,
        "events": 1,
        "useful": 1,
        "predictionsare": 1,
        "unpredictable": 1,
        "satisfy": 1,
        "needs": 1,
        "improve": 1,
        "living": 1,
        "standards\u2026\u2026\u2026": 1
      }
    },
    "1": {
      "id": 1,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L0 CSS322-Introduction.pptx",
      "content": "CSC322: A MODERN PROGRAMMING LANGUAGEDr. Victor T. OdumuyiwaMr. Sola EdagbamiGeneral INFORMATIONInstructorDr. Victor Odumuyiwa, Room 112 (Computer Science building),vodumuyiwa@unilag.edu.ng,Office hours: Tuesday 2-3pmMr. Sola EdagbamiTAs: \u00A0Lecture: Monday 9:00 -11:00 (NITDA IT Hub)Recitation/Lab: Wednesday 14:00-16:00 (E303/Lab203)ExpectationsYour attendance in the lectures and recitations is very important. I expect that every student should be in class at most 5 minutes after the start time. Late coming causes distractions so your punctuality will be highly appreciated. You are expected to attend classes with your laptops but they should remain closed until activity time.In your prospective\u201CA contemporary programming language should be taught in as much detail as available\u201DCourse descriptionToday\u2019s world is driven by software and definitely the future will be as well. Designing and developing good and efficient software to solve problems and enhance productivity cannot be overemphasized. This course is designed to expose you to software construction and some best practices that will turn you to good developers. The main focus is on Object Oriented Design (OOD) and its implementation using an Object Oriented Programming (OOP) language like C#. Students will be introduced to the .NET framework and a modern software development environment specifically Visual Studio. Concepts like abstraction, inheritance, polymorphism, classes, objects, mutability, and exceptions will be taught. Ability to memorize definitions or facts will be of no help in this course but ability to conceptualize solutions to problem will be of great help.Learning outcomesAt the end of this course, students should be able to:Write applications that are safe from bugs, easy to understand and ready for changeDesign software systems using OODDevelop software using .NET framework and C#Evaluate software program according to OO principlesCreate Abstract Data Types for extensible software developmentCOURSE CONTENTIntroduction to .NET Framework and Visual Studio.NET EnvironmentC# Syntax Types SpecificationsDefensive programmingTest-first programmingGenericsCollectionsAbstract Data typeInheritanceDelegates \u2013 Lambda LINQGraphical User InterfaceSchedule\u00A0Week/Date\u00A0Lecture\u00A0Readings\u00A0PSets\u00A0Lecturer1Introduction, .Net FrameworkChapt. 1Dr Odumuyiwa2Basic Coding/C# SyntaxChapt. 2Mr. Edagbami3TypesChapt. 3Mr. Edagbami4Specification\u00A0Dr Odumuyiwa5Defensive Programming and Exceptions\u00A0Dr Odumuyiwa6Test First Programming\u00A0Dr Odumuyiwa7GenericChapt. 4Bank App project (Individual)Mr. EdagbamiSchedule\u00A0Week/Date\u00A0Lecture\u00A0Readings\u00A0PSets\u00A0Lecturer8CollectionsChapt. 5Project(Group, 3 in a group)Dr Odumuyiwa9ADT\u00A0Dr Odumuyiwa10InheritanceChapt. 6Mr. Edagbami11Delegate-LambdaChapt. 9Dr Odumuyiwa12LINQChapt. 10Dr Odumuyiwa13Graphical User InterfaceMr. EdagbamiRECOMMENDED TEXTSlan Griffiths. Program C# 5.0Kurt Normark. Object-oriented Programming in C# for C and Java programmersErich Gamma, Richard Helm, Ralph E. Johnson, John Vlissides - Design Patterns: Elements of Reusable Object-Oriented SoftwarePeter Coad and Edward Yourdon. Object Oriented DesignMcConnell, Steve.\u00A0Code complete. Pearson Education, 2004.Grading POLICY (1/2)Your grade in this course will be based on your performance in the problem sets (assignments), the individual project, the group project and the final examination. The overall grade is determined as follows:10% Problem setsProblem sets will be released progressively during the semester. Any act of copying or plagiarism will be penalized (zero mark). The problem sets are to be solved independently. You may collaborate with other students on your problem sets to come up with implementation ideas but the codes you are submitting must have be written by you and should be unique.10% Individual projectTowards the middle of the semester, you will be given individual project topics which you are expected to spend about two weeks working on.  Copying code or solutions from the Internet or any source whatsoever is not allowed. Any violation will be penalized (zero mark).Grading POLICY (2/2)20% Group projectGroup project afford you the opportunity to collaborate in designing and developing software. Every group member should participate extensively in the group activity. You will have to present your project before the whole class. You will be expected to respond to questions from the instructor, the TAs and your fellow students. Grading will be based on the overall performance of the group and on the individual performance in the group. This means that it is not mandatory that everybody in a group get the same grade in the project.60% ExaminationThe final examination will come up at the end of the semester. It is meant to evaluate your knowledge of the course. You will be tested on your ability to design solutions to problems using OOD.",
      "keywords": {
        "csc": 1,
        "a": 1,
        "modern": 2,
        "programming": 6,
        "languagedr": 1,
        "victor": 2,
        "t": 1,
        "odumuyiwamr": 1,
        "sola": 2,
        "edagbamigeneral": 1,
        "informationinstructordr": 1,
        "odumuyiwa": 9,
        "room": 1,
        "computer": 1,
        "science": 1,
        "building": 1,
        "vodumuyiwa": 1,
        "unilag": 1,
        "edu": 1,
        "ng": 1,
        "office": 1,
        "hours": 1,
        "tuesday": 1,
        "pmmr": 1,
        "edagbamitas": 1,
        "lecture": 3,
        "monday": 1,
        "nitda": 1,
        "it": 2,
        "hub": 1,
        "recitation": 1,
        "lab": 2,
        "wednesday": 1,
        "e": 2,
        "expectationsyour": 1,
        "attendance": 1,
        "lectures": 1,
        "recitations": 1,
        "very": 1,
        "important": 1,
        "i": 1,
        "expect": 1,
        "every": 2,
        "student": 1,
        "should": 6,
        "class": 2,
        "most": 1,
        "minutes": 1,
        "start": 1,
        "time": 2,
        "late": 1,
        "coming": 1,
        "causes": 1,
        "distractions": 1,
        "your": 10,
        "punctuality": 1,
        "will": 17,
        "highly": 1,
        "appreciated": 1,
        "you": 12,
        "expected": 3,
        "attend": 1,
        "classes": 2,
        "laptops": 1,
        "they": 1,
        "remain": 1,
        "closed": 1,
        "activity": 2,
        "in": 1,
        "prospective\u201Ca": 1,
        "contemporary": 1,
        "language": 2,
        "taught": 2,
        "much": 1,
        "detail": 1,
        "available\u201Dcourse": 1,
        "descriptiontoday\u2019s": 1,
        "world": 1,
        "driven": 1,
        "software": 9,
        "definitely": 1,
        "future": 1,
        "well": 1,
        "designing": 2,
        "developing": 2,
        "good": 2,
        "efficient": 1,
        "solve": 1,
        "problems": 2,
        "enhance": 1,
        "productivity": 1,
        "cannot": 1,
        "overemphasized": 1,
        "this": 2,
        "course": 5,
        "designed": 1,
        "expose": 1,
        "construction": 1,
        "some": 1,
        "best": 1,
        "practices": 1,
        "turn": 1,
        "developers": 1,
        "the": 3,
        "main": 1,
        "focus": 1,
        "object": 5,
        "oriented": 5,
        "design": 3,
        "ood": 2,
        "its": 1,
        "implementation": 2,
        "using": 4,
        "oop": 1,
        "like": 2,
        "c": 6,
        "students": 4,
        "introduced": 1,
        "net": 5,
        "framework": 3,
        "development": 1,
        "environment": 1,
        "specifically": 1,
        "visual": 2,
        "studio": 2,
        "concepts": 1,
        "abstraction": 1,
        "inheritance": 1,
        "polymorphism": 1,
        "objects": 1,
        "mutability": 1,
        "exceptions": 2,
        "ability": 3,
        "memorize": 1,
        "definitions": 1,
        "facts": 1,
        "no": 1,
        "help": 2,
        "conceptualize": 1,
        "solutions": 3,
        "problem": 5,
        "great": 1,
        "learning": 1,
        "outcomesat": 1,
        "end": 2,
        "able": 1,
        "write": 1,
        "applications": 1,
        "safe": 1,
        "bugs": 1,
        "easy": 1,
        "understand": 1,
        "ready": 1,
        "changedesign": 1,
        "systems": 1,
        "ooddevelop": 1,
        "evaluate": 2,
        "program": 2,
        "according": 1,
        "oo": 1,
        "principlescreate": 1,
        "abstract": 1,
        "data": 2,
        "types": 2,
        "extensible": 1,
        "developmentcourse": 1,
        "contentintroduction": 1,
        "environmentc": 1,
        "syntax": 1,
        "specificationsdefensive": 1,
        "programmingtest": 1,
        "first": 2,
        "programminggenericscollectionsabstract": 1,
        "typeinheritancedelegates": 1,
        "\u2013": 1,
        "lambda": 1,
        "linqgraphical": 1,
        "user": 2,
        "interfaceschedule": 1,
        "week": 2,
        "date": 2,
        "readings": 2,
        "psets": 2,
        "lecturer": 2,
        "introduction": 1,
        "frameworkchapt": 1,
        "dr": 8,
        "basic": 1,
        "coding": 1,
        "syntaxchapt": 1,
        "mr": 4,
        "edagbami": 3,
        "typeschapt": 1,
        "specification": 1,
        "defensive": 1,
        "test": 1,
        "genericchapt": 1,
        "bank": 1,
        "app": 1,
        "project": 8,
        "individual": 5,
        "edagbamischedule": 1,
        "collectionschapt": 1,
        "group": 9,
        "adt": 1,
        "inheritancechapt": 1,
        "delegate": 1,
        "lambdachapt": 1,
        "linqchapt": 1,
        "graphical": 1,
        "interfacemr": 1,
        "edagbamirecommended": 1,
        "textslan": 1,
        "griffiths": 1,
        "kurt": 1,
        "normark": 1,
        "java": 1,
        "programmerserich": 1,
        "gamma": 1,
        "richard": 1,
        "helm": 1,
        "ralph": 1,
        "johnson": 1,
        "john": 1,
        "vlissides": 1,
        "patterns": 1,
        "elements": 1,
        "reusable": 1,
        "softwarepeter": 1,
        "coad": 1,
        "edward": 1,
        "yourdon": 1,
        "designmcconnell": 1,
        "steve": 1,
        "code": 2,
        "complete": 1,
        "pearson": 1,
        "education": 1,
        "grading": 3,
        "policy": 2,
        "grade": 3,
        "based": 2,
        "performance": 3,
        "sets": 4,
        "assignments": 1,
        "final": 2,
        "examination": 2,
        "overall": 2,
        "determined": 1,
        "follows": 1,
        "setsproblem": 1,
        "released": 1,
        "progressively": 1,
        "semester": 3,
        "any": 3,
        "act": 1,
        "copying": 2,
        "plagiarism": 1,
        "penalized": 2,
        "zero": 2,
        "mark": 2,
        "solved": 1,
        "independently": 1,
        "may": 1,
        "collaborate": 2,
        "other": 1,
        "come": 2,
        "up": 2,
        "ideas": 1,
        "codes": 1,
        "submitting": 1,
        "must": 1,
        "written": 1,
        "unique": 1,
        "projecttowards": 1,
        "middle": 1,
        "given": 1,
        "topics": 1,
        "spend": 1,
        "two": 1,
        "weeks": 1,
        "working": 1,
        "internet": 1,
        "source": 1,
        "whatsoever": 1,
        "allowed": 1,
        "violation": 1,
        "projectgroup": 1,
        "afford": 1,
        "opportunity": 1,
        "member": 1,
        "participate": 1,
        "extensively": 1,
        "present": 1,
        "whole": 1,
        "respond": 1,
        "questions": 1,
        "instructor": 1,
        "tas": 1,
        "fellow": 1,
        "means": 1,
        "mandatory": 1,
        "everybody": 1,
        "get": 1,
        "same": 1,
        "examinationthe": 1,
        "meant": 1,
        "knowledge": 1,
        "tested": 1
      }
    },
    "2": {
      "id": 2,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L1-dotNETFramework.pptx",
      "content": "Rajeswari IndupuriIntroduction to .NET Framework.NET \u2013 What Is It?Software platformLanguage neutralIn other words:   .NET is not a language (Runtime and a library for writing and executing written programs in any compliant language)What Is .NET.Net is a new framework for developing web-based and windows-based applications within the Microsoft environment.The framework offers a fundamental shift in Microsoft strategy: it moves application development from client-centric to server-centric..NET \u2013 What Is It?Operating System \u002B Hardware.NET Framework.NET ApplicationBase Class LibraryCommon Language SpecificationCommon Language RuntimeADO.NET: Data and XMLVBVC\u002B\u002BVC#Visual Studio.NETASP.NET: Web Servicesand Web FormsJScript\u2026WindowsFormsFramework, Languages, And ToolsThe .NET Framework.NET Framework ServicesCommon Language RuntimeWindows\u00AE FormsASP.NETWeb FormsWeb ServicesADO.NET, evolution of ADOVisual Studio.NETCommon Language Runtime (CLR)CLR works like a virtual machine in executing all languages.  All .NET languages must obey the rules and standards imposed by CLR. Examples:Object declaration, creation and useData types,language librariesError and exception handlingInteractive Development Environment (IDE)Common Language RuntimeDevelopmentMixed language applicationsCommon Language Specification (CLS)Common Type System (CTS)Standard class frameworkAutomatic memory managementConsistent error handling and safer executionPotentially multi-platformDeployment\tRemoval of registration dependencySafety \u2013 fewer versioning problemsCommon Language RuntimeMultiple Language SupportCTS is a rich type system built into the CLRImplements various types (int, double, etc)And operations on those typesCLS is a set of specifications that language and library designers need to followThis will ensure interoperability between languagesCompilation in .NETCode in VB.NETCode in C#Code in another .NET LanguageVB.NET compilerC# compilerAppropriateCompilerIL(IntermediateLanguage) codeCLR just-in-timeexecutionIntermediate Language (IL).NET languages are not compiled to machine code.  They are compiled to an Intermediate Language (IL).CLR accepts the IL code and recompiles it to machine code.  The recompilation is just-in-time (JIT) meaning it is done as soon as a function or subroutine is called.The JIT code stays in memory for subsequent calls.  In cases where there is not enough memory it is discarded thus making JIT process interpretive.LanguagesLanguages provided by MSVB, C\u002B\u002B, C#, J#, JScriptThird-parties are buildingAPL, COBOL, Pascal, Eiffel, Haskell, ML, Oberon, Perl, Python, Scheme, Smalltalk\u2026Windows FormsFramework for Building Rich ClientsRAD (Rapid Application Development)Rich set of controlsData awareActiveX\u00AE SupportLicensingAccessibilityPrinting supportUnicode supportUI inheritanceASP.NETASP.NET - the platform services that allow to program Web Applications and Web Services in any .NET languageASP.NET uses .NET languages to generate HTML pages. HTML page is targeted to the capabilities of the requesting BrowserASP.NET \u201CProgram\u201D is compiled into a .NET class and cached the first time it is called.  All subsequent calls use the cached version.ASP.NETLogical Evolution of ASPSupports multiple languagesImproved performanceControl-based, event-driven execution modelMore productiveCleanly encapsulated functionalityASP.NET Web FormsAllows clean cut codeCode-behind Web FormsEasier for tools to generateCode within is compiled then executed Improved handling of state informationSupport for ASP.NET server controlsData validationData bound gridsASP.NET Web ServicesA technical definition\u201CA programmable application component accessible via standard Web protocols\u201DWeb ServicesIt is just an application\u2026\u2026that exposes its features and capabilities over the network\u2026\u2026using XML\u2026\u2026to allow for the creation of powerful new applications that are more than the sum of their parts\u2026ADO.NET(Data and XML)New objects (e.g., DataSets)Separates connected / disconnected\u00A0issuesLanguage neutral data accessUses same types as CLRGreat support for XMLVisual Studio.NETDevelopment tool that contains a rich set of productivity and debugging features.NET \u2013 Hierarchy, Another ViewCLRCLRSummaryThe .NET FrameworkDramatically simplifies development and deploymentProvides robust and secure execution environmentSupports multiple programming languagesComparison between J2EE and .NETComparison between J2EE and .NET ArchitecturesJ2EE and .NETExecution EngineJ2EE\t\tJava source code compiles into machine-independent byte code\t\tRuntime Environment : JVM.NET\t\tAny compliant language compiles into MSIL\t\tRuntime environment : CLR     Both JVM and CLR ,support services, such as code verification, memory management via garbage collection, and code securityJ2EE and .NETCross Platform PortabilityJ2EE\t\tPlatform Independent \t\tJDK should exist on target machine.NET\t\tSupports Windows platform\t\tCLR should exist on target machine \t\tCan support other platforms provided it has its own JIT \tcomplier     J2EE and .NETLanguage SupportJ2EE\t\tTied to Java \t\tSupports other languages via interface technology.NET\t\tLanguage independent\t\tSupports any language if mapping  exists from that\t       language  to ILJ2EE and .NETTools SupportJ2EE\t\tCan employ any number of tools\t\tPro    :Developer has a great deal of choice\t\tCon   :Difficulty in choosing a right tool for a given job.NET\t\tVisual Studio.NET, single IDE for building an application",
      "keywords": {
        "rajeswari": 1,
        "indupuriintroduction": 1,
        "net": 35,
        "framework": 6,
        "\u2013": 4,
        "what": 3,
        "is": 3,
        "it": 2,
        "software": 1,
        "platformlanguage": 1,
        "neutralin": 1,
        "other": 3,
        "words": 1,
        "language": 19,
        "runtime": 4,
        "library": 2,
        "writing": 1,
        "executing": 2,
        "written": 1,
        "programs": 1,
        "any": 5,
        "compliant": 2,
        "new": 3,
        "developing": 1,
        "web": 9,
        "based": 3,
        "windows": 2,
        "applications": 3,
        "within": 2,
        "microsoft": 2,
        "environment": 4,
        "the": 3,
        "offers": 1,
        "fundamental": 1,
        "shift": 1,
        "strategy": 1,
        "moves": 1,
        "application": 4,
        "development": 4,
        "client": 1,
        "centric": 2,
        "server": 2,
        "operating": 1,
        "system": 3,
        "hardware": 1,
        "applicationbase": 1,
        "class": 3,
        "librarycommon": 1,
        "specificationcommon": 1,
        "runtimeado": 1,
        "data": 3,
        "xmlvbvc": 1,
        "vc": 1,
        "visual": 2,
        "studio": 4,
        "netasp": 2,
        "servicesand": 1,
        "formsjscript\u2026windowsformsframework": 1,
        "languages": 6,
        "and": 2,
        "toolsthe": 1,
        "servicescommon": 1,
        "runtimewindows\u00AE": 1,
        "formsasp": 1,
        "netweb": 1,
        "formsweb": 1,
        "servicesado": 1,
        "evolution": 2,
        "adovisual": 1,
        "netcommon": 1,
        "clr": 7,
        "works": 1,
        "like": 1,
        "virtual": 1,
        "machine": 6,
        "all": 3,
        "must": 1,
        "obey": 1,
        "rules": 1,
        "standards": 1,
        "imposed": 1,
        "examples": 1,
        "object": 1,
        "declaration": 1,
        "creation": 2,
        "usedata": 1,
        "types": 3,
        "librarieserror": 1,
        "exception": 1,
        "handlinginteractive": 1,
        "ide": 2,
        "common": 2,
        "runtimedevelopmentmixed": 1,
        "applicationscommon": 1,
        "specification": 1,
        "cls": 1,
        "type": 2,
        "cts": 1,
        "standard": 2,
        "frameworkautomatic": 1,
        "memory": 4,
        "managementconsistent": 1,
        "error": 1,
        "handling": 2,
        "safer": 1,
        "executionpotentially": 1,
        "multi": 1,
        "platformdeployment": 1,
        "removal": 1,
        "registration": 1,
        "dependencysafety": 1,
        "fewer": 1,
        "versioning": 1,
        "problemscommon": 1,
        "runtimemultiple": 1,
        "supportcts": 1,
        "rich": 4,
        "built": 1,
        "clrimplements": 1,
        "various": 1,
        "int": 1,
        "double": 1,
        "etc": 1,
        "operations": 1,
        "typescls": 1,
        "set": 3,
        "specifications": 1,
        "designers": 1,
        "need": 1,
        "followthis": 1,
        "will": 1,
        "ensure": 1,
        "interoperability": 1,
        "languagescompilation": 1,
        "netcode": 2,
        "vb": 1,
        "c": 3,
        "code": 9,
        "another": 2,
        "languagevb": 1,
        "compilerc": 1,
        "compilerappropriatecompileril": 1,
        "intermediatelanguage": 1,
        "codeclr": 1,
        "just": 3,
        "timeexecutionintermediate": 1,
        "il": 3,
        "compiled": 4,
        "they": 1,
        "intermediate": 1,
        "accepts": 1,
        "recompiles": 1,
        "recompilation": 1,
        "time": 2,
        "jit": 4,
        "meaning": 1,
        "done": 1,
        "soon": 1,
        "function": 1,
        "subroutine": 1,
        "called": 2,
        "stays": 1,
        "subsequent": 2,
        "calls": 2,
        "in": 1,
        "cases": 1,
        "there": 1,
        "enough": 1,
        "discarded": 1,
        "thus": 1,
        "making": 1,
        "process": 1,
        "interpretive": 1,
        "languageslanguages": 1,
        "provided": 2,
        "msvb": 1,
        "j": 4,
        "jscriptthird": 1,
        "parties": 1,
        "buildingapl": 1,
        "cobol": 1,
        "pascal": 1,
        "eiffel": 1,
        "haskell": 1,
        "ml": 1,
        "oberon": 1,
        "perl": 1,
        "python": 1,
        "scheme": 1,
        "smalltalk\u2026windows": 1,
        "formsframework": 1,
        "building": 2,
        "clientsrad": 1,
        "rapid": 1,
        "controlsdata": 2,
        "awareactivex\u00AE": 1,
        "supportlicensingaccessibilityprinting": 1,
        "supportunicode": 1,
        "supportui": 1,
        "inheritanceasp": 1,
        "platform": 4,
        "services": 3,
        "allow": 2,
        "program": 1,
        "languageasp": 1,
        "uses": 1,
        "generate": 1,
        "html": 2,
        "pages": 1,
        "page": 1,
        "targeted": 1,
        "capabilities": 2,
        "requesting": 1,
        "browserasp": 1,
        "\u201Cprogram\u201D": 1,
        "cached": 2,
        "first": 1,
        "use": 1,
        "version": 1,
        "asp": 2,
        "netlogical": 1,
        "aspsupports": 1,
        "multiple": 2,
        "languagesimproved": 1,
        "performancecontrol": 1,
        "event": 1,
        "driven": 1,
        "execution": 2,
        "modelmore": 1,
        "productivecleanly": 1,
        "encapsulated": 1,
        "functionalityasp": 1,
        "formsallows": 1,
        "clean": 1,
        "cut": 1,
        "codecode": 1,
        "behind": 1,
        "formseasier": 1,
        "tools": 2,
        "generatecode": 1,
        "then": 1,
        "executed": 1,
        "improved": 1,
        "state": 1,
        "informationsupport": 1,
        "validationdata": 1,
        "bound": 1,
        "gridsasp": 1,
        "servicesa": 1,
        "technical": 1,
        "definition\u201Ca": 1,
        "programmable": 1,
        "component": 1,
        "accessible": 1,
        "via": 3,
        "protocols\u201Dweb": 1,
        "servicesit": 1,
        "application\u2026\u2026that": 1,
        "exposes": 1,
        "its": 2,
        "features": 2,
        "network\u2026\u2026using": 1,
        "xml\u2026\u2026to": 1,
        "powerful": 1,
        "more": 1,
        "than": 1,
        "sum": 1,
        "their": 1,
        "parts\u2026ado": 1,
        "xml": 1,
        "objects": 1,
        "e": 1,
        "g": 1,
        "datasets": 1,
        "separates": 1,
        "connected": 1,
        "disconnected": 1,
        "issueslanguage": 1,
        "neutral": 1,
        "accessuses": 1,
        "same": 1,
        "clrgreat": 1,
        "support": 3,
        "xmlvisual": 1,
        "netdevelopment": 1,
        "tool": 2,
        "contains": 1,
        "productivity": 1,
        "debugging": 1,
        "hierarchy": 1,
        "viewclrclrsummarythe": 1,
        "frameworkdramatically": 1,
        "simplifies": 1,
        "deploymentprovides": 1,
        "robust": 1,
        "secure": 1,
        "environmentsupports": 1,
        "programming": 1,
        "languagescomparison": 1,
        "ee": 10,
        "netcomparison": 1,
        "architecturesj": 1,
        "netexecution": 1,
        "enginej": 1,
        "java": 2,
        "source": 1,
        "compiles": 2,
        "independent": 3,
        "byte": 1,
        "jvm": 2,
        "msil": 1,
        "both": 1,
        "such": 1,
        "verification": 1,
        "management": 1,
        "garbage": 1,
        "collection": 1,
        "securityj": 1,
        "netcross": 1,
        "portabilityj": 1,
        "jdk": 1,
        "should": 2,
        "exist": 2,
        "target": 2,
        "supports": 3,
        "can": 2,
        "platforms": 1,
        "own": 1,
        "complier": 1,
        "netlanguage": 1,
        "supportj": 2,
        "tied": 1,
        "interface": 1,
        "technology": 1,
        "mapping": 1,
        "exists": 1,
        "ilj": 1,
        "nettools": 1,
        "employ": 1,
        "number": 1,
        "pro": 1,
        "developer": 1,
        "great": 1,
        "deal": 1,
        "choice": 1,
        "con": 1,
        "difficulty": 1,
        "choosing": 1,
        "right": 1,
        "given": 1,
        "job": 1,
        "single": 1
      }
    },
    "3": {
      "id": 3,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L2-C#-syntax.pptx",
      "content": "CSC322Lecture 2 \u2013 Basic C# Syntax1Dr. Victor OdumuyiwaLearning outcomesAt the end of this lecture, you should be able to:Demonstrate a good understanding of C# syntaxWrite simple programs in C#2Main class (Program.cs)using System.Text;using System.Threading.Tasks;namespace Lesson1{    class Program    {        static void Main(string[] args)        {        }    }}3Statically vs. dynamically typed languagesC# is a statically typed language, which is to say that any element of code that represents or produces information, such as a variable or an expression, has its data type determined at compile time. Different from dynamically typed languages, such as JavaScript, in which types are determined at runtime.4Variable declaration (1/2)Each variable must be preceded by its typeString name = \u201Cvictor\u201D;int  age = 22;After declaration, no need to specify type while using the variablename = \u201CJules\u201D;age = 14;5Variable declaration (2/2)Multiple declarations in a lineint a=4, b=5, c=6;Keyword \u201Cvar\u201D could be used to automatically determine the typevar name = \u201Cvictor\u201D;var num = 5;name = 6;  num = \u201CMike\u201D;6Scope(1/4)A variable\u2019s scope is the range of code in which you can refer to that variable by its name.Local variables are not the only things with scope. Methods, properties, types, and, in fact, anything with a name all have scope. Scope is the region in which you can refer to the entity by its name7Scope(2/4)A local variable\u2019s scope starts at its declaration, and finishes at the end of its containing block. A block is a region of code delimited by a pair of braces { }. A method body is a block, so a variable defined in one method is not visible in another method, because it is out of scope.8Scope(3/4)public int setCount()        {            int count =5;            return count;        }9public int getCount()        {            count = count\u002B5;            return count;        }Scope(4/4)In a nested block, everything that is in scope in the outer block continues to be in scope inside that nested block. If you declare a variable in a nested block, its scope does not extend outside of that block.10Scope Exampleint n = 5;            if (n \u003E 3)            {                int ans = 3;                n--;                if (n \u003C= 2)                {                    ans = 2;                }                Console.WriteLine(ans);                Console.WriteLine(n);            }11Declaration SpaceA declaration space is a region of code in which a single name must not refer to two different entities. Each method defines a declaration space for variables. Nested blocks also introduce declaration spaces, and it is illegal for a nested declaration space to declare a variable with the same name as one in its parent\u2019s declaration space.Declaration space rules intent is that it shouldn\u2019t matter where you put the declaration. If you were to move all of the variable declarations in a block to the start, this shouldn\u2019t change what the code means.12Scope vs. Declaration Spaceint n = 5;            if (n \u003E 3)            {                int ans = 3;                n--;                if (n \u003C= 2)                {                    ans = 2;                }                Console.WriteLine(ans);                Console.WriteLine(n);            }int n = 5;            if (n \u003E 3)            {                int ans = 3;                n--;                if (n \u003C= 2)                {                    ans = 2;                }                int n = 7;                Console.WriteLine(ans);                Console.WriteLine(n);             }13Statement and ExpressionsC# specification distinguishes between 14 different categories of statementFocus here will be on:Declaration statementExpression statementIteration statementSelection statementWhat is the difference between expression and expression statement ?14Expression statementsAn expression is a sequence of operators and operands.You can use the following kind of expressions as statements:Method invocationAssignmentIncrementDecrement New object declaration2\u002B3 is a valid expression but not an expression statement so the compiler will complain when you write 2\u002B3; as a line of code.15Camel and Pascal NotationCamel notation Each word in the identifier is put together without spaces, but with the first letter of each word capitalized looking like the humps of a camelmyCamelNotationIdentifierPascal NotationPascal notation is like camel notation except that the initial letter is uppercaseMyPascalNotationIdentifierFor  variables and parameters/arguments we normally use \u201CCamel notation\u201D.For classes, methods and properties, we normally use \u201CPascal notation\u201D.16Preprocessing Directives (1/2)Before your code is compiled, another program called the preprocessor runs and prepares your program for the compiler.The preprocessor examines your code for special preprocessor directives, all of which begin with the pound sign (#).These directives allow you to define identifiers and then test for their existence.Examples#define,  #if , #endif, #error, #warning, #line, #pragma#region and #endregion17Preprocessing Directives (2/2)18ConstantsA constant is an object whose values can not be changed. Literals e.g. 10, 23, 45Symbolic Const type identifier = value;  //architecture(syntax)Const int BoilingPoint = 100;Enumerations\t[attributes] [modifiers] enum identifier\t[:base-type] {enumerator-list}19Intrinsic typesNumeric typesInteger typesFloating-point typesBooleanStrings and CharactersObject20Integer types21Floating-point type22C# also recognizes a third floating-point type called Decimal (System.Decimal in the CLR) which is 128 bit value.In-class activityNumeric conversionint i = 42;double di = i;Console.WriteLine(i / 5);Console.WriteLine(di / 5);Console.WriteLine(i / 5.0);23Checked context (1/2)CheckedC# defines the checked keyword which you can put in front of either a statement or an expression, making it a checked contest.This means that certain arithmetic operations, including casts, are checked for range overflow at runtime.If you cast a value to an integer type in a checked context, and the value is too high or low to fit, an error will occur\u2014the code will throw a System.OverflowException.Checked contexts will also detect range overflows in ordinary arithmetic24Checked context (2/2)UncheckedC# also defines the unchecked keyword which can be used inside a checked block to indicate that a particular expression or nested block should not be a checked contextYou can configure the C# compiler to put everything into a checked context by default, so that only explicitly unchecked expressions and statements will be able to overflow silently.25Checked context - exampleint result = checked( a \u002B b ) \u002B c;26Checked{  int r1 = a \u002B b;  int r2 = r1 \u2013 (int) c;}Arithmetic OperatorsOperatorDescriptionExample\u002BAdditioni\u002B5-SubtractionJ-10*Multiplicationi*8/Divisiona/3%Modulus (division remainder)i%6\u002B\u002Bincrement\u002B\u002Bi--Decrement--iAssignment OperatorsOperatorExampleEquivalent to=i=5i = 5\u002B=j\u002B=4j = j\u002B4\u002B=a \u002B= \u2018string\u2019a = a \u002B \u2018string\u2019-=j-=4j = j -4*=b*=2b = b*2/=c/=5c = c/5%=d%=6d = d % 6Comparison OperatorsOperatorDescriptionExample==Is equal toI == 5!=Is not equal to J !=10\u003EIs greater thani\u003E0\u003CIs less thani\u003C6\u003E=Is greater than or equal toJ\u003E=15\u003C=Is less than or equal toJ \u003C=20Logical OperatorsOperatorDescriptionExample\u0026\u0026Anda==4 \u0026\u0026 b==5||Ora\u003C5||a\u003E0!Not !(a==b)Binary integer operators31Ternary operator (Conditional operator)Conditional-expression ? expression1 :  expression2int value1 = 5;int value2 = 10;int maxValue = value2 \u003E value1 ? Value2 : value132Control structureSequentialFlows from beginning to the endSelectionSingle selectionDouble selectionMultiple selectionRepetitionFixed repetitionPretest repetitionPosttest repetition33In-class activities1. Implement factorial using iteration2. Implement factorial using recursion3.  Implement a score grader4. Implement a GPA calculator34",
      "keywords": {
        "csc": 1,
        "lecture": 2,
        "\u2013": 2,
        "basic": 1,
        "c": 9,
        "syntax": 2,
        "dr": 1,
        "victor": 1,
        "odumuyiwalearning": 1,
        "outcomesat": 1,
        "end": 2,
        "you": 11,
        "should": 2,
        "able": 2,
        "demonstrate": 1,
        "good": 1,
        "understanding": 1,
        "syntaxwrite": 1,
        "simple": 1,
        "programs": 1,
        "main": 2,
        "class": 4,
        "program": 4,
        "cs": 1,
        "using": 4,
        "system": 4,
        "text;using": 1,
        "threading": 1,
        "tasks;namespace": 1,
        "lesson": 1,
        "{": 12,
        "static": 1,
        "void": 1,
        "string[]": 1,
        "args": 1,
        "}": 8,
        "}}": 1,
        "statically": 2,
        "vs": 2,
        "dynamically": 2,
        "typed": 3,
        "languagesc": 1,
        "language": 1,
        "say": 1,
        "any": 1,
        "element": 1,
        "code": 9,
        "represents": 1,
        "produces": 1,
        "information": 1,
        "such": 2,
        "variable": 9,
        "expression": 12,
        "its": 8,
        "data": 1,
        "type": 6,
        "determined": 2,
        "compile": 1,
        "time": 1,
        "different": 3,
        "languages": 1,
        "javascript": 1,
        "types": 3,
        "runtime": 2,
        "declaration": 15,
        "each": 4,
        "must": 2,
        "preceded": 1,
        "typestring": 1,
        "name": 7,
        "\u201Cvictor\u201D;int": 1,
        "age": 1,
        ";after": 1,
        "no": 1,
        "need": 1,
        "specify": 1,
        "variablename": 1,
        "\u201Cjules\u201D;age": 1,
        ";": 25,
        "multiple": 1,
        "declarations": 2,
        "lineint": 1,
        "b": 7,
        ";keyword": 1,
        "\u201Cvar\u201D": 1,
        "could": 1,
        "used": 2,
        "automatically": 1,
        "determine": 1,
        "typevar": 1,
        "\u201Cvictor\u201D;var": 1,
        "num": 2,
        ";name": 1,
        "\u201Cmike\u201D;": 1,
        "scope": 14,
        "a": 4,
        "variable\u2019s": 2,
        "range": 3,
        "can": 7,
        "refer": 3,
        "local": 2,
        "variables": 3,
        "only": 2,
        "things": 1,
        "methods": 2,
        "properties": 2,
        "fact": 1,
        "anything": 1,
        "all": 3,
        "region": 4,
        "entity": 1,
        "starts": 1,
        "finishes": 1,
        "containing": 1,
        "block": 11,
        "delimited": 1,
        "pair": 1,
        "braces": 1,
        "method": 5,
        "body": 1,
        "defined": 1,
        "one": 2,
        "visible": 1,
        "another": 2,
        "out": 1,
        "public": 2,
        "int": 12,
        "setcount": 1,
        "count": 3,
        "return": 2,
        "count;": 2,
        "getcount": 1,
        "}scope": 1,
        "in": 3,
        "nested": 6,
        "everything": 2,
        "outer": 1,
        "continues": 1,
        "inside": 2,
        "if": 3,
        "declare": 2,
        "does": 1,
        "extend": 1,
        "outside": 1,
        "exampleint": 2,
        "n": 16,
        "ans": 9,
        "console": 6,
        "writeline": 9,
        "spacea": 1,
        "space": 5,
        "single": 1,
        "two": 1,
        "entities": 1,
        "defines": 3,
        "blocks": 1,
        "also": 4,
        "introduce": 1,
        "spaces": 2,
        "illegal": 1,
        "same": 1,
        "parent\u2019s": 1,
        "rules": 1,
        "intent": 1,
        "shouldn\u2019t": 2,
        "matter": 1,
        "put": 4,
        "move": 1,
        "start": 1,
        "change": 1,
        "means": 2,
        "spaceint": 1,
        "}int": 1,
        "statement": 4,
        "expressionsc": 1,
        "specification": 1,
        "distinguishes": 1,
        "categories": 1,
        "statementfocus": 1,
        "here": 1,
        "will": 6,
        "statementexpression": 1,
        "statementiteration": 1,
        "statementselection": 1,
        "statementwhat": 1,
        "difference": 1,
        "statementsan": 1,
        "sequence": 1,
        "operators": 2,
        "operands": 1,
        "use": 3,
        "following": 1,
        "kind": 1,
        "expressions": 2,
        "statements": 2,
        "invocationassignmentincrementdecrement": 1,
        "new": 1,
        "object": 2,
        "valid": 1,
        "compiler": 3,
        "complain": 1,
        "write": 1,
        "line": 2,
        "camel": 2,
        "pascal": 1,
        "notationcamel": 1,
        "notation": 3,
        "word": 2,
        "identifier": 3,
        "together": 1,
        "without": 1,
        "first": 1,
        "letter": 2,
        "capitalized": 1,
        "looking": 1,
        "like": 2,
        "humps": 1,
        "camelmycamelnotationidentifierpascal": 1,
        "notationpascal": 1,
        "except": 1,
        "initial": 1,
        "uppercasemypascalnotationidentifierfor": 1,
        "parameters": 1,
        "arguments": 1,
        "we": 2,
        "normally": 2,
        "\u201Ccamel": 1,
        "notation\u201D": 2,
        "for": 1,
        "classes": 1,
        "\u201Cpascal": 1,
        "preprocessing": 2,
        "directives": 4,
        "before": 1,
        "your": 3,
        "compiled": 1,
        "called": 2,
        "preprocessor": 3,
        "runs": 1,
        "prepares": 1,
        "the": 1,
        "examines": 1,
        "special": 1,
        "begin": 1,
        "pound": 1,
        "sign": 1,
        "these": 1,
        "allow": 1,
        "define": 2,
        "identifiers": 1,
        "then": 1,
        "test": 1,
        "their": 1,
        "existence": 1,
        "examples": 1,
        "endif": 1,
        "error": 2,
        "warning": 1,
        "pragma": 1,
        "endregion": 1,
        "constantsa": 1,
        "constant": 1,
        "values": 1,
        "changed": 1,
        "literals": 1,
        "e": 1,
        "g": 1,
        "symbolic": 1,
        "const": 2,
        "value;": 1,
        "architecture": 1,
        "boilingpoint": 1,
        ";enumerations": 1,
        "[attributes]": 1,
        "[modifiers]": 1,
        "enum": 1,
        "[": 1,
        "base": 1,
        "type]": 1,
        "{enumerator": 1,
        "list}": 1,
        "intrinsic": 1,
        "typesnumeric": 1,
        "typesinteger": 1,
        "typesfloating": 1,
        "point": 3,
        "typesbooleanstrings": 1,
        "charactersobject": 1,
        "integer": 3,
        "floating": 2,
        "recognizes": 1,
        "third": 1,
        "decimal": 2,
        "clr": 1,
        "bit": 1,
        "value": 9,
        "activitynumeric": 1,
        "conversionint": 1,
        "i": 7,
        ";double": 1,
        "di": 2,
        "i;console": 1,
        ";console": 2,
        "checked": 12,
        "context": 5,
        "checkedc": 1,
        "keyword": 2,
        "front": 1,
        "making": 1,
        "contest": 1,
        "this": 1,
        "certain": 1,
        "arithmetic": 2,
        "operations": 1,
        "including": 1,
        "casts": 1,
        "overflow": 2,
        "cast": 1,
        "too": 1,
        "high": 1,
        "low": 1,
        "fit": 1,
        "occur\u2014the": 1,
        "throw": 1,
        "overflowexception": 1,
        "contexts": 1,
        "detect": 1,
        "overflows": 1,
        "ordinary": 1,
        "uncheckedc": 1,
        "unchecked": 2,
        "indicate": 1,
        "particular": 1,
        "contextyou": 1,
        "configure": 1,
        "default": 1,
        "explicitly": 1,
        "silently": 1,
        "result": 1,
        "c;": 1,
        "checked{": 1,
        "r": 3,
        "b;": 1,
        "c;}arithmetic": 1,
        "operatorsoperatordescriptionexample": 3,
        "additioni": 1,
        "subtractionj": 1,
        "multiplicationi": 1,
        "divisiona": 1,
        "modulus": 1,
        "division": 1,
        "remainder": 1,
        "increment": 1,
        "decrement": 1,
        "iassignment": 1,
        "operatorsoperatorexampleequivalent": 1,
        "j": 7,
        "\u2018string\u2019a": 1,
        "\u2018string\u2019": 1,
        "d": 3,
        "comparison": 1,
        "is": 6,
        "equal": 4,
        "toi": 1,
        "greater": 2,
        "thani": 2,
        "less": 2,
        "than": 2,
        "toj": 2,
        "logical": 1,
        "anda": 1,
        "ora": 1,
        "not": 1,
        "binary": 1,
        "ternary": 1,
        "operator": 2,
        "conditional": 2,
        ";int": 2,
        "maxvalue": 1,
        "control": 1,
        "structuresequentialflows": 1,
        "beginning": 1,
        "endselectionsingle": 1,
        "selectiondouble": 1,
        "selectionmultiple": 1,
        "selectionrepetitionfixed": 1,
        "repetitionpretest": 1,
        "repetitionposttest": 1,
        "repetition": 1,
        "activities": 1,
        "implement": 4,
        "factorial": 2,
        "iteration": 1,
        "recursion": 1,
        "score": 1,
        "grader": 1,
        "gpa": 1,
        "calculator": 1
      }
    },
    "4": {
      "id": 4,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L4 CSC322 Lesson 4 - Specification.pdf",
      "content": "CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 4\nDr. Victor Odumuyiwa\n1",
      "keywords": {
        "csc": 18,
        "lecture": 18,
        "note": 18,
        "dr": 18,
        "victor": 18,
        "odumuyiwa": 18
      }
    },
    "5": {
      "id": 5,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L5 CSC322 Lesson 5 - Defensive Programming and Exceptions.pdf",
      "content": "CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 5\nDr. Victor Odumuyiwa\n1",
      "keywords": {
        "csc": 33,
        "lecture": 33,
        "note": 33,
        "dr": 33,
        "victor": 33,
        "odumuyiwa": 33
      }
    },
    "6": {
      "id": 6,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\L6-Test-first programming.pdf",
      "content": "CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1CSC322\nLecture Note 6: Test First \nProgramming\nDr. Victor Odumuyiwa\n1",
      "keywords": {
        "csc": 15,
        "lecture": 15,
        "note": 15,
        "test": 15,
        "first": 15,
        "programming": 15,
        "dr": 15,
        "victor": 15,
        "odumuyiwa": 15
      }
    },
    "7": {
      "id": 7,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\Microsoft.VisualStudio.TestPlatform.TestFramework.xml",
      "content": "\u003C?xml version=\u00221.0\u0022?\u003E\u003Cdoc\u003E\u003Cassembly\u003E\u003Cname\u003EMicrosoft.VisualStudio.TestPlatform.TestFramework\u003C/name\u003E\u003C/assembly\u003E\u003Cmembers\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert\u0022\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions within\r\n            unit tests. If the condition being tested is not met, an exception\r\n            is thrown.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are equal and throws an exception\r\n            if the two values are not equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first value to compare. This is the value the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual\u0060\u00601(\u0060\u00600,\u0060\u00600,System.Collections.Generic.IEqualityComparer{\u0060\u00600},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified values are unequal and throws an exception\r\n            if the two values are equal. Different numeric types are treated\r\n            as unequal even if the logical values are equal. 42L is not equal to 42.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first value to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second value to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The \u003Csee cref=\u0022T:System.Collections.Generic.IEqualityComparer\u00601\u0022 /\u003E implementation to use when comparing keys,\r\n            or null to use the default \u003Csee cref=\u0022T:System.Collections.Generic.EqualityComparer\u00601\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first float to compare. This is the float the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first float to compare. This is the float the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first float to compare. This is the float the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first float to compare. This is the float the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first float to compare. This is the float the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified floats are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first float to compare. This is the float the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second float to compare. This is the float produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified decimals are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first decimal to compare. This is the decimal the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second decimal to compare. This is the decimal produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first long to compare. This is the long the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first long to compare. This is the long the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first long to compare. This is the long the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first long to compare. This is the long the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first long to compare. This is the long the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified longs are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first long to compare. This is the long the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second long to compare. This is the long produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first double to compare. This is the double the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first double to compare. This is the double the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first double to compare. This is the double the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022expected\u0022 /\u003E\r\n            by more than \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is different than \u003Cparamref name=\u0022expected\u0022 /\u003E by more than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first double to compare. This is the double the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first double to compare. This is the double the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified doubles are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first double to compare. This is the double the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second double to compare. This is the double produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022delta\u0022\u003E\r\n            The required accuracy. An exception will be thrown only if\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E is different than \u003Cparamref name=\u0022notExpected\u0022 /\u003E\r\n            by at most \u003Cparamref name=\u0022delta\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E or different by less than\r\n            \u003Cparamref name=\u0022delta\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are equal and throws an exception\r\n            if they are not equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first string to compare. This is the string the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal. The invariant culture is used for the comparison.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified strings are unequal and throws an exception\r\n            if they are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first string to compare. This is the string the test expects not to\r\n            match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second string to compare. This is the string produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022ignoreCase\u0022\u003E\r\n            A Boolean indicating a case-sensitive or insensitive comparison. (true\r\n            indicates a case-insensitive comparison.)\r\n            \u003C/param\u003E\u003Cparam name=\u0022culture\u0022\u003E\r\n            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame\u0060\u00601(\u0060\u00600,\u0060\u00600)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects both refer to the same object and\r\n            throws an exception if the two inputs do not refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first object to compare. This is the value the test expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E does not refer to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects both refer to the same object and\r\n            throws an exception if the two inputs do not refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first object to compare. This is the value the test expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not the same as \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E does not refer to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects both refer to the same object and\r\n            throws an exception if the two inputs do not refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first object to compare. This is the value the test expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not the same as \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E does not refer to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame\u0060\u00601(\u0060\u00600,\u0060\u00600)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects refer to different objects and\r\n            throws an exception if the two inputs refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first object to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E refers to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects refer to different objects and\r\n            throws an exception if the two inputs refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first object to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is the same as \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E refers to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame\u0060\u00601(\u0060\u00600,\u0060\u00600,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified objects refer to different objects and\r\n            throws an exception if the two inputs refer to the same object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            The type of values to compare.\r\n            \u003C/typeparam\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first object to compare. This is the value the test expects not\r\n            to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second object to compare. This is the value produced by the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is the same as \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E refers to the same object\r\n            as \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.That\u0022\u003E\u003Csummary\u003E\r\n            Gets the singleton instance of the Assert functionality.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            Users can use this to plug-in custom assertions through C# extension methods.\r\n            For instance, the signature of a custom assertion provider could be \u0022public static void IsOfType\u0026lt;T\u0026gt;(this Assert assert, object obj)\u0022\r\n            Users could then use a syntax similar to the default assertions which in this case is \u0022Assert.That.IsOfType\u0026lt;Dog\u0026gt;(animal);\u0022\r\n            More documentation is at \u0022https://github.com/Microsoft/testfx/docs/README.md\u0022.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Replaces null characters (\u0027\\0\u0027) with \u0022\\\\0\u0022.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022input\u0022\u003E\r\n            The string to search.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            The converted string with null characters replaced by \u0022\\\\0\u0022.\r\n            \u003C/returns\u003E\u003Cremarks\u003E\r\n            This is only public and still present to preserve compatibility with the V1 framework.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowAssertFailed(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Helper function that creates and throws an AssertionFailedException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022assertionName\u0022\u003E\r\n            name of the assertion throwing an exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The assertion failure message.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.BuildUserMessage(System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Builds the formatted message using the given user format message and parameters.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022format\u0022\u003E\r\n            A composite format string.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An object array that contains zero or more objects to format.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            The formatted string based on format and parameters.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(System.Object,System.String,System.String,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Checks the parameter for valid conditions.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022param\u0022\u003E\r\n            The parameter.\r\n            \u003C/param\u003E\u003Cparam name=\u0022assertionName\u0022\u003E\r\n            The assertion Name.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameterName\u0022\u003E\r\n            parameter name.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            message for the invalid parameter exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            The parameters.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Safely converts an object to a string, handling null values and null characters.\r\n            Null values are converted to \u0022(null)\u0022. Null characters are converted to \u0022\\\\0\u0022.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022input\u0022\u003E\r\n            The object to convert to a string.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            The converted string.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Equals(System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Static equals overloads are used for comparing instances of two types for reference\r\n            equality. This method should \u003Cb\u003Enot\u003C/b\u003E be used for comparison of two instances for\r\n            equality. This object will \u003Cb\u003Ealways\u003C/b\u003E throw with Assert.Fail. Please use\r\n            Assert.AreEqual and associated overloads in your unit tests.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022objA\u0022\u003E Object A. \u003C/param\u003E\u003Cparam name=\u0022objB\u0022\u003E Object B. \u003C/param\u003E\u003Creturns\u003E False, always. \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertFailedException.\r\n            \u003C/summary\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertFailedException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertFailedException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertInconclusiveException.\r\n            \u003C/summary\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertInconclusiveException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Throws an AssertInconclusiveException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022\u003E\r\n            Always thrown.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the expected\r\n            type and throws an exception if the expected type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null or\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E is not in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType\u0060\u00601(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the generic\r\n            type and throws an exception if the generic type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the expected\r\n            type and throws an exception if the expected type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is not an instance of \u003Cparamref name=\u0022expectedType\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null or\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E is not in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType\u0060\u00601(System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the generic\r\n            type and throws an exception if the generic type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the expected\r\n            type and throws an exception if the expected type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is not an instance of \u003Cparamref name=\u0022expectedType\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null or\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E is not in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType\u0060\u00601(System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is an instance of the generic\r\n            type and throws an exception if the generic type is not in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe expected type of \u003Cparamref name=\u0022value\u0022 /\u003E.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022wrongType\u0022\u003E\r\n            The type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null and\r\n            \u003Cparamref name=\u0022wrongType\u0022 /\u003E is in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType\u0060\u00601(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong generic\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022wrongType\u0022\u003E\r\n            The type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is an instance of \u003Cparamref name=\u0022wrongType\u0022 /\u003E. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null and\r\n            \u003Cparamref name=\u0022wrongType\u0022 /\u003E is in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType\u0060\u00601(System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong generic\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be of the specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022wrongType\u0022\u003E\r\n            The type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is an instance of \u003Cparamref name=\u0022wrongType\u0022 /\u003E. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null and\r\n            \u003Cparamref name=\u0022wrongType\u0022 /\u003E is in the inheritance hierarchy\r\n            of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType\u0060\u00601(System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is not an instance of the wrong generic\r\n            type and throws an exception if the specified type is in the\r\n            inheritance hierarchy of the object.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022T\u0022\u003EThe type that \u003Cparamref name=\u0022value\u0022 /\u003E should not be.\u003C/typeparam\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is null and throws an exception\r\n            if it is not.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be null.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is null and throws an exception\r\n            if it is not.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is not null. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is null and throws an exception\r\n            if it is not.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects to be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is not null. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is not null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is non-null and throws an exception\r\n            if it is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be null.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is non-null and throws an exception\r\n            if it is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is null. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified object is non-null and throws an exception\r\n            if it is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The object the test expects not to be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            is null. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022value\u0022 /\u003E is null.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is false. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is false. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is false. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is true and throws an exception\r\n            if the condition is false.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be true.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is false. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is false.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is true. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is true. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is true. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified condition is false and throws an exception\r\n            if the condition is true.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022condition\u0022\u003E\r\n            The condition the test expects to be false.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022condition\u0022 /\u003E\r\n            is true. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022condition\u0022 /\u003E is true.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Action)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Action,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Func{System.Object})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Func{System.Object},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Func{System.Object},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throw exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException\u0060\u00601(System.Action,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The exception that was thrown.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync\u0060\u00601(System.Func{System.Threading.Tasks.Task})\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003E\r\n            Delegate to code to be tested and which is expected to throw exception.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003E\r\n            Type of exception expected to be thrown.\r\n            \u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The \u003Csee cref=\u0022T:System.Threading.Tasks.Task\u0022 /\u003E executing the delegate.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync\u0060\u00601(System.Func{System.Threading.Tasks.Task},System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003EDelegate to code to be tested and which is expected to throw exception.\u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003EType of exception expected to be thrown.\u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The \u003Csee cref=\u0022T:System.Threading.Tasks.Task\u0022 /\u003E executing the delegate.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync\u0060\u00601(System.Func{System.Threading.Tasks.Task},System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the code specified by delegate \u003Cparamref name=\u0022action\u0022 /\u003E throws exact given exception\r\n            of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E (and not of derived type) and throws \u003Cc\u003EAssertFailedException\u003C/c\u003E\r\n            if code does not throws exception or throws exception of type other than \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022action\u0022\u003EDelegate to code to be tested and which is expected to throw exception.\u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022action\u0022 /\u003E\r\n            does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Ctypeparam name=\u0022T\u0022\u003EType of exception expected to be thrown.\u003C/typeparam\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022action\u0022 /\u003E does not throws exception of type \u003Ctypeparamref name=\u0022T\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003Creturns\u003E\r\n            The \u003Csee cref=\u0022T:System.Threading.Tasks.Task\u0022 /\u003E executing the delegate.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert\u0022\u003E\u003Csummary\u003E\r\n            A collection of helper classes to test various conditions associated\r\n            with collections within unit tests. If the condition being tested is not\r\n            met, an exception is thrown.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.That\u0022\u003E\u003Csummary\u003E\r\n            Gets the singleton instance of the CollectionAssert functionality.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            Users can use this to plug-in custom assertions through C# extension methods.\r\n            For instance, the signature of a custom assertion provider could be \u0022public static void AreEqualUnordered(this CollectionAssert customAssert, ICollection expected, ICollection actual)\u0022\r\n            Users could then use a syntax similar to the default assertions which in this case is \u0022CollectionAssert.That.AreEqualUnordered(list1, list2);\u0022\r\n            More documentation is at \u0022https://github.com/Microsoft/testfx/docs/README.md\u0022.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection contains the specified element\r\n            and throws an exception if the element is not in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected to be in the collection.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E does not contain\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection contains the specified element\r\n            and throws an exception if the element is not in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected to be in the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022element\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022collection\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E does not contain\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection contains the specified element\r\n            and throws an exception if the element is not in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected to be in the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022element\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022collection\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E does not contain\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection does not contain the specified\r\n            element and throws an exception if the element is in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected not to be in the collection.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection does not contain the specified\r\n            element and throws an exception if the element is in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected not to be in the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022element\u0022 /\u003E\r\n            is in \u003Cparamref name=\u0022collection\u0022 /\u003E. The message is shown in test\r\n            results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collection does not contain the specified\r\n            element and throws an exception if the element is in the collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for the element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022element\u0022\u003E\r\n            The element that is expected not to be in the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022element\u0022 /\u003E\r\n            is in \u003Cparamref name=\u0022collection\u0022 /\u003E. The message is shown in test\r\n            results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains\r\n            element \u003Cparamref name=\u0022element\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are non-null and throws\r\n            an exception if any element is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for null elements.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains a null element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are non-null and throws\r\n            an exception if any element is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for null elements.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022collection\u0022 /\u003E\r\n            contains a null element. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains a null element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are non-null and throws\r\n            an exception if any element is null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for null elements.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022collection\u0022 /\u003E\r\n            contains a null element. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains a null element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are unique or not and\r\n            throws if any two elements in the collection are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for duplicate elements.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains at least one duplicate\r\n            element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are unique or not and\r\n            throws if any two elements in the collection are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for duplicate elements.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022collection\u0022 /\u003E\r\n            contains at least one duplicate element. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains at least one duplicate\r\n            element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all items in the specified collection are unique or not and\r\n            throws if any two elements in the collection are equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection in which to search for duplicate elements.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022collection\u0022 /\u003E\r\n            contains at least one duplicate element. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null, or \u003Cparamref name=\u0022collection\u0022 /\u003E contains at least one duplicate\r\n            element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is a subset of another collection and\r\n            throws an exception if any element in the subset is not also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022subset\u0022 /\u003E contains at least one element not contained in\r\n            \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is a subset of another collection and\r\n            throws an exception if any element in the subset is not also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element in\r\n            \u003Cparamref name=\u0022subset\u0022 /\u003E is not found in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022subset\u0022 /\u003E contains at least one element not contained in\r\n            \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is a subset of another collection and\r\n            throws an exception if any element in the subset is not also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element in\r\n            \u003Cparamref name=\u0022subset\u0022 /\u003E is not found in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022subset\u0022 /\u003E contains at least one element not contained in\r\n            \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is not a subset of another collection and\r\n            throws an exception if all elements in the subset are also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected not to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected not to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or all elements of \u003Cparamref name=\u0022subset\u0022 /\u003E are contained in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is not a subset of another collection and\r\n            throws an exception if all elements in the subset are also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected not to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected not to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when every element in\r\n            \u003Cparamref name=\u0022subset\u0022 /\u003E is also found in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or all elements of \u003Cparamref name=\u0022subset\u0022 /\u003E are contained in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether one collection is not a subset of another collection and\r\n            throws an exception if all elements in the subset are also in the\r\n            superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection expected not to be a subset of \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection expected not to be a superset of \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when every element in\r\n            \u003Cparamref name=\u0022subset\u0022 /\u003E is also found in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022subset\u0022 /\u003E is null, or \u003Cparamref name=\u0022superset\u0022 /\u003E is null,\r\n            or all elements of \u003Cparamref name=\u0022subset\u0022 /\u003E are contained in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the same elements and throws an\r\n            exception if either collection contains an element not in the other\r\n            collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if any element was found in one of the collections but not the other.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the same elements and throws an\r\n            exception if either collection contains an element not in the other\r\n            collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element was found\r\n            in one of the collections but not the other. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if any element was found in one of the collections but not the other.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the same elements and throws an\r\n            exception if either collection contains an element not in the other\r\n            collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element was found\r\n            in one of the collections but not the other. The message is shown\r\n            in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if any element was found in one of the collections but not the other.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the different elements and throws an\r\n            exception if the two collections contain identical elements without regard\r\n            to order.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects to be different than the actual collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if collections contain the same elements, including the same number of duplicate\r\n            occurrences of each element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the different elements and throws an\r\n            exception if the two collections contain identical elements without regard\r\n            to order.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects to be different than the actual collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            contains the same elements as \u003Cparamref name=\u0022expected\u0022 /\u003E. The message\r\n            is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if collections contain the same elements, including the same number of duplicate\r\n            occurrences of each element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether two collections contain the different elements and throws an\r\n            exception if the two collections contain identical elements without regard\r\n            to order.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This contains the elements the test\r\n            expects to be different than the actual collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by\r\n            the code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            contains the same elements as \u003Cparamref name=\u0022expected\u0022 /\u003E. The message\r\n            is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022expected\u0022 /\u003E and \u003Cparamref name=\u0022actual\u0022 /\u003E nullabilities don\u0027t match,\r\n            or if collections contain the same elements, including the same number of duplicate\r\n            occurrences of each element.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all elements in the specified collection are instances\r\n            of the expected type and throws an exception if the expected type is\r\n            not in the inheritance hierarchy of one or more of the elements.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection containing elements the test expects to be of the\r\n            specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of each element of \u003Cparamref name=\u0022collection\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null or, \u003Cparamref name=\u0022expectedType\u0022 /\u003E is null,\r\n            or some elements of \u003Cparamref name=\u0022collection\u0022 /\u003E do not inherit/implement\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all elements in the specified collection are instances\r\n            of the expected type and throws an exception if the expected type is\r\n            not in the inheritance hierarchy of one or more of the elements.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection containing elements the test expects to be of the\r\n            specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of each element of \u003Cparamref name=\u0022collection\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element in\r\n            \u003Cparamref name=\u0022collection\u0022 /\u003E is not an instance of\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null or, \u003Cparamref name=\u0022expectedType\u0022 /\u003E is null,\r\n            or some elements of \u003Cparamref name=\u0022collection\u0022 /\u003E do not inherit/implement\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether all elements in the specified collection are instances\r\n            of the expected type and throws an exception if the expected type is\r\n            not in the inheritance hierarchy of one or more of the elements.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection containing elements the test expects to be of the\r\n            specified type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedType\u0022\u003E\r\n            The expected type of each element of \u003Cparamref name=\u0022collection\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when an element in\r\n            \u003Cparamref name=\u0022collection\u0022 /\u003E is not an instance of\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E. The message is shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022collection\u0022 /\u003E is null or, \u003Cparamref name=\u0022expectedType\u0022 /\u003E is null,\r\n            or some elements of \u003Cparamref name=\u0022collection\u0022 /\u003E do not inherit/implement\r\n            \u003Cparamref name=\u0022expectedType\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Whether two elements are the same\r\n            is checked using \u003Csee cref=\u0022M:System.Object.Equals(System.Object,System.Object)\u0022 /\u003E method.\r\n            Different references to the same value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are equal and throws an exception\r\n            if the two collections are not equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is not equal to \u003Cparamref name=\u0022expected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022expected\u0022 /\u003E is not equal to\r\n            \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified collections are unequal and throws an exception\r\n            if the two collections are equal. Equality is defined as having the same\r\n            elements in the same order and quantity. Different references to the same\r\n            value are considered equal.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022notExpected\u0022\u003E\r\n            The first collection to compare. This is the collection the tests expects\r\n            not to match \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare. This is the collection produced by the\r\n            code under test.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparer\u0022\u003E\r\n            The compare implementation to use when comparing elements of the collection.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022actual\u0022 /\u003E\r\n            is equal to \u003Cparamref name=\u0022notExpected\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\r\n            Thrown if \u003Cparamref name=\u0022notExpected\u0022 /\u003E is equal to \u003Cparamref name=\u0022actual\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOfHelper(System.Collections.ICollection,System.Collections.ICollection)\u0022\u003E\u003Csummary\u003E\r\n            Determines whether the first collection is a subset of the second\r\n            collection. If either set contains duplicate elements, the number\r\n            of occurrences of the element in the subset must be less than or\r\n            equal to the number of occurrences in the superset.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022subset\u0022\u003E\r\n            The collection the test expects to be contained in \u003Cparamref name=\u0022superset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022superset\u0022\u003E\r\n            The collection the test expects to contain \u003Cparamref name=\u0022subset\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            True if \u003Cparamref name=\u0022subset\u0022 /\u003E is a subset of\r\n            \u003Cparamref name=\u0022superset\u0022 /\u003E, false otherwise.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.GetElementCounts(System.Collections.ICollection,System.Int32@)\u0022\u003E\u003Csummary\u003E\r\n            Constructs a dictionary containing the number of occurrences of each\r\n            element in the specified collection.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022collection\u0022\u003E\r\n            The collection to process.\r\n            \u003C/param\u003E\u003Cparam name=\u0022nullCount\u0022\u003E\r\n            The number of null elements in the collection.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            A dictionary containing the number of occurrences of each element\r\n            in the specified collection.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.FindMismatchedElement(System.Collections.ICollection,System.Collections.ICollection,System.Int32@,System.Int32@,System.Object@)\u0022\u003E\u003Csummary\u003E\r\n            Finds a mismatched element between the two collections. A mismatched\r\n            element is one that appears a different number of times in the\r\n            expected collection than it does in the actual collection. The\r\n            collections are assumed to be different non-null references with the\r\n            same number of elements. The caller is responsible for this level of\r\n            verification. If there is no mismatched element, the function returns\r\n            false and the out parameters should not be used.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expected\u0022\u003E\r\n            The first collection to compare.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actual\u0022\u003E\r\n            The second collection to compare.\r\n            \u003C/param\u003E\u003Cparam name=\u0022expectedCount\u0022\u003E\r\n            The expected number of occurrences of\r\n            \u003Cparamref name=\u0022mismatchedElement\u0022 /\u003E or 0 if there is no mismatched\r\n            element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022actualCount\u0022\u003E\r\n            The actual number of occurrences of\r\n            \u003Cparamref name=\u0022mismatchedElement\u0022 /\u003E or 0 if there is no mismatched\r\n            element.\r\n            \u003C/param\u003E\u003Cparam name=\u0022mismatchedElement\u0022\u003E\r\n            The mismatched element (may be null) or null if there is no\r\n            mismatched element.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            true if a mismatched element was found; false otherwise.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.ObjectComparer\u0022\u003E\u003Csummary\u003E\r\n            compares the objects using object.Equals.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert\u0022\u003E\u003Csummary\u003E\r\n            The string assert.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.That\u0022\u003E\u003Csummary\u003E\r\n            Gets the singleton instance of the CollectionAssert functionality.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            Users can use this to plug-in custom assertions through C# extension methods.\r\n            For instance, the signature of a custom assertion provider could be \u0022public static void ContainsWords(this StringAssert customAssert, string value, ICollection substrings)\u0022\r\n            Users could then use a syntax similar to the default assertions which in this case is \u0022StringAssert.That.ContainsWords(value, substrings);\u0022\r\n            More documentation is at \u0022https://github.com/Microsoft/testfx/docs/README.md\u0022.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022substring\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022value\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022substring\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022value\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022substring\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022value\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string contains the specified substring\r\n            and throws an exception if the substring does not occur within the\r\n            test string.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to occur within \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022substring\u0022 /\u003E\r\n            is not in \u003Cparamref name=\u0022value\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not contain \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not begin with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not begin with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not begin with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string begins with the specified substring\r\n            and throws an exception if the test string does not start with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to begin with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a prefix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not begin with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not start with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string ends with the specified substring\r\n            and throws an exception if the test string does not end with the\r\n            substring.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022substring\u0022\u003E\r\n            The string expected to be a suffix of \u003Cparamref name=\u0022value\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E. The message is\r\n            shown in test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022comparisonType\u0022\u003E\r\n            The comparison method to compare strings \u003Cparamref name=\u0022comparisonType\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022substring\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not end with \u003Cparamref name=\u0022substring\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string matches a regular expression and\r\n            throws an exception if the string does not match the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to match.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string matches a regular expression and\r\n            throws an exception if the string does not match the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to match.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not match \u003Cparamref name=\u0022pattern\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string matches a regular expression and\r\n            throws an exception if the string does not match the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to match.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            does not match \u003Cparamref name=\u0022pattern\u0022 /\u003E. The message is shown in\r\n            test results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E does not match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string does not match a regular expression\r\n            and throws an exception if the string matches the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected not to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to not match.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E matches \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string does not match a regular expression\r\n            and throws an exception if the string matches the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected not to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to not match.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            matches \u003Cparamref name=\u0022pattern\u0022 /\u003E. The message is shown in test\r\n            results.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E matches \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Tests whether the specified string does not match a regular expression\r\n            and throws an exception if the string matches the expression.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The string that is expected not to match \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cparam name=\u0022pattern\u0022\u003E\r\n            The regular expression that \u003Cparamref name=\u0022value\u0022 /\u003E is\r\n            expected to not match.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message to include in the exception when \u003Cparamref name=\u0022value\u0022 /\u003E\r\n            matches \u003Cparamref name=\u0022pattern\u0022 /\u003E. The message is shown in test\r\n            results.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameters\u0022\u003E\r\n            An array of parameters to use when formatting \u003Cparamref name=\u0022message\u0022 /\u003E.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Cparamref name=\u0022value\u0022 /\u003E is null, or \u003Cparamref name=\u0022pattern\u0022 /\u003E is null,\r\n            or \u003Cparamref name=\u0022value\u0022 /\u003E matches \u003Cparamref name=\u0022pattern\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022\u003E\u003Csummary\u003E\r\n            Attribute to define in-line data for a test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg12\u0022\u003E The twelfth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg12\u0022\u003E The twelfth argument. \u003C/param\u003E\u003Cparam name=\u0022arg13\u0022\u003E The thirteen argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg12\u0022\u003E The twelfth argument. \u003C/param\u003E\u003Cparam name=\u0022arg13\u0022\u003E The thirteen argument. \u003C/param\u003E\u003Cparam name=\u0022arg14\u0022\u003E The fourteenth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg12\u0022\u003E The twelfth argument. \u003C/param\u003E\u003Cparam name=\u0022arg13\u0022\u003E The thirteen argument. \u003C/param\u003E\u003Cparam name=\u0022arg14\u0022\u003E The fourteenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg15\u0022\u003E The fifteenth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute\u0022 /\u003E class which takes in an array of arguments.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arg1\u0022\u003E The first argument. \u003C/param\u003E\u003Cparam name=\u0022arg2\u0022\u003E The second argument. \u003C/param\u003E\u003Cparam name=\u0022arg3\u0022\u003E The third argument. \u003C/param\u003E\u003Cparam name=\u0022arg4\u0022\u003E The fourth argument. \u003C/param\u003E\u003Cparam name=\u0022arg5\u0022\u003E The fifth argument. \u003C/param\u003E\u003Cparam name=\u0022arg6\u0022\u003E The sixth argument. \u003C/param\u003E\u003Cparam name=\u0022arg7\u0022\u003E The seventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg8\u0022\u003E The eight argument. \u003C/param\u003E\u003Cparam name=\u0022arg9\u0022\u003E The nineth argument. \u003C/param\u003E\u003Cparam name=\u0022arg10\u0022\u003E The tenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg11\u0022\u003E The eleventh argument. \u003C/param\u003E\u003Cparam name=\u0022arg12\u0022\u003E The twelfth argument. \u003C/param\u003E\u003Cparam name=\u0022arg13\u0022\u003E The thirteen argument. \u003C/param\u003E\u003Cparam name=\u0022arg14\u0022\u003E The fourteenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg15\u0022\u003E The fifteenth argument. \u003C/param\u003E\u003Cparam name=\u0022arg16\u0022\u003E The sixteenth argument. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.Data\u0022\u003E\u003Csummary\u003E\r\n            Gets data for calling test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.DisplayName\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets display name in test results for customization.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetData(System.Reflection.MethodInfo)\u0022\u003E\u003Cinheritdoc /\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])\u0022\u003E\u003Cinheritdoc /\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specifies connection string, table name and row access method for data driven testing.\r\n            \u003C/summary\u003E\u003Cexample\u003E\r\n            [DataSource(\u0022Provider=SQLOLEDB.1;Data Source=source;Integrated Security=SSPI;Initial Catalog=EqtCoverage;Persist Security Info=False\u0022, \u0022MyTable\u0022)]\r\n            [DataSource(\u0022dataSourceNameFromConfigFile\u0022)].\r\n            \u003C/example\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultProviderName\u0022\u003E\u003Csummary\u003E\r\n            The default provider name for DataSource.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultDataAccessMethod\u0022\u003E\u003Csummary\u003E\r\n            The default data access method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute\u0022 /\u003E class. This instance will be initialized with a data provider, connection string, data table and data access method to access the data source.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022providerInvariantName\u0022\u003EInvariant data provider name, such as System.Data.SqlClient.\u003C/param\u003E\u003Cparam name=\u0022connectionString\u0022\u003E\r\n            Data provider specific connection string.\r\n            WARNING: The connection string can contain sensitive data (for example, a password).\r\n            The connection string is stored in plain text in source code and in the compiled assembly.\r\n            Restrict access to the source code and assembly to protect this sensitive information.\r\n            \u003C/param\u003E\u003Cparam name=\u0022tableName\u0022\u003EThe name of the data table.\u003C/param\u003E\u003Cparam name=\u0022dataAccessMethod\u0022\u003ESpecifies the order to access data.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute\u0022 /\u003E class.This instance will be initialized with a connection string and table name.\r\n            Specify connection string and data table to access OLEDB data source.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022connectionString\u0022\u003E\r\n            Data provider specific connection string.\r\n            WARNING: The connection string can contain sensitive data (for example, a password).\r\n            The connection string is stored in plain text in source code and in the compiled assembly.\r\n            Restrict access to the source code and assembly to protect this sensitive information.\r\n            \u003C/param\u003E\u003Cparam name=\u0022tableName\u0022\u003EThe name of the data table.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute\u0022 /\u003E class.  This instance will be initialized with a data provider and connection string associated with the setting name.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022dataSourceSettingName\u0022\u003EThe name of a data source found in the \u0026lt;microsoft.visualstudio.qualitytools\u0026gt; section in the app.config file.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ProviderInvariantName\u0022\u003E\u003Csummary\u003E\r\n            Gets a value representing the data provider of the data source.\r\n            \u003C/summary\u003E\u003Creturns\u003E\r\n            The data provider name. If a data provider was not designated at object initialization, the default provider of System.Data.OleDb will be returned.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ConnectionString\u0022\u003E\u003Csummary\u003E\r\n            Gets a value representing the connection string for the data source.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.TableName\u0022\u003E\u003Csummary\u003E\r\n            Gets a value indicating the table name providing data.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataAccessMethod\u0022\u003E\u003Csummary\u003E\r\n             Gets the method used to access the data source.\r\n             \u003C/summary\u003E\u003Creturns\u003E\r\n             One of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod\u0022 /\u003E values. If the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute\u0022 /\u003E is not initialized, this will return the default value \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random\u0022 /\u003E.\r\n             \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataSourceSettingName\u0022\u003E\u003Csummary\u003E\r\n            Gets the name of a data source found in the \u0026lt;microsoft.visualstudio.qualitytools\u0026gt; section in the app.config file.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute\u0022\u003E\u003Csummary\u003E\r\n            Attribute for data driven test where data can be specified in-line.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType\u0022\u003E\u003Csummary\u003E\r\n            Enum to specify whether the data is stored as property or in method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Property\u0022\u003E\u003Csummary\u003E\r\n            Data is declared as property.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Method\u0022\u003E\u003Csummary\u003E\r\n            Data is declared in method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute\u0022\u003E\u003Csummary\u003E\r\n            Attribute to define dynamic data for a test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022dynamicDataSourceName\u0022\u003E\r\n            The name of method or property having test data.\r\n            \u003C/param\u003E\u003Cparam name=\u0022dynamicDataSourceType\u0022\u003E\r\n            Specifies whether the data is stored as property or in method.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute\u0022 /\u003E class when the test data is present in a class different\r\n            from test method\u0027s class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022dynamicDataSourceName\u0022\u003E\r\n            The name of method or property having test data.\r\n            \u003C/param\u003E\u003Cparam name=\u0022dynamicDataDeclaringType\u0022\u003E\r\n            The declaring type of property or method having data. Useful in cases when declaring type is present in a class different from\r\n            test method\u0027s class. If null, declaring type defaults to test method\u0027s class type.\r\n            \u003C/param\u003E\u003Cparam name=\u0022dynamicDataSourceType\u0022\u003E\r\n            Specifies whether the data is stored as property or in method.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayName\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the name of method used to customize the display name in test results.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayNameDeclaringType\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the declaring type used to customize the display name in test results.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetData(System.Reflection.MethodInfo)\u0022\u003E\u003Cinheritdoc /\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])\u0022\u003E\u003Cinheritdoc /\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specifies how to discover \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource\u0022 /\u003E tests.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022discoveryOption\u0022\u003E\r\n            The \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption\u0022 /\u003E to use when discovering \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource\u0022 /\u003E tests.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.DiscoveryOption\u0022\u003E\u003Csummary\u003E\r\n            Gets the discovery option.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption\u0022\u003E\u003Csummary\u003E\r\n            The supported discovery modes for \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource\u0022 /\u003E tests.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringExecution\u0022\u003E\u003Csummary\u003E\r\n            Discover tests during execution.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This was the default option until version 2.2.3.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery\u0022\u003E\u003Csummary\u003E\r\n            Discover and expand ITestDataSource based tests.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This is the default behavior after version 2.2.3.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy\u0022\u003E\u003Csummary\u003E\r\n            The supported test ID generation strategies.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.Legacy\u0022\u003E\u003Csummary\u003E\r\n            Uses legacy test ID generation. \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource\u0022 /\u003E tests will not be discovered and instead they will be collapsed into one parent test.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This option is incompatible with \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery\u0022 /\u003E option of \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute\u0022 /\u003E and will be ignored.\r\n            This was the default option until version 2.2.3.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.DisplayName\u0022\u003E\u003Csummary\u003E\r\n            Uses a combination of executor ID, file name, fully qualified name and display name to generate the test ID.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This is the default behavior between versions 2.2.4 and 3.0.0.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.FullyQualified\u0022\u003E\u003Csummary\u003E\r\n            Uses a combination of executor ID, file path, assembly name, method fully qualified name and serialized data (values and their fully qualified type) to generate the test ID.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This is the default behavior starting with version 3.0.0.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specifies how to generate test ID.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022strategy\u0022\u003E\r\n            The \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy\u0022 /\u003E to use when generating the test ID.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.Strategy\u0022\u003E\u003Csummary\u003E\r\n            Gets the test ID generation strategy.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute\u0022\u003E\u003Csummary\u003E\r\n            The assembly cleanup attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022\u003E\u003Csummary\u003E\r\n            The class cleanup attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022inheritanceBehavior\u0022\u003E\r\n            Specifies the ClassCleanup Inheritance Behavior.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022cleanupBehavior\u0022\u003E\r\n            Specifies the class clean-up behavior.\r\n            To capture output of class clean-up method in logs\r\n            \u003Cparamref name=\u0022cleanupBehavior\u0022 /\u003E must be set to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass\u0022 /\u003E.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022inheritanceBehavior\u0022\u003E\r\n            Specifies the ClassCleanup Inheritance Behavior.\r\n            \u003C/param\u003E\u003Cparam name=\u0022cleanupBehavior\u0022\u003E\r\n            Specifies the class clean-up behavior.\r\n            To capture output of class clean-up method in logs\r\n            \u003Cparamref name=\u0022cleanupBehavior\u0022 /\u003E must be set to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass\u0022 /\u003E.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,System.Nullable{Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior})\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022inheritanceBehavior\u0022\u003E\r\n            Specifies the ClassCleanup Inheritance Behavior.\r\n            \u003C/param\u003E\u003Cparam name=\u0022cleanupBehavior\u0022\u003E\r\n            Specifies the class clean-up behavior.\r\n            To capture output of class clean-up method in logs\r\n            \u003Cparamref name=\u0022cleanupBehavior\u0022 /\u003E must be set to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass\u0022 /\u003E.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.InheritanceBehavior\u0022\u003E\u003Csummary\u003E\r\n            Gets the Inheritance Behavior.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.CleanupBehavior\u0022\u003E\u003Csummary\u003E\r\n            Gets when to run class cleanup methods.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior\u0022\u003E\u003Csummary\u003E\r\n            When to run ClassCleanup during test execution.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfAssembly\u0022\u003E\u003Csummary\u003E\r\n            Run at end of assembly.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass\u0022\u003E\u003Csummary\u003E\r\n            Run at end of class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specification for when to run class cleanup methods.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.DefaultClassCleanupLifecycle\u0022\u003E\u003Csummary\u003E\r\n            Default class cleanup execution.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022cleanupBehavior\u0022\u003E\r\n            Specifies the class clean-up behavior.\r\n            To capture output of class clean-up method in logs\r\n            \u003Cparamref name=\u0022cleanupBehavior\u0022 /\u003E must be set to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass\u0022 /\u003E.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.CleanupBehavior\u0022\u003E\u003Csummary\u003E\r\n            Gets when to run class cleanup methods.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute\u0022\u003E\u003Csummary\u003E\r\n            The test cleanup attribute marks methods that are executed after every test marked with a \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute\u0022 /\u003E.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DoNotParallelizeAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specification to disable parallelization.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope\u0022\u003E\u003Csummary\u003E\r\n            Parallel execution mode.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel\u0022\u003E\u003Csummary\u003E\r\n            Each thread of execution will be handed a TestClass worth of tests to execute.\r\n            Within the TestClass, the test methods will execute serially.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel\u0022\u003E\u003Csummary\u003E\r\n            Each thread of execution will be handed TestMethods to execute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior\u0022\u003E\u003Csummary\u003E\r\n            Enumeration for inheritance behavior, that can be used with both the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute\u0022 /\u003E class\r\n            and \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute\u0022 /\u003E class.\r\n            Defines the behavior of the ClassInitialize and ClassCleanup methods of base classes.\r\n            The type of the enumeration must match.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.None\u0022\u003E\u003Csummary\u003E\r\n            None.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.BeforeEachDerivedClass\u0022\u003E\u003Csummary\u003E\r\n            Before each derived class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute\u0022\u003E\u003Csummary\u003E\r\n            The assembly initialize attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute\u0022\u003E\u003Csummary\u003E\r\n            The class initialize attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute\u0022 /\u003E class.\r\n            ClassInitializeAttribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute\u0022 /\u003E class.\r\n            ClassInitializeAttribute.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022inheritanceBehavior\u0022\u003E\r\n            Specifies the ClassInitialize Inheritance Behavior.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.InheritanceBehavior\u0022\u003E\u003Csummary\u003E\r\n            Gets the Inheritance Behavior.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute\u0022\u003E\u003Csummary\u003E\r\n            The presence of this attribute in a test assembly causes MSTest to discover test classes (i.e. classes having\r\n            the \u0022TestClass\u0022 attribute) and test methods (i.e. methods having the \u0022TestMethod\u0022 attribute) which are declared\r\n            internal in addition to test classes and test methods which are declared public. When this attribute is not\r\n            present in a test assembly the tests in such classes will not be discovered.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute\u0022\u003E\u003Csummary\u003E\r\n            The test initialize attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute\u0022\u003E\u003Csummary\u003E\r\n            Specification for parallelization level for a test run.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.DefaultExecutionScope\u0022\u003E\u003Csummary\u003E\r\n            The default scope for the parallel run. Although method level gives maximum parallelization, the default is set to\r\n            class level to enable maximum number of customers to easily convert their tests to run in parallel. In most cases within\r\n            a class tests aren\u0027t thread safe.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Workers\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the number of workers to be used for the parallel run.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Scope\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the scope of the parallel run.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            To enable all classes to run in parallel set this to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel\u0022 /\u003E.\r\n            To get the maximum parallelization level set this to \u003Csee cref=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel\u0022 /\u003E.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute\u0022\u003E\u003Csummary\u003E\r\n            CSS Iteration URI.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute\u0022 /\u003E class for CSS Iteration URI.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022cssIteration\u0022\u003EThe CSS Iteration URI.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration\u0022\u003E\u003Csummary\u003E\r\n            Gets the CSS Iteration URI.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute\u0022\u003E\u003Csummary\u003E\r\n            CSS Project Structure URI.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute\u0022 /\u003E class for CSS Project Structure URI.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022cssProjectStructure\u0022\u003EThe CSS Project Structure URI.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.CssProjectStructure\u0022\u003E\u003Csummary\u003E\r\n            Gets the CSS Project Structure URI.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute\u0022\u003E\u003Csummary\u003E\r\n            Description of the test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute\u0022 /\u003E class to describe a test.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022description\u0022\u003EThe description.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.Description\u0022\u003E\u003Csummary\u003E\r\n            Gets the description of a test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute\u0022\u003E\u003Csummary\u003E\r\n            Attribute that specifies to expect an exception of the specified type.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute\u0022 /\u003E class with the expected type.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022exceptionType\u0022\u003EType of the expected exception.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute\u0022 /\u003E class with\r\n            the expected type and the message to include when no exception is thrown by the test.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022exceptionType\u0022\u003EType of the expected exception.\u003C/param\u003E\u003Cparam name=\u0022noExceptionMessage\u0022\u003E\r\n            Message to include in the test result if the test fails due to not throwing an exception.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType\u0022\u003E\u003Csummary\u003E\r\n            Gets a value indicating the Type of the expected exception.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.AllowDerivedTypes\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets a value indicating whether to allow types derived from the type of the expected exception to\r\n            qualify as expected.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.NoExceptionMessage\u0022\u003E\u003Csummary\u003E\r\n            Gets the message to include in the test result if the test fails due to not throwing an exception.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.Verify(System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Verifies that the type of the exception thrown by the unit test is expected.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022exception\u0022\u003EThe exception thrown by the unit test.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute\u0022\u003E\u003Csummary\u003E\r\n            Base class for attributes that specify to expect an exception from a unit test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute\u0022 /\u003E class with a default no-exception message.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute\u0022 /\u003E class with a no-exception message.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022noExceptionMessage\u0022\u003E\r\n            Message to include in the test result if the test fails due to not throwing an\r\n            exception.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.NoExceptionMessage\u0022\u003E\u003Csummary\u003E\r\n            Gets the message to include in the test result if the test fails due to not throwing an exception.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.SpecifiedNoExceptionMessage\u0022\u003E\u003Csummary\u003E\r\n            Gets the message to include in the test result if the test fails due to not throwing an exception.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.GetDefaultNoExceptionMessage(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Gets the default no-exception message.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022expectedExceptionAttributeTypeName\u0022\u003EThe ExpectedException attribute type name.\u003C/param\u003E\u003Creturns\u003EThe default no-exception message.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.Verify(System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Determines whether the exception is expected. If the method returns, then it is\r\n            understood that the exception was expected. If the method throws an exception, then it\r\n            is understood that the exception was not expected, and the thrown exception\u0027s message\r\n            is included in the test result. The \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert\u0022 /\u003E class can be used for\r\n            convenience. If \u003Csee cref=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive\u0022 /\u003E is used and the assertion fails,\r\n            then the test outcome is set to Inconclusive.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022exception\u0022\u003EThe exception thrown by the unit test.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.RethrowIfAssertException(System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Rethrow the exception if it is an AssertFailedException or an AssertInconclusiveException.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022exception\u0022\u003EThe exception to rethrow if it is an assertion exception.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute\u0022\u003E\u003Csummary\u003E\r\n            The ignore attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            Message specifies reason for ignoring.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.IgnoreMessage\u0022\u003E\u003Csummary\u003E\r\n            Gets the owner.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute\u0022\u003E\u003Csummary\u003E\r\n            Test Owner.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022owner\u0022\u003E\r\n            The owner.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.Owner\u0022\u003E\u003Csummary\u003E\r\n            Gets the owner.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute\u0022\u003E\u003Csummary\u003E\r\n            Priority attribute; used to specify the priority of a unit test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.#ctor(System.Int32)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022priority\u0022\u003E\r\n            The priority.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.Priority\u0022\u003E\u003Csummary\u003E\r\n            Gets the priority.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute\u0022\u003E\u003Csummary\u003E\r\n            TestCategory attribute; used to specify the category of a unit test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute\u0022 /\u003E class and applies the category to the test.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022testCategory\u0022\u003E\r\n            The test Category.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.TestCategories\u0022\u003E\u003Csummary\u003E\r\n            Gets the test categories that has been applied to the test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute\u0022\u003E\u003Csummary\u003E\r\n            Base class for the \u0022Category\u0022 attribute.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            The reason for this attribute is to let the users create their own implementation of test categories.\r\n            - test framework (discovery, etc) deals with TestCategoryBaseAttribute.\r\n            - The reason that TestCategories property is a collection rather than a string,\r\n              is to give more flexibility to the user. For instance the implementation may be based on enums for which the values can be OR\u0027ed\r\n              in which case it makes sense to have single attribute rather than multiple ones on the same test.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute\u0022 /\u003E class.\r\n            Applies the category to the test. The strings returned by TestCategories\r\n            are used with the /category command to filter tests.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.TestCategories\u0022\u003E\u003Csummary\u003E\r\n            Gets the test category that has been applied to the test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute\u0022\u003E\u003Csummary\u003E\r\n            The test class attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.GetTestMethodAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute)\u0022\u003E\u003Csummary\u003E\r\n            Gets a test method attribute that enables running this test.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022testMethodAttribute\u0022\u003EThe test method attribute instance defined on this method.\u003C/param\u003E\u003Creturns\u003EThe \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute\u0022 /\u003E to be used to run this test.\u003C/returns\u003E\u003Cremarks\u003EExtensions can override this method to customize how all methods in a class are run.\u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute\u0022\u003E\u003Csummary\u003E\r\n            The test method attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022displayName\u0022\u003E\r\n            Display name for the test.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.DisplayName\u0022\u003E\u003Csummary\u003E\r\n            Gets display name for the test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.Execute(Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod)\u0022\u003E\u003Csummary\u003E\r\n            Executes a test method.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022testMethod\u0022\u003EThe test method to execute.\u003C/param\u003E\u003Creturns\u003EAn array of TestResult objects that represent the outcome(s) of the test.\u003C/returns\u003E\u003Cremarks\u003EExtensions can override this method to customize running a TestMethod.\u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute\u0022\u003E\u003Csummary\u003E\r\n            The test property attribute.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.#ctor(System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022name\u0022\u003E\r\n            The name.\r\n            \u003C/param\u003E\u003Cparam name=\u0022value\u0022\u003E\r\n            The value.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name\u0022\u003E\u003Csummary\u003E\r\n            Gets the name.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value\u0022\u003E\u003Csummary\u003E\r\n            Gets the value.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult\u0022\u003E\u003Csummary\u003E\r\n            TestResult object to be returned to adapter.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DisplayName\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the display name of the result. Useful when returning multiple results.\r\n            If null then Method name is used as DisplayName.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Outcome\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the outcome of the test execution.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestFailureException\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the exception thrown when test is failed.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogOutput\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the output of the message logged by test code.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogError\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the output of the message logged by test code.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DebugTrace\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the debug traces by test code.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestContextMessages\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the debug traces by test code.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ExecutionId\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the execution id of the result.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ParentExecId\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the parent execution id of the result.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.InnerResultsCount\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the inner results count of the result.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Duration\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the duration of test execution.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DatarowIndex\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the data row index in data source. Set only for results of individual\r\n            run of data row of a data driven test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ReturnValue\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the return value of the test method. (Currently null always).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ResultFiles\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the result files attached by the test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout\u0022\u003E\u003Csummary\u003E\r\n            Enumeration for timeouts, that can be used with the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute\u0022 /\u003E class.\r\n            The type of the enumeration must match.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout.Infinite\u0022\u003E\u003Csummary\u003E\r\n            The infinite.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute\u0022\u003E\u003Csummary\u003E\r\n            Timeout attribute; used to specify the timeout of a unit test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022timeout\u0022\u003E\r\n            The timeout in milliseconds.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute\u0022 /\u003E class with a preset timeout.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022timeout\u0022\u003E\r\n            The timeout.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout\u0022\u003E\u003Csummary\u003E\r\n            Gets the timeout in milliseconds.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute\u0022\u003E\u003Csummary\u003E\r\n            WorkItem attribute; used to specify a work item associated with this test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.#ctor(System.Int32)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute\u0022 /\u003E class for the WorkItem Attribute.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022id\u0022\u003EThe Id to a work item.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.Id\u0022\u003E\u003Csummary\u003E\r\n            Gets the Id to a work item associated.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod\u0022\u003E\u003Csummary\u003E\r\n            Enumeration for how we access data rows in data driven testing.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Sequential\u0022\u003E\u003Csummary\u003E\r\n            Rows are returned in sequential order.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random\u0022\u003E\u003Csummary\u003E\r\n            Rows are returned in random order.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022\u003E\u003Csummary\u003E\r\n            AssertFailedException class. Used to indicate failure for a test case.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003Cparam name=\u0022ex\u0022\u003E The exception. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022\u003E\u003Csummary\u003E\r\n            The assert inconclusive exception.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003Cparam name=\u0022ex\u0022\u003E The exception. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException\u0022\u003E\u003Csummary\u003E\r\n            InternalTestFailureException class. Used to indicate internal failure for a test case.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This class is only added to preserve source compatibility with the V1 framework.\r\n            For all practical purposes either use AssertFailedException/AssertInconclusiveException.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The exception message. \u003C/param\u003E\u003Cparam name=\u0022ex\u0022\u003E The exception. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The exception message. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException\u0022\u003E\u003Csummary\u003E\r\n            Base class for Framework Exceptions.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String,System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003Cparam name=\u0022ex\u0022\u003E The exception. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException\u0022 /\u003E class.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022msg\u0022\u003E The message. \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper\u0022\u003E\u003Csummary\u003E\r\n            This class is designed to help user doing unit testing for types which uses generic types.\r\n            GenericParameterHelper satisfies some common generic type constraints\r\n            such as:\r\n            1. public default constructor\r\n            2. implements common interface: IComparable, IEnumerable.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper\u0022 /\u003E class that\r\n            satisfies the \u0027newable\u0027 constraint in C# generics.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This constructor initializes the Data property to a random value.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)\u0022\u003E\u003Csummary\u003E\r\n            Initializes a new instance of the \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper\u0022 /\u003E class that\r\n            initializes the Data property to a user-supplied value.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022data\u0022\u003EAny integer value.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data\u0022\u003E\u003Csummary\u003E\r\n            Gets or sets the Data.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Do the value comparison for two GenericParameterHelper object.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022obj\u0022\u003Eobject to do comparison with.\u003C/param\u003E\u003Creturns\u003Etrue if obj has the same value as \u0027this\u0027 GenericParameterHelper object.\r\n            false otherwise.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode\u0022\u003E\u003Csummary\u003E\r\n            Returns a hashcode for this object.\r\n            \u003C/summary\u003E\u003Creturns\u003EThe hash code.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)\u0022\u003E\u003Csummary\u003E\r\n            Compares the data of the two \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper\u0022 /\u003E objects.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022obj\u0022\u003EThe object to compare with.\u003C/param\u003E\u003Creturns\u003E\r\n            A signed number indicating the relative values of this instance and value.\r\n            \u003C/returns\u003E\u003Cexception cref=\u0022T:System.NotSupportedException\u0022\u003E\r\n            Thrown when the object passed in is not an instance of \u003Csee cref=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper\u0022 /\u003E.\r\n            \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator\u0022\u003E\u003Csummary\u003E\r\n            Returns an IEnumerator object whose length is derived from\r\n            the Data property.\r\n            \u003C/summary\u003E\u003Creturns\u003EThe IEnumerator object.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone\u0022\u003E\u003Csummary\u003E\r\n            Returns a GenericParameterHelper object that is equal to\r\n            the current object.\r\n            \u003C/summary\u003E\u003Creturns\u003EThe cloned object.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource\u0022\u003E\u003Csummary\u003E\r\n            Test data source for data driven tests.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetData(System.Reflection.MethodInfo)\u0022\u003E\u003Csummary\u003E\r\n            Gets the test data from custom test data source.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022methodInfo\u0022\u003E\r\n            The method info of test method.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            Test data for calling test method.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetDisplayName(System.Reflection.MethodInfo,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Gets the display name corresponding to test data row for displaying in TestResults.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022methodInfo\u0022\u003E\r\n            The method info of test method.\r\n            \u003C/param\u003E\u003Cparam name=\u0022data\u0022\u003E\r\n            The test data which is passed to test method.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            The \u003Csee cref=\u0022T:System.String\u0022 /\u003E.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod\u0022\u003E\u003Csummary\u003E\r\n            TestMethod for execution.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestMethodName\u0022\u003E\u003Csummary\u003E\r\n            Gets the name of test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestClassName\u0022\u003E\u003Csummary\u003E\r\n            Gets the name of test class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ReturnType\u0022\u003E\u003Csummary\u003E\r\n            Gets the return type of test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Arguments\u0022\u003E\u003Csummary\u003E\r\n            Gets the arguments with which test method is invoked.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ParameterTypes\u0022\u003E\u003Csummary\u003E\r\n            Gets the parameters of test method.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.MethodInfo\u0022\u003E\u003Csummary\u003E\r\n            Gets the methodInfo for test method.\r\n            \u003C/summary\u003E\u003Cremarks\u003E\r\n            This is just to retrieve additional information about the method.\r\n            Do not directly invoke the method using MethodInfo. Use ITestMethod.Invoke instead.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Invoke(System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            Invokes the test method.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022arguments\u0022\u003E\r\n            Arguments to pass to test method. (E.g. For data driven).\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            Result of test method invocation.\r\n            \u003C/returns\u003E\u003Cremarks\u003E\r\n            This call handles asynchronous test methods as well.\r\n            \u003C/remarks\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAllAttributes(System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Get all attributes of the test method.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022inherit\u0022\u003E\r\n            Whether attribute defined in parent class is valid.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            All attributes.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAttributes\u0060\u00601(System.Boolean)\u0022\u003E\u003Csummary\u003E\r\n            Get attribute of specific type.\r\n            \u003C/summary\u003E\u003Ctypeparam name=\u0022TAttributeType\u0022\u003E System.Attribute type. \u003C/typeparam\u003E\u003Cparam name=\u0022inherit\u0022\u003E\r\n            Whether attribute defined in parent class is valid.\r\n            \u003C/param\u003E\u003Creturns\u003E\r\n            The attributes of the specified type.\r\n            \u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.DebugEx.Assert(System.Boolean,System.String)\u0022\u003E\u003Cinheritdoc cref=\u0022M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)\u0022 /\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.Helper\u0022\u003E\u003Csummary\u003E\r\n            The helper.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Helper.CheckParameterNotNull(System.Object,System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            The check parameter not null.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022param\u0022\u003E\r\n            The parameter.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameterName\u0022\u003E\r\n            The parameter name.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:System.ArgumentNullException\u0022\u003E Throws argument null exception when parameter is null. \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Helper.CheckParameterNotNullOrEmpty(System.String,System.String,System.String)\u0022\u003E\u003Csummary\u003E\r\n            The check parameter not null or empty.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022param\u0022\u003E\r\n            The parameter.\r\n            \u003C/param\u003E\u003Cparam name=\u0022parameterName\u0022\u003E\r\n            The parameter name.\r\n            \u003C/param\u003E\u003Cparam name=\u0022message\u0022\u003E\r\n            The message.\r\n            \u003C/param\u003E\u003Cexception cref=\u0022T:System.ArgumentException\u0022\u003E Throws ArgumentException when parameter is null. \u003C/exception\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrEmpty(System.String)\u0022\u003E\u003Cinheritdoc cref=\u0022M:System.String.IsNullOrEmpty(System.String)\u0022 /\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrWhiteSpace(System.String)\u0022\u003E\u003Cinheritdoc cref=\u0022M:System.String.IsNullOrWhiteSpace(System.String)\u0022 /\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper\u0022\u003E\u003Csummary\u003E\r\n            Provides helper functionality for the unit test framework.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper.GetExceptionMsg(System.Exception)\u0022\u003E\u003Csummary\u003E\r\n            Gets the exception messages, including the messages for all inner exceptions\r\n            recursively.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022ex\u0022\u003EException to get messages for.\u003C/param\u003E\u003Creturns\u003Estring with error message information.\u003C/returns\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger\u0022\u003E\u003Csummary\u003E\r\n            Enables users to log/write traces from unit tests for diagnostics.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessageHandler\u0022\u003E\u003Csummary\u003E\r\n            Handler for LogMessage.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022message\u0022\u003EMessage to log.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022E:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.OnLogMessage\u0022\u003E\u003Csummary\u003E\r\n            Event to listen. Raised when unit test writer writes some message.\r\n            Mainly to consume by adapter.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessage(System.String,System.Object[])\u0022\u003E\u003Csummary\u003E\r\n            API for test writer to call to Log messages.\r\n            \u003C/summary\u003E\u003Cparam name=\u0022format\u0022\u003EString format with placeholders.\u003C/param\u003E\u003Cparam name=\u0022args\u0022\u003EParameters for placeholders.\u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages\u0022\u003E\u003Csummary\u003E\r\n              A strongly-typed resource class, for looking up localized strings, etc.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ResourceManager\u0022\u003E\u003Csummary\u003E\r\n              Returns the cached ResourceManager instance used by this class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Culture\u0022\u003E\u003Csummary\u003E\r\n              Overrides the current thread\u0027s CurrentUICulture property for all\r\n              resource lookups using this strongly typed resource class.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AccessStringInvalidSyntax\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Access string has invalid syntax..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ActualHasMismatchedElements\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The expected collection contains {1} occurrence(s) of \u0026lt;{2}\u0026gt;. The actual collection contains {3} occurrence(s). {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AllItemsAreUniqueFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Duplicate item found:\u0026lt;{1}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualCaseFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected:\u0026lt;{1}\u0026gt;. Case is different for actual value:\u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDeltaFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected a difference no greater than \u0026lt;{3}\u0026gt; between expected value \u0026lt;{1}\u0026gt; and actual value \u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDifferentTypesFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected:\u0026lt;{1} ({2})\u0026gt;. Actual:\u0026lt;{3} ({4})\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected:\u0026lt;{1}\u0026gt;. Actual:\u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualDeltaFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected a difference greater than \u0026lt;{3}\u0026gt; between expected value \u0026lt;{1}\u0026gt; and actual value \u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Expected any value except:\u0026lt;{1}\u0026gt;. Actual:\u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreSameGivenValues\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ArgumentXMustDeriveFromClassY\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Type \u0027{0}\u0027 is not assignable to \u0027{1}\u0027..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AssertionFailed\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to {0} failed. {1}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AsyncUITestMethodNotSupported\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AsyncUITestMethodWithNoDispatcherQueue\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to UITestMethodAttribute.DispatcherQueue should not be null. To use UITestMethodAttribute within a WinUI Desktop App, remember to set the static UITestMethodAttribute.DispatcherQueue during the test initialization..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsEmpty\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Both collections are empty. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameElements\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Both collection contain same elements..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameReference\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Both collection references point to the same collection object. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothSameElements\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Both collections contain the same elements. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.CollectionEqualReason\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to {0}({1}).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_NullInMessages\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to (null).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_ObjectString\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to (object).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsFail\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to String \u0027{0}\u0027 does not contain string \u0027{1}\u0027. {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DataDrivenResultDisplayName\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to {0} ({1}).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseAssertEquals\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Assert.Equals should not be used for Assertions. Please use Assert.AreEqual \u0026amp; overloads instead..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataDisplayName\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Method {0} must match the expected signature: public static {1} {0}({2})..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableEmpty\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Property or method {0} on {1} returns empty IEnumerable\u0026lt;object[]\u0026gt;..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableNull\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Property or method {0} on {1} does not return IEnumerable\u0026lt;object[]\u0026gt;..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataValueNull\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Value returned by property or method {0} shouldn\u0027t be null..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementNumbersDontMatch\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The number of elements in the collections do not match. Expected:\u0026lt;{1}\u0026gt;. Actual:\u0026lt;{2}\u0026gt;.{0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementsAtIndexDontMatch\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Element at index {0} do not match..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementTypesAtIndexDontMatch\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Element at index {1} is not of expected type. Expected type:\u0026lt;{2}\u0026gt;. Actual type:\u0026lt;{3}\u0026gt;.{0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementTypesAtIndexDontMatch2\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Element at index {1} is (null). Expected type:\u0026lt;{2}\u0026gt;.{0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.EndsWithFail\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to String \u0027{0}\u0027 does not end with string \u0027{1}\u0027. {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.EqualsTesterInvalidArgs\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Invalid argument- EqualsTester can\u0027t use nulls..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ErrorInvalidCast\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Cannot convert object of type {0} to {1}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InternalObjectNotValid\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The internal object referenced is no longer valid..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InvalidParameterToAssert\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The parameter \u0027{0}\u0027 is invalid. {1}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InvalidPropertyType\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The property {0} has type {1}; expected type {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsInstanceOfFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to {0} Expected type:\u0026lt;{1}\u0026gt;. Actual type:\u0026lt;{2}\u0026gt;..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsMatchFail\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to String \u0027{0}\u0027 does not match pattern \u0027{1}\u0027. {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotInstanceOfFailMsg\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Wrong Type:\u0026lt;{1}\u0026gt;. Actual type:\u0026lt;{2}\u0026gt;. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotMatchFail\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to String \u0027{0}\u0027 matches pattern \u0027{1}\u0027. {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NoDataRow\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to No test data source specified. Atleast one TestDataSource is required with DataTestMethodAttribute..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NoExceptionThrown\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to No exception thrown. {1} exception was expected. {0}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NullParameterToAssert\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The parameter \u0027{0}\u0027 is invalid. The value cannot be null. {1}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NumberOfElementsDiff\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Different number of elements..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorConstructorNotFound\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to \r\n                 The constructor with the specified signature could not be found. You might need to regenerate your private accessor,\r\n                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type\r\n                 that defines the member into PrivateObject\u0027s constructor.\r\n               .\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorMemberNotFound\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to \r\n                 The member specified ({0}) could not be found. You might need to regenerate your private accessor,\r\n                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type\r\n                 that defines the member into PrivateObject\u0027s constructor.\r\n               .\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.StartsWithFail\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to String \u0027{0}\u0027 does not start with string \u0027{1}\u0027. {2}..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_ExpectedExceptionTypeMustDeriveFromException\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to The expected exception type must be System.Exception or a type derived from System.Exception..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_FailedToGetExceptionMessage\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to (Failed to get the message for an exception of type {0} due to an exception.).\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoException\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Test method did not throw expected exception {0}. {1}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoExceptionDefault\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method..\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongException\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Test method threw exception {0}, but exception {1} was expected. Exception message: {2}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongExceptionDerivedAllowed\u0022\u003E\u003Csummary\u003E\r\n              Looks up a localized string similar to Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.WrongExceptionThrown\u0022\u003E\u003Csummary\u003E\r\n               Looks up a localized string similar to Threw exception {2}, but exception {1} was expected. {0}\r\n            Exception Message: {3}\r\n            Stack Trace: {4}.\r\n             \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome\u0022\u003E\u003Csummary\u003E\r\n            unit test outcomes.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Failed\u0022\u003E\u003Csummary\u003E\r\n            Test was executed, but there were issues.\r\n            Issues may involve exceptions or failed assertions.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Inconclusive\u0022\u003E\u003Csummary\u003E\r\n            Test has completed, but we can\u0027t say if it passed or failed.\r\n            May be used for aborted tests.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed\u0022\u003E\u003Csummary\u003E\r\n            Test was executed without any issues.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.InProgress\u0022\u003E\u003Csummary\u003E\r\n            Test is currently executing.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Error\u0022\u003E\u003Csummary\u003E\r\n            There was a system error while we were trying to execute a test.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Timeout\u0022\u003E\u003Csummary\u003E\r\n            The test timed out.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Aborted\u0022\u003E\u003Csummary\u003E\r\n            Test was aborted by the user.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Unknown\u0022\u003E\u003Csummary\u003E\r\n            Test is in an unknown state.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.NotRunnable\u0022\u003E\u003Csummary\u003E\r\n            Test cannot be executed.\r\n            \u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.AllowNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that null is allowed as an input even if the corresponding type disallows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that null is disallowed as an input even if the corresponding type allows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that an output may be null even if the corresponding type disallows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.NotNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that an output will not be null even if the corresponding type allows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute\u0022\u003E\u003Csummary\u003ESpecifies that when a method returns \u003Csee cref=\u0022P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue\u0022 /\u003E, the parameter may be null even if the corresponding type disallows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)\u0022\u003E\u003Csummary\u003EInitializes the attribute with the specified return value condition.\u003C/summary\u003E\u003Cparam name=\u0022returnValue\u0022\u003E\r\n            The return value condition. If the method returns this value, the associated parameter may be null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue\u0022\u003E\u003Csummary\u003EGets the return value condition.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute\u0022\u003E\u003Csummary\u003ESpecifies that when a method returns \u003Csee cref=\u0022P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue\u0022 /\u003E, the parameter will not be null even if the corresponding type allows it.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)\u0022\u003E\u003Csummary\u003EInitializes the attribute with the specified return value condition.\u003C/summary\u003E\u003Cparam name=\u0022returnValue\u0022\u003E\r\n            The return value condition. If the method returns this value, the associated parameter will not be null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue\u0022\u003E\u003Csummary\u003EGets the return value condition.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that the output will be non-null if the named parameter is non-null.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003EInitializes the attribute with the associated parameter name.\u003C/summary\u003E\u003Cparam name=\u0022parameterName\u0022\u003E\r\n            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName\u0022\u003E\u003Csummary\u003EGets the associated parameter name.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute\u0022\u003E\u003Csummary\u003EApplied to a method that will never return under any circumstance.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute\u0022\u003E\u003Csummary\u003ESpecifies that the method will not return if the associated Boolean parameter is passed the specified value.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)\u0022\u003E\u003Csummary\u003EInitializes the attribute with the specified parameter value.\u003C/summary\u003E\u003Cparam name=\u0022parameterValue\u0022\u003E\r\n            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to\r\n            the associated parameter matches this value.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue\u0022\u003E\u003Csummary\u003EGets the condition parameter value.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute\u0022\u003E\u003Csummary\u003ESpecifies that the method or property will ensure that the listed field and property members have not-null values.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)\u0022\u003E\u003Csummary\u003EInitializes the attribute with a field or property member.\u003C/summary\u003E\u003Cparam name=\u0022member\u0022\u003E\r\n            The field or property member that is promised to be not-null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])\u0022\u003E\u003Csummary\u003EInitializes the attribute with the list of field and property members.\u003C/summary\u003E\u003Cparam name=\u0022members\u0022\u003E\r\n            The list of field and property members that are promised to be not-null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members\u0022\u003E\u003Csummary\u003EGets field or property member names.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute\u0022\u003E\u003Csummary\u003ESpecifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)\u0022\u003E\u003Csummary\u003EInitializes the attribute with the specified return value condition and a field or property member.\u003C/summary\u003E\u003Cparam name=\u0022returnValue\u0022\u003E\r\n            The return value condition. If the method returns this value, the associated parameter will not be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022member\u0022\u003E\r\n            The field or property member that is promised to be not-null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])\u0022\u003E\u003Csummary\u003EInitializes the attribute with the specified return value condition and list of field and property members.\u003C/summary\u003E\u003Cparam name=\u0022returnValue\u0022\u003E\r\n            The return value condition. If the method returns this value, the associated parameter will not be null.\r\n            \u003C/param\u003E\u003Cparam name=\u0022members\u0022\u003E\r\n            The list of field and property members that are promised to be not-null.\r\n            \u003C/param\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue\u0022\u003E\u003Csummary\u003EGets the return value condition.\u003C/summary\u003E\u003C/member\u003E\u003Cmember name=\u0022P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members\u0022\u003E\u003Csummary\u003EGets field or property member names.\u003C/summary\u003E\u003C/member\u003E\u003C/members\u003E\u003C/doc\u003E",
      "keywords": {
        "xml": 1,
        "version": 5,
        "doc": 2,
        "assembly": 12,
        "name": 2138,
        "microsoft": 739,
        "visualstudio": 739,
        "testplatform": 1,
        "testframework": 1,
        "members": 12,
        "member": 1005,
        "t": 394,
        "testtools": 736,
        "unittesting": 736,
        "assert": 121,
        "summary": 994,
        "a": 34,
        "collection": 237,
        "helper": 16,
        "classes": 16,
        "test": 396,
        "various": 10,
        "conditions": 11,
        "within": 25,
        "unit": 23,
        "tests": 217,
        "if": 31,
        "condition": 92,
        "tested": 19,
        "met": 10,
        "exception": 735,
        "thrown": 162,
        "m": 284,
        "areequal": 33,
        "specified": 199,
        "values": 63,
        "equal": 223,
        "throws": 207,
        "two": 53,
        "different": 79,
        "numeric": 12,
        "types": 17,
        "treated": 12,
        "unequal": 42,
        "logical": 12,
        "l": 12,
        "typeparam": 68,
        "the": 810,
        "type": 181,
        "compare": 180,
        "param": 1463,
        "expected": 257,
        "first": 90,
        "value": 283,
        "this": 161,
        "expects": 101,
        "actual": 265,
        "second": 89,
        "produced": 72,
        "code": 109,
        "cref": 280,
        "assertfailedexception": 175,
        "paramref": 801,
        "system": 778,
        "collections": 139,
        "generic": 29,
        "iequalitycomparer{": 6,
        "}": 99,
        "comparer": 12,
        "see": 118,
        "iequalitycomparer": 6,
        "implementation": 14,
        "use": 85,
        "comparing": 13,
        "keys": 6,
        "null": 179,
        "default": 25,
        "equalitycomparer": 6,
        "string": 454,
        "message": 399,
        "include": 110,
        "shown": 98,
        "results": 104,
        "object[]": 61,
        "parameters": 112,
        "an": 79,
        "array": 69,
        "formatting": 52,
        "arenotequal": 30,
        "notexpected": 100,
        "match": 68,
        "single": 19,
        "floats": 6,
        "they": 37,
        "float": 24,
        "delta": 64,
        "required": 25,
        "accuracy": 24,
        "will": 50,
        "only": 27,
        "than": 78,
        "more": 28,
        "most": 13,
        "less": 9,
        "decimal": 42,
        "decimals": 6,
        "int": 25,
        "longs": 6,
        "long": 24,
        "double": 42,
        "doubles": 6,
        "boolean": 40,
        "strings": 23,
        "invariant": 7,
        "culture": 31,
        "used": 35,
        "comparison": 48,
        "ignorecase": 12,
        "indicating": 16,
        "case": 31,
        "sensitive": 16,
        "insensitive": 24,
        "true": 45,
        "indicates": 12,
        "globalization": 6,
        "cultureinfo": 12,
        "object": 287,
        "supplies": 6,
        "specific": 9,
        "information": 10,
        "current": 8,
        "aresame": 4,
        "objects": 13,
        "refer": 15,
        "same": 79,
        "inputs": 6,
        "do": 12,
        "does": 94,
        "arenotsame": 3,
        "refers": 3,
        "p": 126,
        "that": 6,
        "gets": 71,
        "singleton": 3,
        "instance": 100,
        "functionality": 4,
        "remarks": 34,
        "users": 8,
        "can": 12,
        "plug": 3,
        "custom": 7,
        "assertions": 8,
        "c": 22,
        "extension": 3,
        "methods": 14,
        "for": 6,
        "signature": 5,
        "assertion": 8,
        "provider": 14,
        "could": 8,
        "public": 7,
        "static": 6,
        "void": 3,
        "isoftype": 2,
        "lt;t": 1,
        "gt;": 31,
        "obj": 4,
        "then": 7,
        "syntax": 4,
        "similar": 59,
        "lt;dog": 1,
        "animal": 1,
        ";": 3,
        "documentation": 3,
        "https": 3,
        "github": 3,
        "com": 3,
        "testfx": 3,
        "docs": 3,
        "readme": 3,
        "md": 3,
        "replacenullchars": 1,
        "replaces": 1,
        "characters": 4,
        "\u0027": 2,
        "input": 4,
        "search": 13,
        "returns": 77,
        "converted": 5,
        "replaced": 1,
        "still": 1,
        "present": 4,
        "preserve": 2,
        "compatibility": 2,
        "v": 2,
        "framework": 5,
        "throwassertfailed": 1,
        "function": 2,
        "creates": 1,
        "assertionfailedexception": 1,
        "assertionname": 2,
        "throwing": 6,
        "failure": 3,
        "buildusermessage": 1,
        "builds": 1,
        "formatted": 2,
        "using": 11,
        "given": 10,
        "user": 5,
        "format": 7,
        "composite": 1,
        "contains": 49,
        "zero": 1,
        "based": 3,
        "checkparameternotnull": 2,
        "checks": 1,
        "parameter": 30,
        "valid": 4,
        "parametername": 5,
        "invalid": 5,
        "replacenulls": 1,
        "safely": 1,
        "converts": 1,
        "handling": 1,
        "convert": 3,
        "equals": 11,
        "overloads": 3,
        "instances": 5,
        "reference": 1,
        "equality": 14,
        "method": 87,
        "should": 10,
        "b": 5,
        "always": 9,
        "throw": 13,
        "fail": 4,
        "please": 2,
        "associated": 14,
        "your": 3,
        "obja": 1,
        "objb": 1,
        "false": 34,
        "inconclusive": 7,
        "assertinconclusiveexception": 15,
        "isinstanceoftype": 6,
        "inheritance": 28,
        "hierarchy": 21,
        "expectedtype": 19,
        "isnotinstanceoftype": 6,
        "wrong": 7,
        "wrongtype": 8,
        "isnull": 3,
        "isnotnull": 3,
        "non": 11,
        "istrue": 6,
        "nullable{system": 6,
        "boolean}": 6,
        "isfalse": 6,
        "throwsexception": 6,
        "action": 36,
        "delegate": 21,
        "exact": 9,
        "typeparamref": 33,
        "derived": 14,
        "other": 17,
        "func{system": 6,
        "object}": 3,
        "throwsexceptionasync": 3,
        "threading": 6,
        "tasks": 6,
        "task}": 3,
        "task": 3,
        "executing": 4,
        "collectionassert": 49,
        "areequalunordered": 2,
        "customassert": 2,
        "icollection": 71,
        "list": 6,
        "element": 99,
        "contain": 36,
        "doesnotcontain": 3,
        "allitemsarenotnull": 3,
        "all": 22,
        "items": 6,
        "any": 16,
        "elements": 78,
        "allitemsareunique": 3,
        "unique": 3,
        "duplicate": 13,
        "least": 8,
        "one": 26,
        "issubsetof": 3,
        "subset": 52,
        "another": 6,
        "also": 8,
        "superset": 44,
        "contained": 7,
        "found": 14,
        "isnotsubsetof": 3,
        "every": 3,
        "areequivalent": 3,
        "nullabilities": 6,
        "don\u0027t": 6,
        "arenotequivalent": 3,
        "identical": 3,
        "without": 4,
        "regard": 3,
        "order": 18,
        "including": 4,
        "number": 17,
        "occurrences": 9,
        "each": 11,
        "allitemsareinstancesoftype": 3,
        "containing": 5,
        "some": 5,
        "inherit": 5,
        "implement": 3,
        "defined": 18,
        "having": 17,
        "quantity": 12,
        "whether": 8,
        "checked": 6,
        "references": 14,
        "considered": 13,
        "icomparer": 6,
        "issubsetofhelper": 1,
        "determines": 2,
        "set": 11,
        "must": 9,
        "otherwise": 3,
        "getelementcounts": 1,
        "constructs": 1,
        "dictionary": 2,
        "process": 1,
        "nullcount": 1,
        "findmismatchedelement": 1,
        "finds": 1,
        "mismatched": 8,
        "appears": 1,
        "times": 1,
        "assumed": 1,
        "caller": 1,
        "responsible": 1,
        "level": 5,
        "verification": 1,
        "there": 6,
        "no": 13,
        "out": 2,
        "expectedcount": 1,
        "mismatchedelement": 3,
        "actualcount": 1,
        "may": 9,
        "found;": 1,
        "objectcomparer": 1,
        "compares": 2,
        "stringassert": 28,
        "containswords": 2,
        "substrings": 2,
        "substring": 120,
        "occur": 12,
        "stringcomparison": 9,
        "comparisontype": 18,
        "startswith": 6,
        "begins": 6,
        "start": 13,
        "begin": 10,
        "prefix": 6,
        "endswith": 6,
        "ends": 6,
        "end": 25,
        "suffix": 6,
        "matches": 16,
        "text": 8,
        "regularexpressions": 6,
        "regex": 6,
        "regular": 12,
        "expression": 18,
        "pattern": 30,
        "doesnotmatch": 3,
        "datarowattribute": 39,
        "attribute": 38,
        "define": 2,
        "line": 2,
        "data": 67,
        "ctor": 76,
        "initializes": 78,
        "new": 68,
        "class": 112,
        "arg": 136,
        "argument": 140,
        "takes": 15,
        "arguments": 19,
        "third": 14,
        "fourth": 13,
        "fifth": 12,
        "sixth": 11,
        "seventh": 10,
        "eight": 9,
        "nineth": 8,
        "tenth": 7,
        "eleventh": 6,
        "twelfth": 5,
        "thirteen": 4,
        "fourteenth": 3,
        "fifteenth": 2,
        "sixteenth": 1,
        "calling": 2,
        "displayname": 6,
        "sets": 21,
        "display": 8,
        "customization": 1,
        "getdata": 3,
        "reflection": 6,
        "methodinfo": 11,
        "inheritdoc": 7,
        "getdisplayname": 3,
        "datasourceattribute": 15,
        "specifies": 26,
        "connection": 12,
        "table": 7,
        "row": 4,
        "access": 11,
        "driven": 6,
        "testing": 3,
        "example": 4,
        "[datasource": 2,
        "sqloledb": 1,
        ";data": 1,
        "source": 17,
        "source;integrated": 1,
        "security": 2,
        "sspi;initial": 1,
        "catalog": 1,
        "eqtcoverage;persist": 1,
        "info": 3,
        "mytable": 1,
        "]": 2,
        "datasourcenamefromconfigfile": 1,
        "f": 37,
        "defaultprovidername": 1,
        "datasource": 1,
        "defaultdataaccessmethod": 1,
        "dataaccessmethod": 8,
        "initialized": 4,
        "providerinvariantname": 2,
        "such": 3,
        "sqlclient": 1,
        "connectionstring": 3,
        "warning": 2,
        "password": 2,
        "stored": 5,
        "plain": 2,
        "compiled": 2,
        "restrict": 2,
        "protect": 2,
        "tablename": 3,
        "specify": 7,
        "oledb": 2,
        "setting": 1,
        "datasourcesettingname": 2,
        "lt;microsoft": 2,
        "qualitytools": 2,
        "section": 2,
        "app": 3,
        "config": 2,
        "file": 4,
        "representing": 2,
        "designated": 1,
        "initialization": 2,
        "returned": 6,
        "providing": 1,
        "return": 18,
        "random": 4,
        "datatestmethodattribute": 2,
        "dynamicdatasourcetype": 7,
        "enum": 1,
        "property": 32,
        "declared": 4,
        "dynamicdataattribute": 9,
        "dynamic": 1,
        "dynamicdatasourcename": 2,
        "method\u0027s": 3,
        "dynamicdatadeclaringtype": 1,
        "declaring": 4,
        "useful": 2,
        "cases": 2,
        "defaults": 1,
        "dynamicdatadisplayname": 2,
        "customize": 4,
        "dynamicdatadisplaynamedeclaringtype": 1,
        "testdatasourcediscoveryattribute": 5,
        "discover": 4,
        "itestdatasource": 8,
        "testdatasourcediscoveryoption": 6,
        "discoveryoption": 2,
        "discovering": 1,
        "discovery": 3,
        "option": 5,
        "supported": 3,
        "modes": 1,
        "duringexecution": 1,
        "execution": 11,
        "duringdiscovery": 2,
        "expand": 1,
        "behavior": 15,
        "testidgenerationstrategy": 6,
        "id": 15,
        "generation": 3,
        "strategies": 1,
        "legacy": 2,
        "uses": 4,
        "discovered": 2,
        "instead": 3,
        "collapsed": 1,
        "parent": 4,
        "incompatible": 1,
        "ignored": 1,
        "combination": 2,
        "executor": 2,
        "fully": 3,
        "qualified": 3,
        "generate": 3,
        "versions": 1,
        "fullyqualified": 1,
        "path": 1,
        "serialized": 1,
        "their": 3,
        "starting": 1,
        "testidgenerationstrategyattribute": 4,
        "strategy": 3,
        "generating": 1,
        "assemblycleanupattribute": 1,
        "cleanup": 7,
        "classcleanupattribute": 14,
        "inheritancebehavior": 13,
        "classcleanup": 5,
        "classcleanupbehavior": 10,
        "cleanupbehavior": 10,
        "clean": 8,
        "up": 65,
        "to": 7,
        "capture": 4,
        "output": 10,
        "logs": 4,
        "endofclass": 5,
        "nullable{microsoft": 1,
        "classcleanupbehavior}": 1,
        "run": 15,
        "when": 2,
        "endofassembly": 1,
        "classcleanupexecutionattribute": 7,
        "specification": 3,
        "defaultclasscleanuplifecycle": 1,
        "testcleanupattribute": 1,
        "marks": 1,
        "executed": 4,
        "marked": 1,
        "testmethodattribute": 12,
        "donotparallelizeattribute": 1,
        "disable": 1,
        "parallelization": 4,
        "executionscope": 5,
        "parallel": 6,
        "mode": 1,
        "classlevel": 2,
        "thread": 3,
        "handed": 2,
        "testclass": 3,
        "worth": 1,
        "execute": 6,
        "serially": 1,
        "methodlevel": 2,
        "testmethods": 1,
        "enumeration": 5,
        "classinitializeattribute": 9,
        "defines": 3,
        "classinitialize": 2,
        "base": 6,
        "none": 2,
        "beforeeachderivedclass": 1,
        "before": 1,
        "assemblyinitializeattribute": 1,
        "initialize": 3,
        "discoverinternalsattribute": 1,
        "presence": 1,
        "causes": 1,
        "mstest": 1,
        "i": 2,
        "e": 4,
        "testmethod": 5,
        "internal": 3,
        "addition": 1,
        "testinitializeattribute": 1,
        "parallelizeattribute": 6,
        "defaultexecutionscope": 1,
        "scope": 3,
        "although": 1,
        "gives": 1,
        "maximum": 3,
        "enable": 2,
        "customers": 1,
        "easily": 1,
        "in": 1,
        "aren\u0027t": 1,
        "safe": 1,
        "workers": 2,
        "get": 5,
        "cssiterationattribute": 4,
        "css": 8,
        "iteration": 4,
        "uri": 8,
        "cssiteration": 2,
        "cssprojectstructureattribute": 4,
        "project": 4,
        "structure": 4,
        "cssprojectstructure": 2,
        "descriptionattribute": 4,
        "description": 5,
        "describe": 1,
        "expectedexceptionattribute": 9,
        "expect": 2,
        "exceptiontype": 3,
        "noexceptionmessage": 4,
        "result": 12,
        "fails": 6,
        "allowderivedtypes": 1,
        "allow": 1,
        "qualify": 1,
        "verify": 2,
        "verifies": 1,
        "expectedexceptionbaseattribute": 10,
        "attributes": 4,
        "specifiednoexceptionmessage": 1,
        "getdefaultnoexceptionmessage": 1,
        "expectedexceptionattributetypename": 1,
        "expectedexception": 1,
        "understood": 2,
        "exception\u0027s": 1,
        "included": 1,
        "convenience": 1,
        "outcome": 4,
        "rethrowifassertexception": 1,
        "rethrow": 2,
        "ignoreattribute": 6,
        "ignore": 1,
        "reason": 3,
        "ignoring": 1,
        "ignoremessage": 1,
        "owner": 6,
        "ownerattribute": 4,
        "priorityattribute": 4,
        "priority": 6,
        "attribute;": 4,
        "testcategoryattribute": 4,
        "testcategory": 2,
        "category": 7,
        "applies": 2,
        "testcategories": 4,
        "categories": 2,
        "applied": 3,
        "testcategorybaseattribute": 5,
        "let": 1,
        "create": 1,
        "own": 1,
        "etc": 2,
        "deals": 1,
        "rather": 2,
        "give": 1,
        "flexibility": 1,
        "enums": 1,
        "or\u0027ed": 1,
        "makes": 1,
        "sense": 1,
        "multiple": 2,
        "ones": 1,
        "command": 1,
        "filter": 1,
        "testclassattribute": 2,
        "gettestmethodattribute": 1,
        "enables": 2,
        "running": 2,
        "extensions": 2,
        "override": 2,
        "itestmethod": 12,
        "executes": 1,
        "testresult": 19,
        "represent": 1,
        "s": 3,
        "testpropertyattribute": 5,
        "adapter": 2,
        "returning": 2,
        "testfailureexception": 1,
        "failed": 6,
        "logoutput": 1,
        "logged": 2,
        "logerror": 1,
        "debugtrace": 1,
        "debug": 3,
        "traces": 3,
        "testcontextmessages": 1,
        "executionid": 1,
        "parentexecid": 1,
        "innerresultscount": 1,
        "inner": 2,
        "count": 1,
        "duration": 2,
        "datarowindex": 1,
        "index": 4,
        "individual": 1,
        "returnvalue": 10,
        "currently": 2,
        "resultfiles": 1,
        "files": 1,
        "attached": 1,
        "testtimeout": 3,
        "timeouts": 1,
        "timeoutattribute": 7,
        "infinite": 2,
        "timeout": 10,
        "milliseconds": 2,
        "preset": 1,
        "workitemattribute": 4,
        "workitem": 2,
        "work": 3,
        "item": 4,
        "we": 3,
        "rows": 3,
        "sequential": 2,
        "indicate": 2,
        "msg": 8,
        "ex": 5,
        "internaltestfailureexception": 8,
        "added": 1,
        "practical": 1,
        "purposes": 1,
        "unittestassertexception": 7,
        "exceptions": 3,
        "genericparameterhelper": 17,
        "designed": 1,
        "help": 1,
        "doing": 1,
        "satisfies": 2,
        "common": 4,
        "constraints": 1,
        "constructor": 5,
        "implements": 1,
        "interface": 1,
        "icomparable": 1,
        "ienumerable": 3,
        "\u0027newable\u0027": 1,
        "constraint": 1,
        "generics": 1,
        "supplied": 1,
        "integer": 1,
        "\u0027this\u0027": 1,
        "gethashcode": 1,
        "hashcode": 1,
        "hash": 1,
        "compareto": 1,
        "signed": 1,
        "relative": 1,
        "notsupportedexception": 1,
        "passed": 5,
        "getenumerator": 1,
        "ienumerator": 2,
        "length": 1,
        "clone": 1,
        "cloned": 1,
        "corresponding": 7,
        "displaying": 1,
        "testresults": 1,
        "testmethodname": 1,
        "testclassname": 1,
        "returntype": 1,
        "invoked": 1,
        "parametertypes": 1,
        "just": 1,
        "retrieve": 1,
        "additional": 1,
        "directly": 1,
        "invoke": 3,
        "invokes": 1,
        "pass": 4,
        "g": 1,
        "invocation": 1,
        "call": 2,
        "handles": 1,
        "asynchronous": 1,
        "well": 1,
        "getallattributes": 1,
        "getattributes": 1,
        "tattributetype": 1,
        "debugex": 1,
        "diagnostics": 31,
        "check": 2,
        "argumentnullexception": 1,
        "checkparameternotnullorempty": 1,
        "empty": 3,
        "argumentexception": 2,
        "stringex": 2,
        "isnullorempty": 2,
        "isnullorwhitespace": 2,
        "utfhelper": 2,
        "provides": 1,
        "getexceptionmsg": 1,
        "messages": 4,
        "recursively": 1,
        "error": 3,
        "logging": 4,
        "logger": 4,
        "log": 3,
        "write": 1,
        "logmessagehandler": 1,
        "handler": 1,
        "logmessage": 2,
        "onlogmessage": 1,
        "event": 1,
        "listen": 1,
        "raised": 1,
        "writer": 2,
        "writes": 1,
        "mainly": 1,
        "consume": 1,
        "api": 1,
        "placeholders": 2,
        "args": 1,
        "frameworkmessages": 59,
        "strongly": 2,
        "typed": 2,
        "resource": 3,
        "looking": 1,
        "localized": 57,
        "resourcemanager": 2,
        "cached": 1,
        "overrides": 1,
        "thread\u0027s": 1,
        "currentuiculture": 1,
        "lookups": 1,
        "accessstringinvalidsyntax": 1,
        "looks": 56,
        "actualhasmismatchedelements": 1,
        "{": 69,
        "occurrence": 2,
        "lt;{": 25,
        "allitemsareuniquefailmsg": 1,
        "areequalcasefailmsg": 1,
        "areequaldeltafailmsg": 1,
        "difference": 2,
        "greater": 2,
        "areequaldifferenttypesfailmsg": 1,
        "areequalfailmsg": 1,
        "arenotequaldeltafailmsg": 1,
        "arenotequalfailmsg": 1,
        "except": 1,
        "aresamegivenvalues": 1,
        "never": 2,
        "consider": 1,
        "argumentxmustderivefromclassy": 1,
        "\u0027{": 14,
        "}\u0027": 14,
        "assignable": 1,
        "assertionfailed": 1,
        "asyncuitestmethodnotsupported": 1,
        "async": 2,
        "uitestmethodattribute": 4,
        "either": 1,
        "remove": 1,
        "asyncuitestmethodwithnodispatcherqueue": 1,
        "dispatcherqueue": 2,
        "winui": 1,
        "desktop": 1,
        "remember": 1,
        "bothcollectionsempty": 1,
        "both": 4,
        "bothcollectionssameelements": 1,
        "bothcollectionssamereference": 1,
        "point": 1,
        "bothsameelements": 1,
        "collectionequalreason": 1,
        "nullinmessages": 1,
        "objectstring": 1,
        "containsfail": 1,
        "datadrivenresultdisplayname": 1,
        "donotuseassertequals": 1,
        "amp;": 1,
        "dynamicdataienumerableempty": 1,
        "lt;object[]": 2,
        "dynamicdataienumerablenull": 1,
        "dynamicdatavaluenull": 1,
        "shouldn\u0027t": 1,
        "elementnumbersdontmatch": 1,
        "elementsatindexdontmatch": 1,
        "elementtypesatindexdontmatch": 2,
        "endswithfail": 1,
        "equalstesterinvalidargs": 1,
        "equalstester": 1,
        "can\u0027t": 2,
        "nulls": 1,
        "errorinvalidcast": 1,
        "cannot": 3,
        "internalobjectnotvalid": 1,
        "referenced": 1,
        "longer": 1,
        "invalidparametertoassert": 1,
        "invalidpropertytype": 1,
        "};": 1,
        "isinstanceoffailmsg": 1,
        "ismatchfail": 1,
        "isnotinstanceoffailmsg": 1,
        "isnotmatchfail": 1,
        "nodatarow": 1,
        "atleast": 1,
        "testdatasource": 1,
        "noexceptionthrown": 1,
        "nullparametertoassert": 1,
        "numberofelementsdiff": 1,
        "privateaccessorconstructornotfound": 1,
        "you": 4,
        "might": 2,
        "need": 4,
        "regenerate": 2,
        "private": 4,
        "accessor": 2,
        "latter": 2,
        "privateobject\u0027s": 2,
        "privateaccessormembernotfound": 1,
        "startswithfail": 1,
        "utf": 6,
        "expectedexceptiontypemustderivefromexception": 1,
        "failedtogetexceptionmessage": 1,
        "testmethodnoexception": 1,
        "did": 2,
        "testmethodnoexceptiondefault": 1,
        "testmethodwrongexception": 1,
        "threw": 3,
        "testmethodwrongexceptionderivedallowed": 1,
        "wrongexceptionthrown": 1,
        "stack": 1,
        "trace": 1,
        "unittestoutcome": 10,
        "outcomes": 1,
        "issues": 3,
        "involve": 1,
        "completed": 1,
        "say": 1,
        "aborted": 3,
        "inprogress": 1,
        "trying": 1,
        "timed": 1,
        "unknown": 2,
        "state": 1,
        "notrunnable": 1,
        "codeanalysis": 28,
        "allownullattribute": 1,
        "allowed": 1,
        "disallows": 3,
        "disallownullattribute": 1,
        "disallowed": 1,
        "allows": 3,
        "maybenullattribute": 1,
        "notnullattribute": 1,
        "maybenullwhenattribute": 4,
        "notnullwhenattribute": 4,
        "notnullifnotnullattribute": 3,
        "named": 1,
        "doesnotreturnattribute": 1,
        "circumstance": 1,
        "doesnotreturnifattribute": 3,
        "parametervalue": 2,
        "unreachable": 1,
        "membernotnullattribute": 4,
        "ensure": 2,
        "listed": 2,
        "field": 12,
        "promised": 4,
        "string[]": 2,
        "names": 2,
        "membernotnullwhenattribute": 5
      }
    },
    "8": {
      "id": 8,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\Read Me.txt",
      "content": "\r\n-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\r\n\r\n\r\nDownload more latest updates from \u0027crackzsoft.com\u0027\r\n\r\n-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\r\n\r\nVisit Us on : http://crackzsoft.com\r\n\r\nOfficial Site For Adobe Stuffs:- http://crackzsoft.net\r\n\r\n___________________________________________________________\r\n\r\nInstructions:- \r\n\r\n1. Checks serial during installation. Basically you can\u0027t install without a proper serial.\r\n\r\n2. Checks account info (username and password) along with valid serial when you launch program after installation.\r\n\r\nWhat will this pack do?\r\n\r\n1. Will by-pass serial check during installation.\r\n\r\n2. Will by-pass account sign in and serial check at start-up and at closing the program as well.\r\n\r\n3. Will activate all features included in retail DVD.\r\n\r\nHow to?\r\n\r\n1. Unpack, disable internet and launch setup launcher.\r\n\r\nLanguage Choice:\r\n\r\n- If you want another language other then English, go into Language files folder and take your desired language Setup.xml and put it inside Setup folder, confirm replacing. Default it will install in English language!\r\n\r\n2. Go into Patch x64 folder and copy the file in the following path:\r\n\r\nC / Program Files / Corel / PASMUtility / v1\r\n\r\n3. Confirm replacing. This will by-pass account check plus serial check at start-up and when you close the program.\r\n\r\n4. The only thing it will say Evalution Version on program main window, but all program features included in retail DVD will have been activated.\r\n\r\n5. I\u0027ve almost tried all features and no problems have been met, no expiration, no watermark or any possible issue met for me.\r\n\r\n\r\nFollow Us On :- \r\n\r\nFaceBook:- https://www.facebook.com/CrackzSoft-281838238929093/\r\nGoogel\u002B:-  https://plus.google.com/u/0/113100885654879886429\r\nTwitter:-  https://twitter.com/CrackzSoft\r\nYoutube:-  https://www.youtube.com/channel/UCGdL3n91Ch2cOQnYe06qFsA\r\nLinkedin:- https://www.linkedin.com/in/crackz-soft-a41810140/\r\n\r\n_______________________________________________________________________________\r\n\r\nKeep Visitng Us ! For More Latest Updates ! \r\n\r\nWe are glad to see you there ! \r\n\r\n",
      "keywords": {
        "download": 1,
        "more": 2,
        "latest": 2,
        "updates": 2,
        "\u0027crackzsoft": 1,
        "com\u0027": 1,
        "visit": 1,
        "us": 3,
        "http": 2,
        "crackzsoft": 4,
        "com": 6,
        "official": 1,
        "site": 1,
        "for": 2,
        "adobe": 1,
        "stuffs": 1,
        "net": 1,
        "instructions": 1,
        "checks": 2,
        "serial": 6,
        "installation": 3,
        "basically": 1,
        "you": 5,
        "can\u0027t": 1,
        "install": 2,
        "without": 1,
        "proper": 1,
        "account": 3,
        "info": 1,
        "username": 1,
        "password": 1,
        "along": 1,
        "valid": 1,
        "launch": 2,
        "program": 6,
        "what": 1,
        "will": 8,
        "pack": 1,
        "do": 1,
        "pass": 3,
        "check": 4,
        "sign": 1,
        "start": 2,
        "up": 2,
        "closing": 1,
        "well": 1,
        "activate": 1,
        "all": 3,
        "features": 3,
        "included": 2,
        "retail": 2,
        "dvd": 2,
        "how": 1,
        "unpack": 1,
        "disable": 1,
        "internet": 1,
        "setup": 3,
        "launcher": 1,
        "language": 5,
        "choice": 1,
        "if": 1,
        "want": 1,
        "another": 1,
        "other": 1,
        "then": 1,
        "english": 2,
        "go": 2,
        "files": 2,
        "folder": 3,
        "take": 1,
        "your": 1,
        "desired": 1,
        "xml": 1,
        "put": 1,
        "inside": 1,
        "confirm": 2,
        "replacing": 2,
        "default": 1,
        "patch": 1,
        "x": 1,
        "copy": 1,
        "file": 1,
        "following": 1,
        "path": 1,
        "c": 1,
        "corel": 1,
        "pasmutility": 1,
        "v": 1,
        "this": 1,
        "plus": 2,
        "close": 1,
        "the": 1,
        "only": 1,
        "thing": 1,
        "say": 1,
        "evalution": 1,
        "version": 1,
        "main": 1,
        "window": 1,
        "activated": 1,
        "i\u0027ve": 1,
        "almost": 1,
        "tried": 1,
        "no": 3,
        "problems": 1,
        "met": 2,
        "expiration": 1,
        "watermark": 1,
        "any": 1,
        "possible": 1,
        "issue": 1,
        "me": 1,
        "follow": 1,
        "on": 1,
        "facebook": 2,
        "https": 5,
        "www": 3,
        "googel": 1,
        "google": 1,
        "u": 1,
        "twitter": 2,
        "youtube": 2,
        "channel": 1,
        "ucgdl": 1,
        "n": 1,
        "ch": 1,
        "coqnye": 1,
        "qfsa": 1,
        "linkedin": 2,
        "crackz": 1,
        "soft": 1,
        "keep": 1,
        "visitng": 1,
        "we": 1,
        "glad": 1,
        "see": 1,
        "there": 1
      }
    },
    "9": {
      "id": 9,
      "name": "C:\\Users\\HP\\Desktop\\search_engine_dotnet\\SearchEngine.API\\Database\\Files\\SCIENTIFIC METHODS  HYPOTHESIS.pdf",
      "content": "SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.SCIENTIFIC METHOD AND \nHYPOTHESIS\n\uF0A7 The scientific method is an over\nreaching perspective on how\ninvestigations should be carried out.\n\uF0A7 It consists of a set of research\nprinciples and methods that help\nresearchers obtain valid results from\ntheir research studies.",
      "keywords": {
        "scientific": 34,
        "method": 34,
        "and": 17,
        "hypothesis": 17,
        "\uF0A7": 34,
        "the": 17,
        "reaching": 17,
        "perspective": 17,
        "investigations": 17,
        "should": 17,
        "carried": 17,
        "out": 17,
        "it": 17,
        "consists": 17,
        "set": 17,
        "research": 34,
        "principles": 17,
        "methods": 17,
        "help": 17,
        "researchers": 17,
        "obtain": 17,
        "valid": 17,
        "results": 17,
        "their": 17,
        "studies": 17
      }
    }
  },
  "keywords": {
    "fsc": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "history": [
      {
        "docId": 0,
        "occurrence": 10
      }
    ],
    "philosophy": [
      {
        "docId": 0,
        "occurrence": 9
      }
    ],
    "sciencekhalid": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "adekoya": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "kadekoya": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "unilag": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "edu": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nglecture": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "notes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sessionoutline": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "historyscience": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "ancient": [
      {
        "docId": 0,
        "occurrence": 8
      }
    ],
    "worldwhat": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "science": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 30
      }
    ],
    "its": [
      {
        "docId": 3,
        "occurrence": 8
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "historical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "evolutionprehistory": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "\u2013": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 11
      }
    ],
    "babylon": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "egypt": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "greecethe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "age": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "alchemyrenaissance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "da": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "vinci": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "copernicus": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "kepler": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "galileo": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "newtonthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mechanical": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "darwin": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "evolution": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "mendel": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "geneticsindustrial": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "revolution": [
      {
        "docId": 0,
        "occurrence": 14
      }
    ],
    "faraday": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "maxwell": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "pasteur": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "dalton": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "etcthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "new": [
      {
        "docId": 7,
        "occurrence": 68
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "era": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "scienceoutline": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosophywhat": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "doesphilosophic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "disciplines": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "their": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "relation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "metaphysics": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "epistemology": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "logicgenesis": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scientific": [
      {
        "docId": 0,
        "occurrence": 10
      }
    ],
    "thought": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "knowledgescience": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "human": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "activityroots": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "reason": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "habit": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "formation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "intelligence": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "knowing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "myths": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "anthropomorphic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "animistic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "explanationthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "greeks": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "origins": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "criticismsthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "methods": [
      {
        "docId": 7,
        "occurrence": 14
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "science;": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "observation": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "empirical": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "sciencecriteria": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "observationmodels": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "representation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "factsabstraction": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ordermeasurementshypothesis": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "experimentslaws": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "theoriesscience": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "worldthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "early": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "cultures": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "covers": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "protoscience": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "islamic": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "scienceadvice": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "knowledge": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 14
      }
    ],
    "passed": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "generation": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "oral": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "tradition": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "lore": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "songs": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "speeches": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "folktales": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ballads": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "chants": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "incantations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "prose": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "verses": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "poems": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "etc": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "the": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 810
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 21
      }
    ],
    "development": [
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "writing": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "enabled": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "stored": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "communicated": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "across": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "generations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "much": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "greater": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "fidelityscience": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "founded": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "idea": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "experience": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "effort": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "valid": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "magic": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "intuition": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hope": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "in": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "times": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "common": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "merged": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "religion": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mysticism": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "limits": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "discipline": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "fully": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "understoodancient": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "near": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "eastmesopotamia": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "came": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "sumer": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "now": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "iraq": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "bc": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "pythagoras": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "law": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "astronomy": [
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "medicine": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "babylonian": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mathematics": [
      {
        "docId": 0,
        "occurrence": 11
      }
    ],
    "egyptian": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "persia": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "physics": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "chemistry": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "biology": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "technology": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "medieval": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "islam": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "iran": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mesopotamian": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "clay": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tablet": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "letter": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "louvre": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "king": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "lagash": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "found": [
      {
        "docId": 7,
        "occurrence": 14
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "girsu": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "greco": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "roman": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "world": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "classical": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "antiquityscientific": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "antiquity": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "becomes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tangible": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "th": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "century": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "pre": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "socratic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "thales": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "c": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 22
      },
      {
        "docId": 3,
        "occurrence": 9
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 6
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "plato": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "academy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "with": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "plato\u0027s": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "student": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "aristotle": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "begins": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hellenistic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "period": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "culminating": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "rd": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nd": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "centuries": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "scholars": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "such": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "eratosthenes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "euclid": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "aristarchus": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "samos": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hipparchus": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "archimedes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "important": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "legacy": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "included": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "substantial": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "advances": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "factual": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "especially": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "anatomy": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "zoology": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "botany": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mineralogy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "geography": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "astronomy;": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "awareness": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "importance": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "certain": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "problems": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "related": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "problem": [
      {
        "docId": 1,
        "occurrence": 5
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "change": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "causes;": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "recognition": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "methodological": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "applying": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "natural": [
      {
        "docId": 0,
        "occurrence": 11
      }
    ],
    "phenomena": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "undertaking": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "research": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "india": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "indian": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "ayurveda": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "metallurgy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "subcontinentexcavations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "harappa": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mohenjo": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "daro": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "other": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 17
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "sites": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "indus": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "valley": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "civilization": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ivc": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "uncovered": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "evidence": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "use": [
      {
        "docId": 7,
        "occurrence": 85
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "practical": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "china": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "far": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "east": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "four": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "great": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "inventionsthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "first": [
      {
        "docId": 7,
        "occurrence": 90
      },
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 10
      }
    ],
    "recorded": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "observations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "solar": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "eclipses": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "supernovae": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "made": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "on": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "july": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "chinese": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "astronomers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "observed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "guest": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "star": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "supernova": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "remnant": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "called": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "crab": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nebula": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "inventions": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "some": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "most": [
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "technological": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "compass": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gunpowder": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "papermaking": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "printing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "marks": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "time": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "embarking": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "civilizationsislamic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "astronomywithin": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "people": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "researching": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "there": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ibn": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sina": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "avicenna": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "out": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "many": [
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "things": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "he": [
      {
        "docId": 0,
        "occurrence": 8
      }
    ],
    "did": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "including": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "canon": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "medicine;": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "established": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "free": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hospitals": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "developed": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "treatments": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "unknown": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "manthree": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "main": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "figures": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "abu": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ma\u0027shar": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "al": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "balkhi": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "biruni": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nasir": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "din": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tusi": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "three": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "men": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "all": [
      {
        "docId": 8,
        "occurrence": 3
      },
      {
        "docId": 7,
        "occurrence": 22
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "wrote": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "treatise": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "having": [
      {
        "docId": 7,
        "occurrence": 17
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "deal": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "astrology": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "abd": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "rahman": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sufi": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "one": [
      {
        "docId": 7,
        "occurrence": 26
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "influential": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "improving": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "geometrical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "models": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ptolemy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "book": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "images": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "fixed": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "stars": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "described": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "forty": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "eight": [
      {
        "docId": 7,
        "occurrence": 9
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "constellations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "formed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "alchemyalchemy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "conjures": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "up": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 65
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "fool\u2019s": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "quest": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gold": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "but": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "alchemy\u2019s": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "golden": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ca": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "more": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 28
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "experimental": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "discovery": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "skill": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "physicians": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "chemists": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "worked": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "heal": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "body": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "they": [
      {
        "docId": 7,
        "occurrence": 37
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "studied": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "secrets": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "these": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "women": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ushered": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "creativity": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "inquiry": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "this": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 161
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "digital": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "collection": [
      {
        "docId": 7,
        "occurrence": 237
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "features": [
      {
        "docId": 8,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "selected": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "manuscripts": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "rare": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "books": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "paintings": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ephemera": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "relating": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "alchemical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "topics": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "experimentation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "materials": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "include": [
      {
        "docId": 7,
        "occurrence": 110
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "depictions": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "alchemists\u2019": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "workshops": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pursuits": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "spiritual": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "wisdom": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "transformation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "matter": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "renaissance": [
      {
        "docId": 0,
        "occurrence": 8
      }
    ],
    "sciencerebirth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "culture": [
      {
        "docId": 7,
        "occurrence": 31
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sciencethere": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "escalation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "study": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "alchemy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "architectureone": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "major": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "discoveries": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "polish": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mathematician": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "astronomer": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nicolaus": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "copernicusboth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "microscope": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "telescope": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "invented": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "renaissancethe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "contributed": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "focusing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "humanity": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "instead": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "divinerenaissance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "contd": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "during": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "occurred": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "manufacturing": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "engineering": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "constituted": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "perhaps": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "significant": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "growth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sciences": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "whole": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "began": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "cycle": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mutual": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "advancementastronomer": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "put": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "forth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "theory": [
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "said": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sun": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "center": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "universe": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "earth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "planets": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "orbited": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sunrenaissance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "petrarch": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "laid": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "foundation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "humanism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "his": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "writings": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "known": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "father": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "renaissanceleonardo": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "michelangelo": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "claudio": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "monteverdi": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "may": [
      {
        "docId": 7,
        "occurrence": 9
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "earned": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "reputations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "artists": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "musicians": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "also": [
      {
        "docId": 7,
        "occurrence": 8
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "inventors": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "acousticiansgalileo": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "galilei": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "johannes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "isaac": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "newton": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "primarily": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scientists": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "writers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosophersrenaissance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "developments": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "traditionally": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "\u201Cscientific": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "\u201D": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "b": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 3,
        "occurrence": 7
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "\u2013d": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "ended": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "saw": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "following": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "areas": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "alchemyastronomymathematics": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "greek": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "medical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosophydescartes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "french": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "born": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosopher": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "\u0027the": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosophy\u0027": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "according": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "consists": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "nothing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "motion": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "form": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "compares": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "large": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scale": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mechanism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "i": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 7
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "e": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "machine": [
      {
        "docId": 2,
        "occurrence": 6
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "derived": [
      {
        "docId": 7,
        "occurrence": 14
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "views": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "epicurus": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sought": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "key": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "good": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "life": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "considered": [
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "maximizes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pleasure": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "minimizes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pain": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "evolutiondarwin": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "proposed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "species": [
      {
        "docId": 0,
        "occurrence": 6
      }
    ],
    "can": [
      {
        "docId": 7,
        "occurrence": 12
      },
      {
        "docId": 3,
        "occurrence": 7
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "come": [
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "existing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "share": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ancestor": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "five": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "theories": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "combined": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "descent": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gradualism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "multiplication": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "selection": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "based": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "gradually": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hypothesis": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scientifically": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "accepted": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "explanation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "incontrovertible": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "fact": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "forms": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "changed": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "years": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "basic": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "confirmed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "completely": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "modern": [
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "biologists": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "consider": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "simply": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "geneticsgregor": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "work": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "pea": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "plants": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "discovered": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "fundamental": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "laws": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "inheritance": [
      {
        "docId": 7,
        "occurrence": 28
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "mendel\u0027s": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "postulates": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "principles": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "paired": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "factors": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "principle": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "dominance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "segregation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "purity": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gametes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "independent": [
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "assortment": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "second": [
      {
        "docId": 7,
        "occurrence": 89
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "industrial": [
      {
        "docId": 0,
        "occurrence": 11
      }
    ],
    "revolutionthe": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "transition": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "creating": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "goods": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hand": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "using": [
      {
        "docId": 7,
        "occurrence": 11
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "machines": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "start": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "end": [
      {
        "docId": 7,
        "occurrence": 25
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "widely": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "debated": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "generally": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "spanned": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "process": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "agrarian": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "handicraft": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "economy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "dominated": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "industry": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "it": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "brought": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "sweeping": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "changes": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "economic": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "social": [
      {
        "docId": 0,
        "occurrence": 7
      }
    ],
    "organization": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "invention": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "do": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 12
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tools": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "steam": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "later": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "kinds": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "power": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "adoption": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "factory": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "system": [
      {
        "docId": 7,
        "occurrence": 778
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "periods": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "significancefirst": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "coal": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gas": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "third": [
      {
        "docId": 7,
        "occurrence": 14
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "electronics": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "nuclear": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "fourth": [
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "internet": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "renewable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "energy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "britain": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "architectural": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "innovations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "british": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "origin": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "impacts": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "wider": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "distribution": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "wealth": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "increased": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "international": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "trademanagerial": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "hierarchies": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "oversee": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "division": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "laborinventors": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "revolutionspinning": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "weaving": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "engine": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "harnessing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "electricity": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "telegraph": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "telephone": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "internal": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "combustion": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "automobile": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "contributions": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "michael": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "frs": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "english": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "scientist": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "electromagnetism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "electrochemistry": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "underlying": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "electromagnetic": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "induction": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "diamagnetism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "electrolysisjames": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "clerk": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "frse": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scottish": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "responsible": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "radiation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "describe": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "magnetism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "light": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "different": [
      {
        "docId": 7,
        "occurrence": 79
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "manifestations": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "same": [
      {
        "docId": 7,
        "occurrence": 79
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "phenomenonlouis": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "chemist": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "microbiologist": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "renowned": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "vaccination": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "microbial": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "fermentation": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pasteurization": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "latter": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "named": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "himjohn": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "physicist": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "meteorologist": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "best": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "introducing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "atomic": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "colour": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "blindness": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "daltonism": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "several": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "languages": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 6
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "him": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "sciencescientific": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "allows": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "us": [
      {
        "docId": 8,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "develop": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "technologies": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "solve": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "make": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "informed": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "decisions": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "dramatically": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "changing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "media": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "environment": [
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "challenging": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "climates": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "shifting": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "relationships": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "citizens": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "policy": [
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "makers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "evolving": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "understanding": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "democracy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "stands": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "ready": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tool": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "help": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "combat": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "difficultiesemerging": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "drones": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "robotics": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "vertical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "farming": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "biometrics": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "g": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "artificial": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "uterus": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "airless": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tyres": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "green": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "bullet": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "memory": [
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "erassure": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "molecular": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sciencecovers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "present": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "studies": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "emergence": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "systematic": [
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "branches": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "formalnatural": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "cosmological": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "geological": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "physical": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "chemical": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "biological": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "behavior": [
      {
        "docId": 7,
        "occurrence": 15
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "cultural": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "aspectsformal": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "formal": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "systems": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "logic": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "priori": [
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "opposed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "methodology": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "a": [
      {
        "docId": 7,
        "occurrence": 34
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 5
      }
    ],
    "earlier": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "posteriori": [
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "earliest": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "root": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "traced": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mesopotamia": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "bce": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "vs": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "posterioria": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "latin": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "phrases": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "used": [
      {
        "docId": 7,
        "occurrence": 35
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "distinguish": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "types": [
      {
        "docId": 7,
        "occurrence": 17
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "justification": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "argument": [
      {
        "docId": 7,
        "occurrence": 140
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "reliance": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "current": [
      {
        "docId": 7,
        "occurrence": 8
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "part": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "examples": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "[i]": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tautologies": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "deduction": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pure": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "depends": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "fields": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "aspects": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "personal": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "who": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "term": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "postdates": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "than": [
      {
        "docId": 7,
        "occurrence": 78
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "two": [
      {
        "docId": 7,
        "occurrence": 53
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "millennia": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "greece": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pioneered": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "techniques": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "demonstrationaristotle": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "further": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "anaximander": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "anaximenes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ionian": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "philosophers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "investigate": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "whewell": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "coined": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "what": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 4
      }
    ],
    "nature": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "then": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 7
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "followed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "usewho": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "\u201Chistory": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "science\u201D": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "f": [
      {
        "docId": 7,
        "occurrence": 37
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "cojori": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "suggested": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "atoms": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "agreed": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "started": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "them": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "oldest": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scienceswhy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mother": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "very": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scope": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 14
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "structure": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "subject": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "values": [
      {
        "docId": 7,
        "occurrence": 63
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "earnestly": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pursued": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "incorporates": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "activity": [
      {
        "docId": 1,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "is": [
      {
        "docId": 3,
        "occurrence": 6
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sciencefat": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "text": [
      {
        "docId": 7,
        "occurrence": 8
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "bookswhite": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "laboratory": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "coatsmicroscopescomplex": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "numbers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "calculationsgadgetstelescopesfield": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "tripsexperimentscomputers": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "\u2026\u2026\u2026\u2026": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "mean": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "to": [
      {
        "docId": 7,
        "occurrence": 7
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "you": [
      {
        "docId": 8,
        "occurrence": 5
      },
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 11
      },
      {
        "docId": 1,
        "occurrence": 12
      },
      {
        "docId": 0,
        "occurrence": 3
      }
    ],
    "before": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scientia": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "meaning": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "pursuit": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "application": [
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "evidenceis": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "enterprise": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "builds": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "organizes": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "testable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "explanations": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "predictions": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "universebody": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "comprising": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "measurable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "verifiable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "facts": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "acquired": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "method": [
      {
        "docId": 7,
        "occurrence": 87
      },
      {
        "docId": 3,
        "occurrence": 5
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "generalized": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "intellectual": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "encompassing": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "behaviour": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "experiment": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "person": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "possess": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "highest": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "degree": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "certainty": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "possible": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "reliable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "justified": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "true": [
      {
        "docId": 7,
        "occurrence": 45
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "belief": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "naturecan": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "attempt": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "your": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 10
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "own": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "definitions": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "sentences": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "gives": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ability": [
      {
        "docId": 1,
        "occurrence": 3
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "discover": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "ways": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "operate": [
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "why": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "outcome": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "would": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "finding": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "cures": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "deadly": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "diseases": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "enabling": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "beings": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "walk": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "moon\u2019s": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "surface": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "behind": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "yoga": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "helping": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "instructors": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "understand": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 2
      }
    ],
    "muscles": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "working": [
      {
        "docId": 1,
        "occurrence": 1
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "corresponds": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "negative": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "positive": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "emotions": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "brain": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "goals": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "of": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "scienceexplore": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "worldexplain": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "events": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "useful": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "predictionsare": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "unpredictable": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "satisfy": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "needs": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "improve": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "living": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "standards\u2026\u2026\u2026": [
      {
        "docId": 0,
        "occurrence": 1
      }
    ],
    "csc": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "programming": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 6
      }
    ],
    "languagedr": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "victor": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "t": [
      {
        "docId": 7,
        "occurrence": 394
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "odumuyiwamr": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "sola": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "edagbamigeneral": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "informationinstructordr": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "odumuyiwa": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      },
      {
        "docId": 1,
        "occurrence": 9
      }
    ],
    "room": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "computer": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "building": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "vodumuyiwa": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "ng": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "office": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "hours": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "tuesday": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "pmmr": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "edagbamitas": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "lecture": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "monday": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "nitda": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "hub": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "recitation": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "lab": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "wednesday": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "expectationsyour": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "attendance": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "lectures": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "recitations": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "expect": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "every": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "should": [
      {
        "docId": 7,
        "occurrence": 10
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 6
      }
    ],
    "class": [
      {
        "docId": 7,
        "occurrence": 112
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "minutes": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "late": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "coming": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "causes": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "distractions": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "punctuality": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "will": [
      {
        "docId": 8,
        "occurrence": 8
      },
      {
        "docId": 7,
        "occurrence": 50
      },
      {
        "docId": 3,
        "occurrence": 6
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 17
      }
    ],
    "highly": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "appreciated": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "expected": [
      {
        "docId": 7,
        "occurrence": 257
      },
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "attend": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "classes": [
      {
        "docId": 7,
        "occurrence": 16
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "laptops": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "remain": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "closed": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "prospective\u201Ca": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "contemporary": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "language": [
      {
        "docId": 8,
        "occurrence": 5
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 19
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "taught": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "detail": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "available\u201Dcourse": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "descriptiontoday\u2019s": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "driven": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "software": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 9
      }
    ],
    "definitely": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "future": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "well": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "designing": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "developing": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "efficient": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "enhance": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "productivity": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "cannot": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "overemphasized": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "course": [
      {
        "docId": 1,
        "occurrence": 5
      }
    ],
    "designed": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "expose": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "construction": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "practices": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "turn": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "developers": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "focus": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "object": [
      {
        "docId": 7,
        "occurrence": 287
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 5
      }
    ],
    "oriented": [
      {
        "docId": 1,
        "occurrence": 5
      }
    ],
    "design": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "ood": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "implementation": [
      {
        "docId": 7,
        "occurrence": 14
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "oop": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "like": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "students": [
      {
        "docId": 1,
        "occurrence": 4
      }
    ],
    "introduced": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "net": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 35
      },
      {
        "docId": 1,
        "occurrence": 5
      }
    ],
    "framework": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 2,
        "occurrence": 6
      },
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "specifically": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "visual": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "studio": [
      {
        "docId": 2,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "concepts": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "abstraction": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "polymorphism": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "objects": [
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "mutability": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "exceptions": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "memorize": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "no": [
      {
        "docId": 8,
        "occurrence": 3
      },
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "conceptualize": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "solutions": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "learning": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "outcomesat": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "able": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "write": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "applications": [
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "safe": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "bugs": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "easy": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "changedesign": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "ooddevelop": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "evaluate": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "program": [
      {
        "docId": 8,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "oo": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "principlescreate": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "abstract": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "data": [
      {
        "docId": 7,
        "occurrence": 67
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "extensible": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "developmentcourse": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "contentintroduction": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "environmentc": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "syntax": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "specificationsdefensive": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "programmingtest": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "programminggenericscollectionsabstract": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "typeinheritancedelegates": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "lambda": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "linqgraphical": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "user": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "interfaceschedule": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "week": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "date": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "readings": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "psets": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "lecturer": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "introduction": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "frameworkchapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "dr": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 8
      }
    ],
    "coding": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "syntaxchapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "mr": [
      {
        "docId": 1,
        "occurrence": 4
      }
    ],
    "edagbami": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "typeschapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "specification": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "defensive": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "test": [
      {
        "docId": 7,
        "occurrence": 396
      },
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "genericchapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "bank": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "app": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "project": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 1,
        "occurrence": 8
      }
    ],
    "individual": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 5
      }
    ],
    "edagbamischedule": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "collectionschapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "group": [
      {
        "docId": 1,
        "occurrence": 9
      }
    ],
    "adt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "inheritancechapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "delegate": [
      {
        "docId": 7,
        "occurrence": 21
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "lambdachapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "linqchapt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "graphical": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "interfacemr": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "edagbamirecommended": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "textslan": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "griffiths": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "kurt": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "normark": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "java": [
      {
        "docId": 2,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "programmerserich": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "gamma": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "richard": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "helm": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "ralph": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "johnson": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "john": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "vlissides": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "patterns": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "elements": [
      {
        "docId": 7,
        "occurrence": 78
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "reusable": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "softwarepeter": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "coad": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "edward": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "yourdon": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "designmcconnell": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "steve": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "code": [
      {
        "docId": 7,
        "occurrence": 109
      },
      {
        "docId": 3,
        "occurrence": 9
      },
      {
        "docId": 2,
        "occurrence": 9
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "complete": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "pearson": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "education": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "grading": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "grade": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "performance": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "sets": [
      {
        "docId": 7,
        "occurrence": 21
      },
      {
        "docId": 1,
        "occurrence": 4
      }
    ],
    "assignments": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "final": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "examination": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "overall": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "determined": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "follows": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "setsproblem": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "released": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "progressively": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "semester": [
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "any": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 16
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 5
      },
      {
        "docId": 1,
        "occurrence": 3
      }
    ],
    "act": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "copying": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "plagiarism": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "penalized": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "zero": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "mark": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "solved": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "independently": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "collaborate": [
      {
        "docId": 1,
        "occurrence": 2
      }
    ],
    "ideas": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "codes": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "submitting": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "must": [
      {
        "docId": 7,
        "occurrence": 9
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "written": [
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "unique": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "projecttowards": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "middle": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "given": [
      {
        "docId": 7,
        "occurrence": 10
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "spend": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "weeks": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "source": [
      {
        "docId": 7,
        "occurrence": 17
      },
      {
        "docId": 2,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "whatsoever": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "allowed": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "violation": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "projectgroup": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "afford": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "opportunity": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "member": [
      {
        "docId": 7,
        "occurrence": 1005
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "participate": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "extensively": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "respond": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "questions": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "instructor": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "tas": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "fellow": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "means": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "mandatory": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "everybody": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "get": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "examinationthe": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "meant": [
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "tested": [
      {
        "docId": 7,
        "occurrence": 19
      },
      {
        "docId": 1,
        "occurrence": 1
      }
    ],
    "rajeswari": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "indupuriintroduction": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "platformlanguage": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "neutralin": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "words": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "runtime": [
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "library": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "executing": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "programs": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "compliant": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "web": [
      {
        "docId": 2,
        "occurrence": 9
      }
    ],
    "windows": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "within": [
      {
        "docId": 7,
        "occurrence": 25
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "microsoft": [
      {
        "docId": 7,
        "occurrence": 739
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "offers": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "shift": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "strategy": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "moves": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "client": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "centric": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "server": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "operating": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "hardware": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "applicationbase": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "librarycommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "specificationcommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "runtimeado": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "xmlvbvc": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "vc": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netasp": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "servicesand": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formsjscript\u2026windowsformsframework": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "and": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "toolsthe": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "servicescommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "runtimewindows\u00AE": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formsasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netweb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formsweb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "servicesado": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "adovisual": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netcommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "clr": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 7
      }
    ],
    "works": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "virtual": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "obey": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "rules": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "standards": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "imposed": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "declaration": [
      {
        "docId": 3,
        "occurrence": 15
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "creation": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "usedata": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "librarieserror": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "exception": [
      {
        "docId": 7,
        "occurrence": 735
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "handlinginteractive": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "ide": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "runtimedevelopmentmixed": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "applicationscommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "cls": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "type": [
      {
        "docId": 7,
        "occurrence": 181
      },
      {
        "docId": 3,
        "occurrence": 6
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "cts": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "standard": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "frameworkautomatic": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "managementconsistent": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "error": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "handling": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "safer": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "executionpotentially": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "multi": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "platformdeployment": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "removal": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "registration": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "dependencysafety": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "fewer": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "versioning": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "problemscommon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "runtimemultiple": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "supportcts": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "rich": [
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "built": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "clrimplements": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "various": [
      {
        "docId": 7,
        "occurrence": 10
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "int": [
      {
        "docId": 7,
        "occurrence": 25
      },
      {
        "docId": 3,
        "occurrence": 12
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "double": [
      {
        "docId": 7,
        "occurrence": 42
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "operations": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "typescls": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "set": [
      {
        "docId": 7,
        "occurrence": 11
      },
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "specifications": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "designers": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "need": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "followthis": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "ensure": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "interoperability": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "languagescompilation": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netcode": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "vb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "another": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "languagevb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "compilerc": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "compilerappropriatecompileril": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "intermediatelanguage": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "codeclr": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "just": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "timeexecutionintermediate": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "il": [
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "compiled": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "intermediate": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "accepts": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "recompiles": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "recompilation": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "jit": [
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "done": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "soon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "function": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "subroutine": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "stays": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "subsequent": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "calls": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "cases": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "enough": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "discarded": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "thus": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "making": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "interpretive": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "languageslanguages": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "provided": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "msvb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "j": [
      {
        "docId": 3,
        "occurrence": 7
      },
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "jscriptthird": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "parties": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "buildingapl": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "cobol": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "pascal": [
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "eiffel": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "haskell": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "ml": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "oberon": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "perl": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "python": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "scheme": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "smalltalk\u2026windows": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formsframework": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "clientsrad": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "rapid": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "controlsdata": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "awareactivex\u00AE": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "supportlicensingaccessibilityprinting": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "supportunicode": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "supportui": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "inheritanceasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "platform": [
      {
        "docId": 2,
        "occurrence": 4
      }
    ],
    "services": [
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "allow": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "languageasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "uses": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "generate": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "html": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "pages": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "page": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "targeted": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "capabilities": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "requesting": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "browserasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "\u201Cprogram\u201D": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "cached": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "version": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "asp": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "netlogical": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "aspsupports": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "multiple": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "languagesimproved": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "performancecontrol": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "event": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "execution": [
      {
        "docId": 7,
        "occurrence": 11
      },
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "modelmore": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "productivecleanly": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "encapsulated": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "functionalityasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formsallows": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "clean": [
      {
        "docId": 7,
        "occurrence": 8
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "cut": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "codecode": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "formseasier": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "generatecode": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "executed": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "improved": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "state": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "informationsupport": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "validationdata": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "bound": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "gridsasp": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "servicesa": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "technical": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "definition\u201Ca": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "programmable": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "component": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "accessible": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "via": [
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "protocols\u201Dweb": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "servicesit": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "application\u2026\u2026that": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "exposes": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "network\u2026\u2026using": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "xml\u2026\u2026to": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "powerful": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "sum": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "parts\u2026ado": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "xml": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "datasets": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "separates": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "connected": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "disconnected": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "issueslanguage": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "neutral": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "accessuses": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "clrgreat": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "support": [
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "xmlvisual": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netdevelopment": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "contains": [
      {
        "docId": 7,
        "occurrence": 49
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "debugging": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "hierarchy": [
      {
        "docId": 7,
        "occurrence": 21
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "viewclrclrsummarythe": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "frameworkdramatically": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "simplifies": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "deploymentprovides": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "robust": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "secure": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "environmentsupports": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "languagescomparison": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "ee": [
      {
        "docId": 2,
        "occurrence": 10
      }
    ],
    "netcomparison": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "architecturesj": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netexecution": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "enginej": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "compiles": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "byte": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "jvm": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "msil": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "both": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "verification": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "management": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "garbage": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "securityj": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netcross": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "portabilityj": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "jdk": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "exist": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "target": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "supports": [
      {
        "docId": 2,
        "occurrence": 3
      }
    ],
    "platforms": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "complier": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "netlanguage": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "supportj": [
      {
        "docId": 2,
        "occurrence": 2
      }
    ],
    "tied": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "interface": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "mapping": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "exists": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "ilj": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "nettools": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "employ": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "number": [
      {
        "docId": 7,
        "occurrence": 17
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "pro": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "developer": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "choice": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "con": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "difficulty": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "choosing": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "right": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "job": [
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "single": [
      {
        "docId": 7,
        "occurrence": 19
      },
      {
        "docId": 3,
        "occurrence": 1
      },
      {
        "docId": 2,
        "occurrence": 1
      }
    ],
    "odumuyiwalearning": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "demonstrate": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "syntaxwrite": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "simple": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "cs": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "text;using": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "threading": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "tasks;namespace": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "lesson": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "{": [
      {
        "docId": 7,
        "occurrence": 69
      },
      {
        "docId": 3,
        "occurrence": 12
      }
    ],
    "static": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "void": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "string[]": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "args": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "}": [
      {
        "docId": 7,
        "occurrence": 99
      },
      {
        "docId": 3,
        "occurrence": 8
      }
    ],
    "}}": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statically": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "dynamically": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "typed": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "languagesc": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "say": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "element": [
      {
        "docId": 7,
        "occurrence": 99
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "represents": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "produces": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "information": [
      {
        "docId": 7,
        "occurrence": 10
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "variable": [
      {
        "docId": 3,
        "occurrence": 9
      }
    ],
    "expression": [
      {
        "docId": 7,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 12
      }
    ],
    "compile": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "javascript": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "each": [
      {
        "docId": 7,
        "occurrence": 11
      },
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "preceded": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "typestring": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "name": [
      {
        "docId": 7,
        "occurrence": 2138
      },
      {
        "docId": 3,
        "occurrence": 7
      }
    ],
    "\u201Cvictor\u201D;int": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";after": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "specify": [
      {
        "docId": 7,
        "occurrence": 7
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "variablename": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u201Cjules\u201D;age": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 25
      }
    ],
    "declarations": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "lineint": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";keyword": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u201Cvar\u201D": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "could": [
      {
        "docId": 7,
        "occurrence": 8
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "automatically": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "determine": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "typevar": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u201Cvictor\u201D;var": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "num": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    ";name": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u201Cmike\u201D;": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "variable\u2019s": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "range": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "refer": [
      {
        "docId": 7,
        "occurrence": 15
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "local": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "variables": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "only": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 27
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "properties": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "anything": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "region": [
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "entity": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "starts": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "finishes": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "containing": [
      {
        "docId": 7,
        "occurrence": 5
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "block": [
      {
        "docId": 3,
        "occurrence": 11
      }
    ],
    "delimited": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "pair": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "braces": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "defined": [
      {
        "docId": 7,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "visible": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "public": [
      {
        "docId": 7,
        "occurrence": 7
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "setcount": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "count": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "return": [
      {
        "docId": 7,
        "occurrence": 18
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "count;": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "getcount": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "}scope": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "nested": [
      {
        "docId": 3,
        "occurrence": 6
      }
    ],
    "everything": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "outer": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "continues": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "inside": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "if": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 31
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "declare": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "does": [
      {
        "docId": 7,
        "occurrence": 94
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "extend": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "outside": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "exampleint": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "n": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 16
      }
    ],
    "ans": [
      {
        "docId": 3,
        "occurrence": 9
      }
    ],
    "console": [
      {
        "docId": 3,
        "occurrence": 6
      }
    ],
    "writeline": [
      {
        "docId": 3,
        "occurrence": 9
      }
    ],
    "spacea": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "space": [
      {
        "docId": 3,
        "occurrence": 5
      }
    ],
    "entities": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "defines": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "blocks": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "introduce": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "spaces": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "illegal": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "parent\u2019s": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "intent": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "shouldn\u2019t": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "move": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "spaceint": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "}int": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statement": [
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "expressionsc": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "distinguishes": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "categories": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementfocus": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "here": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementexpression": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementiteration": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementselection": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementwhat": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "difference": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "statementsan": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "sequence": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "operators": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "operands": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "kind": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "expressions": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "statements": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "invocationassignmentincrementdecrement": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "compiler": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "complain": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "line": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "camel": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "notationcamel": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "notation": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "word": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "identifier": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "together": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "without": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "capitalized": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "looking": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "humps": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "camelmycamelnotationidentifierpascal": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "notationpascal": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "except": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "initial": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "uppercasemypascalnotationidentifierfor": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "parameters": [
      {
        "docId": 7,
        "occurrence": 112
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "arguments": [
      {
        "docId": 7,
        "occurrence": 19
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "we": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "normally": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "\u201Ccamel": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "notation\u201D": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "for": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u201Cpascal": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "preprocessing": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "directives": [
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "preprocessor": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "runs": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "prepares": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "examines": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "special": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "begin": [
      {
        "docId": 7,
        "occurrence": 10
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "pound": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "sign": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "define": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "identifiers": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "existence": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "endif": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "warning": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "pragma": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "endregion": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "constantsa": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "constant": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "literals": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "symbolic": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "const": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "value;": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "architecture": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "boilingpoint": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";enumerations": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "[attributes]": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "[modifiers]": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "enum": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "[": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "base": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "type]": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "{enumerator": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "list}": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "intrinsic": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "typesnumeric": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "typesinteger": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "typesfloating": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "point": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "typesbooleanstrings": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "charactersobject": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "integer": [
      {
        "docId": 7,
        "occurrence": 1
      },
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "floating": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "recognizes": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "decimal": [
      {
        "docId": 7,
        "occurrence": 42
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "bit": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "value": [
      {
        "docId": 7,
        "occurrence": 283
      },
      {
        "docId": 3,
        "occurrence": 9
      }
    ],
    "activitynumeric": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "conversionint": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";double": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "di": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "i;console": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    ";console": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "checked": [
      {
        "docId": 7,
        "occurrence": 6
      },
      {
        "docId": 3,
        "occurrence": 12
      }
    ],
    "context": [
      {
        "docId": 3,
        "occurrence": 5
      }
    ],
    "checkedc": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "keyword": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "front": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "contest": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "arithmetic": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "casts": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "overflow": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "cast": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "too": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "high": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "low": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "fit": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "occur\u2014the": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "throw": [
      {
        "docId": 7,
        "occurrence": 13
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "overflowexception": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "contexts": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "detect": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "overflows": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "ordinary": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "uncheckedc": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "unchecked": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "indicate": [
      {
        "docId": 7,
        "occurrence": 2
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "particular": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "contextyou": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "configure": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "default": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 25
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "explicitly": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "silently": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "result": [
      {
        "docId": 7,
        "occurrence": 12
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "c;": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "checked{": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "r": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "b;": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "c;}arithmetic": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "operatorsoperatordescriptionexample": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "additioni": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "subtractionj": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "multiplicationi": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "divisiona": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "modulus": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "remainder": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "increment": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "decrement": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "iassignment": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "operatorsoperatorexampleequivalent": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u2018string\u2019a": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "\u2018string\u2019": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "d": [
      {
        "docId": 3,
        "occurrence": 3
      }
    ],
    "comparison": [
      {
        "docId": 7,
        "occurrence": 48
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "equal": [
      {
        "docId": 7,
        "occurrence": 223
      },
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "toi": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "thani": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "less": [
      {
        "docId": 7,
        "occurrence": 9
      },
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "toj": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "logical": [
      {
        "docId": 7,
        "occurrence": 12
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "anda": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "ora": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "not": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "binary": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "ternary": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "operator": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "conditional": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    ";int": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "maxvalue": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "control": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "structuresequentialflows": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "beginning": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "endselectionsingle": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "selectiondouble": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "selectionmultiple": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "selectionrepetitionfixed": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "repetitionpretest": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "repetitionposttest": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "repetition": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "activities": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "implement": [
      {
        "docId": 7,
        "occurrence": 3
      },
      {
        "docId": 3,
        "occurrence": 4
      }
    ],
    "factorial": [
      {
        "docId": 3,
        "occurrence": 2
      }
    ],
    "iteration": [
      {
        "docId": 7,
        "occurrence": 4
      },
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "recursion": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "score": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "grader": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "gpa": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "calculator": [
      {
        "docId": 3,
        "occurrence": 1
      }
    ],
    "note": [
      {
        "docId": 6,
        "occurrence": 15
      },
      {
        "docId": 5,
        "occurrence": 33
      },
      {
        "docId": 4,
        "occurrence": 18
      }
    ],
    "doc": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "assembly": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "visualstudio": [
      {
        "docId": 7,
        "occurrence": 739
      }
    ],
    "testplatform": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testframework": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "members": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "testtools": [
      {
        "docId": 7,
        "occurrence": 736
      }
    ],
    "unittesting": [
      {
        "docId": 7,
        "occurrence": 736
      }
    ],
    "assert": [
      {
        "docId": 7,
        "occurrence": 121
      }
    ],
    "summary": [
      {
        "docId": 7,
        "occurrence": 994
      }
    ],
    "helper": [
      {
        "docId": 7,
        "occurrence": 16
      }
    ],
    "conditions": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "unit": [
      {
        "docId": 7,
        "occurrence": 23
      }
    ],
    "tests": [
      {
        "docId": 7,
        "occurrence": 217
      }
    ],
    "condition": [
      {
        "docId": 7,
        "occurrence": 92
      }
    ],
    "met": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "thrown": [
      {
        "docId": 7,
        "occurrence": 162
      }
    ],
    "m": [
      {
        "docId": 7,
        "occurrence": 284
      }
    ],
    "areequal": [
      {
        "docId": 7,
        "occurrence": 33
      }
    ],
    "specified": [
      {
        "docId": 7,
        "occurrence": 199
      }
    ],
    "throws": [
      {
        "docId": 7,
        "occurrence": 207
      }
    ],
    "numeric": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "treated": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "unequal": [
      {
        "docId": 7,
        "occurrence": 42
      }
    ],
    "l": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "typeparam": [
      {
        "docId": 7,
        "occurrence": 68
      }
    ],
    "compare": [
      {
        "docId": 7,
        "occurrence": 180
      }
    ],
    "param": [
      {
        "docId": 7,
        "occurrence": 1463
      }
    ],
    "expects": [
      {
        "docId": 7,
        "occurrence": 101
      }
    ],
    "actual": [
      {
        "docId": 7,
        "occurrence": 265
      }
    ],
    "produced": [
      {
        "docId": 7,
        "occurrence": 72
      }
    ],
    "cref": [
      {
        "docId": 7,
        "occurrence": 280
      }
    ],
    "assertfailedexception": [
      {
        "docId": 7,
        "occurrence": 175
      }
    ],
    "paramref": [
      {
        "docId": 7,
        "occurrence": 801
      }
    ],
    "collections": [
      {
        "docId": 7,
        "occurrence": 139
      }
    ],
    "generic": [
      {
        "docId": 7,
        "occurrence": 29
      }
    ],
    "iequalitycomparer{": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "comparer": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "see": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 118
      }
    ],
    "iequalitycomparer": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "comparing": [
      {
        "docId": 7,
        "occurrence": 13
      }
    ],
    "keys": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "null": [
      {
        "docId": 7,
        "occurrence": 179
      }
    ],
    "equalitycomparer": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "string": [
      {
        "docId": 7,
        "occurrence": 454
      }
    ],
    "message": [
      {
        "docId": 7,
        "occurrence": 399
      }
    ],
    "shown": [
      {
        "docId": 7,
        "occurrence": 98
      }
    ],
    "results": [
      {
        "docId": 7,
        "occurrence": 104
      }
    ],
    "object[]": [
      {
        "docId": 7,
        "occurrence": 61
      }
    ],
    "an": [
      {
        "docId": 7,
        "occurrence": 79
      }
    ],
    "array": [
      {
        "docId": 7,
        "occurrence": 69
      }
    ],
    "formatting": [
      {
        "docId": 7,
        "occurrence": 52
      }
    ],
    "arenotequal": [
      {
        "docId": 7,
        "occurrence": 30
      }
    ],
    "notexpected": [
      {
        "docId": 7,
        "occurrence": 100
      }
    ],
    "match": [
      {
        "docId": 7,
        "occurrence": 68
      }
    ],
    "floats": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "float": [
      {
        "docId": 7,
        "occurrence": 24
      }
    ],
    "delta": [
      {
        "docId": 7,
        "occurrence": 64
      }
    ],
    "required": [
      {
        "docId": 7,
        "occurrence": 25
      }
    ],
    "accuracy": [
      {
        "docId": 7,
        "occurrence": 24
      }
    ],
    "decimals": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "longs": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "long": [
      {
        "docId": 7,
        "occurrence": 24
      }
    ],
    "doubles": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "boolean": [
      {
        "docId": 7,
        "occurrence": 40
      }
    ],
    "strings": [
      {
        "docId": 7,
        "occurrence": 23
      }
    ],
    "invariant": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "ignorecase": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "indicating": [
      {
        "docId": 7,
        "occurrence": 16
      }
    ],
    "case": [
      {
        "docId": 7,
        "occurrence": 31
      }
    ],
    "sensitive": [
      {
        "docId": 7,
        "occurrence": 16
      }
    ],
    "insensitive": [
      {
        "docId": 7,
        "occurrence": 24
      }
    ],
    "indicates": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "globalization": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "cultureinfo": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "supplies": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "specific": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "aresame": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "inputs": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "arenotsame": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "refers": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "p": [
      {
        "docId": 7,
        "occurrence": 126
      }
    ],
    "that": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "gets": [
      {
        "docId": 7,
        "occurrence": 71
      }
    ],
    "singleton": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "instance": [
      {
        "docId": 7,
        "occurrence": 100
      }
    ],
    "functionality": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "remarks": [
      {
        "docId": 7,
        "occurrence": 34
      }
    ],
    "users": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "plug": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "custom": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "assertions": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "extension": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "signature": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "assertion": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "provider": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "isoftype": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "lt;t": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "gt;": [
      {
        "docId": 7,
        "occurrence": 31
      }
    ],
    "obj": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "similar": [
      {
        "docId": 7,
        "occurrence": 59
      }
    ],
    "lt;dog": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "animal": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "documentation": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "https": [
      {
        "docId": 8,
        "occurrence": 5
      },
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "github": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "com": [
      {
        "docId": 8,
        "occurrence": 6
      },
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "testfx": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "docs": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "readme": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "md": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "replacenullchars": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "replaces": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "characters": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "\u0027": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "input": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "search": [
      {
        "docId": 7,
        "occurrence": 13
      }
    ],
    "returns": [
      {
        "docId": 7,
        "occurrence": 77
      }
    ],
    "converted": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "replaced": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "still": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "preserve": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "compatibility": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "v": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "throwassertfailed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "creates": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assertionfailedexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assertionname": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "throwing": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "failure": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "buildusermessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "formatted": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "format": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "composite": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "checkparameternotnull": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "checks": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parameter": [
      {
        "docId": 7,
        "occurrence": 30
      }
    ],
    "parametername": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "invalid": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "replacenulls": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "safely": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "converts": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "convert": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "equals": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "overloads": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "instances": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "reference": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "equality": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "always": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "fail": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "please": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "associated": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "obja": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "objb": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "false": [
      {
        "docId": 7,
        "occurrence": 34
      }
    ],
    "inconclusive": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "assertinconclusiveexception": [
      {
        "docId": 7,
        "occurrence": 15
      }
    ],
    "isinstanceoftype": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "expectedtype": [
      {
        "docId": 7,
        "occurrence": 19
      }
    ],
    "isnotinstanceoftype": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "wrong": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "wrongtype": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "isnull": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "isnotnull": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "non": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "istrue": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "nullable{system": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "boolean}": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "isfalse": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "throwsexception": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "action": [
      {
        "docId": 7,
        "occurrence": 36
      }
    ],
    "exact": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "typeparamref": [
      {
        "docId": 7,
        "occurrence": 33
      }
    ],
    "func{system": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "object}": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "throwsexceptionasync": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "tasks": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "task}": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "task": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "collectionassert": [
      {
        "docId": 7,
        "occurrence": 49
      }
    ],
    "areequalunordered": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "customassert": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "icollection": [
      {
        "docId": 7,
        "occurrence": 71
      }
    ],
    "list": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "contain": [
      {
        "docId": 7,
        "occurrence": 36
      }
    ],
    "doesnotcontain": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "allitemsarenotnull": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "items": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "allitemsareunique": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "duplicate": [
      {
        "docId": 7,
        "occurrence": 13
      }
    ],
    "least": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "issubsetof": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "subset": [
      {
        "docId": 7,
        "occurrence": 52
      }
    ],
    "superset": [
      {
        "docId": 7,
        "occurrence": 44
      }
    ],
    "contained": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "isnotsubsetof": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "areequivalent": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "nullabilities": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "don\u0027t": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "arenotequivalent": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "identical": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "regard": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "order": [
      {
        "docId": 7,
        "occurrence": 18
      }
    ],
    "occurrences": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "allitemsareinstancesoftype": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "inherit": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "quantity": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "whether": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "references": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "icomparer": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "issubsetofhelper": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "determines": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "otherwise": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "getelementcounts": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "constructs": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dictionary": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "nullcount": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "findmismatchedelement": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "finds": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "mismatched": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "appears": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assumed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "caller": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "level": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "expectedcount": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "mismatchedelement": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "actualcount": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "found;": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "objectcomparer": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "stringassert": [
      {
        "docId": 7,
        "occurrence": 28
      }
    ],
    "containswords": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "substrings": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "substring": [
      {
        "docId": 7,
        "occurrence": 120
      }
    ],
    "occur": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "stringcomparison": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "comparisontype": [
      {
        "docId": 7,
        "occurrence": 18
      }
    ],
    "startswith": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "prefix": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "endswith": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "ends": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "suffix": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "matches": [
      {
        "docId": 7,
        "occurrence": 16
      }
    ],
    "regularexpressions": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "regex": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "regular": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "pattern": [
      {
        "docId": 7,
        "occurrence": 30
      }
    ],
    "doesnotmatch": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "datarowattribute": [
      {
        "docId": 7,
        "occurrence": 39
      }
    ],
    "attribute": [
      {
        "docId": 7,
        "occurrence": 38
      }
    ],
    "ctor": [
      {
        "docId": 7,
        "occurrence": 76
      }
    ],
    "initializes": [
      {
        "docId": 7,
        "occurrence": 78
      }
    ],
    "arg": [
      {
        "docId": 7,
        "occurrence": 136
      }
    ],
    "takes": [
      {
        "docId": 7,
        "occurrence": 15
      }
    ],
    "fifth": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "sixth": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "seventh": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "nineth": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "tenth": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "eleventh": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "twelfth": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "thirteen": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "fourteenth": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "fifteenth": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "sixteenth": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "calling": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "displayname": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "display": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "customization": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getdata": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "reflection": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "methodinfo": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "inheritdoc": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "getdisplayname": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "datasourceattribute": [
      {
        "docId": 7,
        "occurrence": 15
      }
    ],
    "specifies": [
      {
        "docId": 7,
        "occurrence": 26
      }
    ],
    "connection": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "table": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "row": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "access": [
      {
        "docId": 7,
        "occurrence": 11
      }
    ],
    "testing": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "example": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "[datasource": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "sqloledb": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    ";data": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "source;integrated": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "security": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "sspi;initial": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "catalog": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "eqtcoverage;persist": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "info": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "mytable": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "]": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "datasourcenamefromconfigfile": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "defaultprovidername": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "datasource": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "defaultdataaccessmethod": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dataaccessmethod": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "initialized": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "providerinvariantname": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "sqlclient": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "connectionstring": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "password": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "plain": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "restrict": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "protect": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "tablename": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "oledb": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "setting": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "datasourcesettingname": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "lt;microsoft": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "qualitytools": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "section": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "config": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "file": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "representing": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "designated": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "initialization": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "returned": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "providing": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "random": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "datatestmethodattribute": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "dynamicdatasourcetype": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "property": [
      {
        "docId": 7,
        "occurrence": 32
      }
    ],
    "declared": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "dynamicdataattribute": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "dynamic": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dynamicdatasourcename": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "method\u0027s": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "dynamicdatadeclaringtype": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "declaring": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "defaults": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dynamicdatadisplayname": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "customize": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "dynamicdatadisplaynamedeclaringtype": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testdatasourcediscoveryattribute": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "itestdatasource": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "testdatasourcediscoveryoption": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "discoveryoption": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "discovering": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "option": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "supported": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "modes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "duringexecution": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "duringdiscovery": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "expand": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testidgenerationstrategy": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "id": [
      {
        "docId": 7,
        "occurrence": 15
      }
    ],
    "strategies": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "collapsed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parent": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "incompatible": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ignored": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "combination": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "executor": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "qualified": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "versions": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "fullyqualified": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "path": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "serialized": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "starting": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testidgenerationstrategyattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "generating": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assemblycleanupattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "cleanup": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "classcleanupattribute": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "inheritancebehavior": [
      {
        "docId": 7,
        "occurrence": 13
      }
    ],
    "classcleanup": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "classcleanupbehavior": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "cleanupbehavior": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "capture": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "output": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "logs": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "endofclass": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "nullable{microsoft": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "classcleanupbehavior}": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "run": [
      {
        "docId": 7,
        "occurrence": 15
      }
    ],
    "when": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "endofassembly": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "classcleanupexecutionattribute": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "defaultclasscleanuplifecycle": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testcleanupattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "marked": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethodattribute": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "donotparallelizeattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "disable": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parallelization": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "executionscope": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "parallel": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "mode": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "classlevel": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "thread": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "handed": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "testclass": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "worth": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "execute": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "serially": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "methodlevel": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "testmethods": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "enumeration": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "classinitializeattribute": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "classinitialize": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "none": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "beforeeachderivedclass": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assemblyinitializeattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "initialize": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "discoverinternalsattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "presence": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "mstest": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethod": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "addition": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testinitializeattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parallelizeattribute": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "defaultexecutionscope": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "although": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "maximum": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "enable": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "customers": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "easily": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "aren\u0027t": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "workers": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "cssiterationattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "css": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "uri": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "cssiteration": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "cssprojectstructureattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "cssprojectstructure": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "descriptionattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "description": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "expectedexceptionattribute": [
      {
        "docId": 7,
        "occurrence": 9
      }
    ],
    "exceptiontype": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "noexceptionmessage": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "fails": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "allowderivedtypes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "qualify": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "verify": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "verifies": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "expectedexceptionbaseattribute": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "attributes": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "specifiednoexceptionmessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getdefaultnoexceptionmessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "expectedexceptionattributetypename": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "expectedexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "understood": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "exception\u0027s": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "convenience": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "rethrowifassertexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "rethrow": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "ignoreattribute": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "ignore": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ignoring": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ignoremessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "owner": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "ownerattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "priorityattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "priority": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "attribute;": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "testcategoryattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "testcategory": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "category": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "applies": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "testcategories": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "applied": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "testcategorybaseattribute": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "let": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "create": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "deals": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "rather": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "give": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "flexibility": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "enums": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "or\u0027ed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "makes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "sense": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ones": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "command": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "filter": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testclassattribute": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "gettestmethodattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "enables": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "running": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "extensions": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "override": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "itestmethod": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "executes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testresult": [
      {
        "docId": 7,
        "occurrence": 19
      }
    ],
    "represent": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "s": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "testpropertyattribute": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "adapter": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "returning": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "testfailureexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "failed": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "logoutput": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "logged": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "logerror": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "debugtrace": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "debug": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "traces": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "testcontextmessages": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "executionid": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parentexecid": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "innerresultscount": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "inner": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "duration": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "datarowindex": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "index": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "returnvalue": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "currently": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "resultfiles": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "files": [
      {
        "docId": 8,
        "occurrence": 2
      },
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "attached": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testtimeout": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "timeouts": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "timeoutattribute": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "infinite": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "timeout": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "milliseconds": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "preset": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "workitemattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "workitem": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "item": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "rows": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "sequential": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "msg": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "ex": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "internaltestfailureexception": [
      {
        "docId": 7,
        "occurrence": 8
      }
    ],
    "added": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "purposes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "unittestassertexception": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "genericparameterhelper": [
      {
        "docId": 7,
        "occurrence": 17
      }
    ],
    "doing": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "satisfies": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "constraints": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "constructor": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "implements": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "icomparable": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ienumerable": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "\u0027newable\u0027": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "constraint": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "generics": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "supplied": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "\u0027this\u0027": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "gethashcode": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "hashcode": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "hash": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "compareto": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "signed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "relative": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "notsupportedexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getenumerator": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ienumerator": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "length": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "clone": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "cloned": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "corresponding": [
      {
        "docId": 7,
        "occurrence": 7
      }
    ],
    "displaying": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testresults": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethodname": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testclassname": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "returntype": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "invoked": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "parametertypes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "retrieve": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "additional": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "directly": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "invoke": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "invokes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "pass": [
      {
        "docId": 8,
        "occurrence": 3
      },
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "invocation": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "call": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "handles": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "asynchronous": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getallattributes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getattributes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "tattributetype": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "debugex": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "diagnostics": [
      {
        "docId": 7,
        "occurrence": 31
      }
    ],
    "check": [
      {
        "docId": 8,
        "occurrence": 4
      },
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "argumentnullexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "checkparameternotnullorempty": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "empty": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "argumentexception": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "stringex": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "isnullorempty": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "isnullorwhitespace": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "utfhelper": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "provides": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "getexceptionmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "messages": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "recursively": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "logging": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "logger": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "log": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "logmessagehandler": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "handler": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "logmessage": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "onlogmessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "listen": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "raised": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "writer": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "writes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "mainly": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "consume": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "api": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "placeholders": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "frameworkmessages": [
      {
        "docId": 7,
        "occurrence": 59
      }
    ],
    "strongly": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "resource": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "localized": [
      {
        "docId": 7,
        "occurrence": 57
      }
    ],
    "resourcemanager": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "overrides": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "thread\u0027s": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "currentuiculture": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "lookups": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "accessstringinvalidsyntax": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "looks": [
      {
        "docId": 7,
        "occurrence": 56
      }
    ],
    "actualhasmismatchedelements": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "occurrence": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "lt;{": [
      {
        "docId": 7,
        "occurrence": 25
      }
    ],
    "allitemsareuniquefailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "areequalcasefailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "areequaldeltafailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "areequaldifferenttypesfailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "areequalfailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "arenotequaldeltafailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "arenotequalfailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "aresamegivenvalues": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "never": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "argumentxmustderivefromclassy": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "\u0027{": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "}\u0027": [
      {
        "docId": 7,
        "occurrence": 14
      }
    ],
    "assignable": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "assertionfailed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "asyncuitestmethodnotsupported": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "async": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "uitestmethodattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "either": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "remove": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "asyncuitestmethodwithnodispatcherqueue": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dispatcherqueue": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "winui": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "desktop": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "remember": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "bothcollectionsempty": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "bothcollectionssameelements": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "bothcollectionssamereference": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "bothsameelements": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "collectionequalreason": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "nullinmessages": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "objectstring": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "containsfail": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "datadrivenresultdisplayname": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "donotuseassertequals": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "amp;": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dynamicdataienumerableempty": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "lt;object[]": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "dynamicdataienumerablenull": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "dynamicdatavaluenull": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "shouldn\u0027t": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "elementnumbersdontmatch": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "elementsatindexdontmatch": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "elementtypesatindexdontmatch": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "endswithfail": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "equalstesterinvalidargs": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "equalstester": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "can\u0027t": [
      {
        "docId": 8,
        "occurrence": 1
      },
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "nulls": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "errorinvalidcast": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "internalobjectnotvalid": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "referenced": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "longer": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "invalidparametertoassert": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "invalidpropertytype": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "};": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "isinstanceoffailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "ismatchfail": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "isnotinstanceoffailmsg": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "isnotmatchfail": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "nodatarow": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "atleast": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testdatasource": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "noexceptionthrown": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "nullparametertoassert": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "numberofelementsdiff": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "privateaccessorconstructornotfound": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "might": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "regenerate": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "private": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "accessor": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "privateobject\u0027s": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "privateaccessormembernotfound": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "startswithfail": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "utf": [
      {
        "docId": 7,
        "occurrence": 6
      }
    ],
    "expectedexceptiontypemustderivefromexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "failedtogetexceptionmessage": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethodnoexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethodnoexceptiondefault": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "testmethodwrongexception": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "threw": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "testmethodwrongexceptionderivedallowed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "wrongexceptionthrown": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "stack": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "trace": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "unittestoutcome": [
      {
        "docId": 7,
        "occurrence": 10
      }
    ],
    "outcomes": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "issues": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "involve": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "completed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "aborted": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "inprogress": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "trying": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "timed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "notrunnable": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "codeanalysis": [
      {
        "docId": 7,
        "occurrence": 28
      }
    ],
    "allownullattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "disallows": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "disallownullattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "disallowed": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "maybenullattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "notnullattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "maybenullwhenattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "notnullwhenattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "notnullifnotnullattribute": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "doesnotreturnattribute": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "circumstance": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "doesnotreturnifattribute": [
      {
        "docId": 7,
        "occurrence": 3
      }
    ],
    "parametervalue": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "unreachable": [
      {
        "docId": 7,
        "occurrence": 1
      }
    ],
    "membernotnullattribute": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "listed": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "field": [
      {
        "docId": 7,
        "occurrence": 12
      }
    ],
    "promised": [
      {
        "docId": 7,
        "occurrence": 4
      }
    ],
    "names": [
      {
        "docId": 7,
        "occurrence": 2
      }
    ],
    "membernotnullwhenattribute": [
      {
        "docId": 7,
        "occurrence": 5
      }
    ],
    "download": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "latest": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "updates": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "\u0027crackzsoft": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "com\u0027": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "visit": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "http": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "crackzsoft": [
      {
        "docId": 8,
        "occurrence": 4
      }
    ],
    "official": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "site": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "adobe": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "stuffs": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "instructions": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "serial": [
      {
        "docId": 8,
        "occurrence": 6
      }
    ],
    "installation": [
      {
        "docId": 8,
        "occurrence": 3
      }
    ],
    "basically": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "install": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "proper": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "account": [
      {
        "docId": 8,
        "occurrence": 3
      }
    ],
    "username": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "along": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "launch": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "pack": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "closing": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "activate": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "retail": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "dvd": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "how": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "unpack": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "setup": [
      {
        "docId": 8,
        "occurrence": 3
      }
    ],
    "launcher": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "want": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "go": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "folder": [
      {
        "docId": 8,
        "occurrence": 3
      }
    ],
    "take": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "desired": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "confirm": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "replacing": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "patch": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "x": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "copy": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "corel": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "pasmutility": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "plus": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "close": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "thing": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "evalution": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "window": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "activated": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "i\u0027ve": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "almost": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "tried": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "expiration": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "watermark": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "issue": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "me": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "follow": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "facebook": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "www": [
      {
        "docId": 8,
        "occurrence": 3
      }
    ],
    "googel": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "google": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "u": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "twitter": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "youtube": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "channel": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "ucgdl": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "ch": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "coqnye": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "qfsa": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "linkedin": [
      {
        "docId": 8,
        "occurrence": 2
      }
    ],
    "crackz": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "soft": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "keep": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "visitng": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ],
    "glad": [
      {
        "docId": 8,
        "occurrence": 1
      }
    ]
  }
}